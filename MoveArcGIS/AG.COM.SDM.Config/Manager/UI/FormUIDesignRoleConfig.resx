<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAADG
        DAAAAk1TRnQBSQFMAgEBAwEAARABAAEQAQABEAEAARABAAT/ARkBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABEAMAAQEBAAEYBgABDP8AOQABtwGiAZMBYwFJATUBYwFJATUBYwFJATUBYwFJATUBYwFJATUBYwFJ
        ATUBYwFJATUBYwFJATUBYwFJATUBYwFJATUBYwFJATU2AAF1AYQBjwFsAXoBhQFgAW0BdwFRAV0BZgFC
        AUwBVAExAToBQQEjASoBMAEWARwBIQEOARMBGAEOARMBGAEOARMBGAEOARMBGAEOARMBGAEOARMBGAEO
        ARMBGAMAAXUBhAGPAWYBgAGPAWABeQGHAVcBbgF7AU4BYgFvAUQBVgFhATkBSAFSAS4BOgFDASUBLgE1
        ARsBIgEpARQBGQEeAQ4BEgEWAQ4BEwEYDwABtwGiAZMB9gHhAdcB9QHdAdEB8wHYAcwB8gHUAcYB8QHR
        AcEB8AHNAb0B7wHKAbkB7wHHAbUB7gHFAbIB7QHDAa8BYwFJATU2AAF3AYcBkgGiAd8B8AFwAc0B6gFJ
        AbgB4gE3Aa4B2wEtAakB2QEmAaEB0gEhAZgBxwEgAY4BvAEeAYMBrgEZAX8BqwEVAXwBqQEbAXcBnwEf
        AXIBlgEWARwBIQMAAXcBhwGSAYkBoQGrAWoBsgHUAQABjwHNAQABjwHNAQABjwHNAQQBjAHHAQgBiAG+
        AQ8BggG0ARUBfAGpARsBdwGfAR8BcgGWASIBSwFcAZsBrQG1DAABtwGiAZMB9wHlAdwBhwFvAV0BggFp
        AVYBfQFjAVEBeAFfAUsBhwFvAV0BggFpAVYBfQFjAVEBeAFfAUsB7gHFAbEBYwFJATU2AAF6AYoBlQGq
        AegB9gGVAeUB/AGEAd8B+wF1AdYB+gFqAdAB9wFdAcYB9AFQAb4B8AFBAbQB7AE1AaoB6AErAaQB5gEg
        AZoB3wEWAZAB1wEbAXcBnwEgAScBLQMAAXoBigGVAX4BvgHTAYoBpAGuAX4B3AH/AV8BzwH/AVUBywH/
        AUwBxAH6AUEBvAH1ATcBswHwAS4BqgHrASQBoAHlARMBjAHUASMBZwGAAV4BaQFtDAABtwGiAZMB+AHp
        AeIB9wHkAdsBxwGxAaUBvgGmAZkBfQFkAVEB9wHkAdsBxwGxAaUBvgGmAZkBfQFkAVEB7gHHAbUBYwFJ
        ATU2AAF9AY4BmAGwAeoB9gGfAekB+wGSAeQB/AGBAd0B+wF1AdYB+gFoAc4B9wFdAcYB9AFNAbwB8AFB
        AbQB7AE1AaoB6AEqAaMB5gEdAZYB3AEVAXwBqQEtATQBOwMAAX0BjgGYAXkB0gHsAYsBpAGtAYkBwgHO
        AXEB2AH/AWUB0wH/AVwBzgH/AVEByQH+AUkBwQH6AT8BuQH1ATQBsAHuASkBqAHpARABhQHNASIBSwFb
        AbIBwAHGCQABtwGiAZMB+gHtAegB+QHpAeIBmQEzAQABxwGxAaYBggFqAVYB+QHpAeIBeAFfAUsBxwGx
        AaYBggFqAVYB7wHKAbgBYwFJATU2AAGAAZEBnAG2Ae0B+AGqAewB+wGbAegB+wGPAeMB/AGBAd0B+wFx
        AdUB+QFoAc4B9wFbAcUB9AFNAbwB8AE9AbIB7AEyAakB6AEkAZ4B4gEQAYIBtAE7AUMBSwMAAYABkQGc
        AYEB1wHvAX0BxQHgAYwBpgGwAYAB3QH+AWgB0wH/AWcB1AH/AWIB0QH/AVgBzQH/AU4BxwH8AUYBvgH3
        ATsBtgHyATEBrAHsASUBaQGBAXoBlQGhCQABtwGiAZMB+wHxAe0B+wHvAeoB9wHnAd8B9QHeAdMBhwFv
        AV0B+wHvAeoB9wHnAd8B9QHeAdMBhwFvAV0B8AHNAb0BYwFJATU2AAGDAZUBnwG+AfAB+QGrAfAB9wGl
        AewB+wGYAecB+wGJAeEB/AF/Ad0B+wFxAdUB+QFlAc0B9wFYAcQB8wFLAbsB8AE9AbIB7AEsAaQB4wEM
        AYoBvwFJAVMBXAMAAYMBlQGfAYkB3AHxAYwB4gH/AY0BqAGxAYwBugHHAXQB2AH/AWcB1AH/AWcB1AH/
        AWcB1AH/AV8B0AH/AVQBzQH/AUsBxQH8AUEBuwH3AS4BogHbAVEBZwF0AbIBwAHGBgABugGlAZYB/AH0
        AfEBhwFvAV0BggFpAVYBfQFjAVEBeAFfAUsBhwFvAV0BggFpAVYBfQFjAVEBeAFfAUsB8QHRAcIBYwFJ
        ATU2AAGGAZkBowG+AfAB+QG2Ae0B+AGwAe4B+gGkAesB+gGVAeYB+wGJAeEB/AF9AdwB/AFxAdUB+QFl
        Ac0B9wFYAcQB8wFJAbkB7wE1AakB5wEMAY8BxwFXAWMBawMAAYYBmgGjAZIB4QHyAZgB6AH9AYABxAHe
        AY4BpwGwAYEB3gH9AYQB4AH/AYQB4AH/AYQB4AH/AYQB4AH/AYEB3wH/AXsB3QH/AXQB2AH/AWsB1gH/
        AVYBqQHRAY8BmwGkBgABvgGpAZoB/QH4AfUB9wHkAdsBxwGxAaUBvgGmAZkBfQFkAVEB9wHkAdsBxwGx
        AaUBvgGmAZkBfQFkAVEB8gHVAcYBYwFJATU2AAGJAZwBpgG+AfAB+QG2Ae0B+AG2Ae0B+AGrAfAB9wGi
        AewB+gGVAeYB+wGJAeEB/AF9AdwB/AFvAdMB+gFjAcwB9wFVAcMB8wFJAbkB7wEZAZkBzwFjAXABegMA
        AYgBnAGlAZoB5gHzAZ8B6wH7AZgB6AH+AYsBrAG5AYsBrAG5AYoBqgG3AYgBpgGzAYYBowGvAYMBnwGq
        AYEBmgGmAX8BlQGhAXwBkQGdAXoBjgGZAXkBiwGVAXcBiAGTBgABwwGuAZ4B/gH7AvkB6QHiAXgBXwFL
        AccBsQGmAYIBagFWAfkB6QHiAZkBMwEAAccBsQGmAYIBagFWAfMB2AHMAWMBSQE1NgABiwGgAagBvgHw
        AfkBvgHwAfkBvgHwAfkBvgHwAfkBtAHyAfgBqgHsAfsBoAHpAfsBlQHlAfwBigHfAfwBfwHYAfsBdAHS
        AfgBaAHKAfQBXQHAAfEBYwFwAXoDAAGLAaABqAGgAeoB9gGmAe4B+QGfAesB+wGYAegB/gF6AdoB/wFn
        AdQB/wFnAdQB/wFnAdQB/wFnAdQB/wFnAdQB/wFnAdQB/wF3AYgBkw8AAcgBsgGjAf8B/QH8AfsB7wHq
        AfcB5wHfAfUB3gHTAYcBbwFdAfsB7wHqAfcB5wHfAfUB3gHTAYcBbwFdAfUB3QHSAWMBSQE1NgABjQGh
        AaoBjQGhAaoBjQGhAaoBjQGhAaoBjQGhAaoBiwGfAagBiQGcAaYBiQGbAaYBhwGaAaQBhgGZAaMBhAGW
        AaABhAGWAaABgwGVAaABgwGVAaABdQGEAY8DAAGOAaIBqwGnAe4B9gGrAfAB9wGmAe4B+QGfAesB+wGY
        AegB/QFxAdQB+wGJAZ4BpwGGAZkBowGCAZQBnwF+AZABmgF6AYwBlwF3AYgBkw8AAcwBtgGnA/8B/gP9
        AfoB+QH9AfcB9gH8AfQB8gH7AfEB7QH6Ae0B5wH4AeoB4gH3AeUB3AH2AeEB1wFjAUkBNTYAAY8BpAGs
        AbIB5AHsAbYB7QH4AbYB7QH4AakB7AH2AZIB4QHzAY0BoQGqGwABjwGkAawBoAHSAdoBqwHwAfcBqwHw
        AfcBpgHuAfkBnwHrAfsBjQGhAaohAAHqAaoBiwHqAaoBiwHqAaoBiwHpAaUBhAHpAZ8BegHnAZcBbgHm
        AY4BYgHlAYYBVgHjAX0BSgHjAXYBQAHiAXIBOQHIAWIBLzkAAY8BpAGsAY8BpAGsAY8BpAGsAY8BpAGs
        AY8BpAGsIQABjwGkAawBjwGkAawBjwGkAawBjwGkAawBjwGkAawkAAHqAaoBiwH/AcIBogH+AcABnwH9
        Ab0BmgH8AbkBlgH7AbUBkAH6AbABiwH5AasBhAH4AacBfQH2AaIBdwH1AZ0BcQHNAWUBMZwAAeoBqgGL
        AeoBqgGLAeoBqgGLAeoBqgGLAeoBpgGGAekBoQF/AegBmwF2AecBlAFsAeYBjgFiAeUBhwFYAeQBgQFO
        AeIBcgE59gABQgFNAT4HAAE+AwABKAMAAUADAAEQAwABAQEAAQEFAAGAFwAD/wEABv8CAAT/AcABAwMA
        AQEBAAEHAcABAwMAAQEBAAEDAcABAwMAAQEBAAEDAcABAwMAAQEBAAEBAcABAwMAAQEBAAEBAcABAwMA
        AQECAAHAAQMDAAEBAgABwAEDAwABAQIAAcABAwMAAQEBAAEHAcABAwMAAQEBAAEHAcABAwIAAQEB/wEB
        Af8BwAEDAgABgwH/AYMB/wHAAQMCAAT/AcABAwIABv8CAAs=
</value>
  </data>
</root>