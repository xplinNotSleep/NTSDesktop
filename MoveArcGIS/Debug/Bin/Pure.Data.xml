<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pure.Data</name>
    </assembly>
    <members>
        <member name="M:Pure.Data.PathHelper.GetBaseDirectory">
            <summary>
            获取程序根目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.PathHelper.GetAppExecuteDirectory">
            <summary>
            获取dll存放路径
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.BackupExportType">
            <summary>
            导出类型
            </summary>
        </member>
        <member name="M:Pure.Data.BackupHelper.Backup``1(Pure.Data.IDatabase,Pure.Data.BackupOption)">
            <summary>
            备份数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.BackupOption">
            <summary>
            备份参数选项
            </summary>
        </member>
        <member name="P:Pure.Data.BackupOption.BackupExportType">
            <summary>
            导出类型
            </summary>
        </member>
        <member name="P:Pure.Data.BackupOption.SQL">
            <summary>
            查询数据的SQL脚本
            </summary>
        </member>
        <member name="P:Pure.Data.BackupOption.OutputDir">
            <summary>
            输出目录
            </summary>
        </member>
        <member name="P:Pure.Data.BackupOption.OutputFileName">
            <summary>
            输出文件名
            </summary>
        </member>
        <member name="P:Pure.Data.BackupOption.EnableSqlFilter">
            <summary>
            SQL过滤
            </summary>
        </member>
        <member name="M:Pure.Data.ExcelExportProvider.ObjListToXml``1(Pure.Data.IClassMapper,System.Collections.Generic.List{``0},System.String)">
            <summary>
            实体类序列化成xml
            </summary>
            <param name="enitities">The enitities.</param>
            <param name="headtag">The headtag.</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.ExcelExportProvider.XmlToObjList``1(System.String,System.String)">
            <summary>
            使用XML初始化实体类容器
            </summary>
            <typeparam name="T"></typeparam>
            <param name="typename">The typename.</param>
            <param name="xml">The XML.</param>
            <param name="headtag">The headtag.</param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.SqlExportProvider">
            <summary>
            对象拼接sql语句
            </summary>
        </member>
        <member name="M:Pure.Data.SqlExportProvider.GetColmons(FluentExpressionSQL.Sql.ISqlDialectProvider,Pure.Data.IClassMapper)">
            <summary>
            获得类型的列名
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlExportProvider.GetValues(System.Object,FluentExpressionSQL.Sql.ISqlDialectProvider,Pure.Data.IClassMapper)">
            <summary>
            获得值
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.KeepConnectionAlive">
            <summary>
             Set to true to keep the first opened connection alive until this object is disposed
            </summary>
        </member>
        <member name="F:Pure.Data.DatabaseConfig._ValidateStopOnFirstFailure">
            <summary>
            是否当验证出现错误即可停止
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.AutoDisposeConnection">
            <summary>
            是否自动释放Connection对象，false则只保留一个Connection对象
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.CacheOrmTime">
            <summary>实体缓存过期时间，默认60秒</summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.CacheOrmSingleTime">
            <summary>单对象缓存过期时间，默认60秒</summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.OrmCacheCheckPeriod">
            <summary>缓存维护定时器的检查周期，默认5秒</summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.EnableOrmLog">
            <summary>
            是否启用自定义日志输出
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.EnableInternalLog">
            <summary>
            是否启用内部日志输出
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.LogWithRawSql">
            <summary>
            是否用原始格式化SQL输出到日志
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.CategoryLogType">
            <summary>
            是否按日志类型保存日志文件
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.OrmLogsPath">
            <summary>
            日志输出路径
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.MaxServerLogSize">
            <summary>最大日志行数</summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.DefaultPageSize">
            <summary>默认分页大小</summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.LoadMapperMode">
            <summary>
            加载Mapper 的模式: 1：fluent mapper ， 2：Attribute  ， 3：sql map
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.IsWatchSqlMapFile">
            <summary>
            是否监听Sql map配置文件
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.WatchSqlMapInterval">
            <summary>
            监听sql map文件间隔时间
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.SqlMapDirPaths">
            <summary>
            sql map所在目录路径
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.OutputSqlMapLoaderLogs">
            <summary>
            输出Sql map加载日志代理
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.FormatSql">
            <summary>
            是否启用SQL格式化
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.CanUpdatedWhenTableExisted">
            <summary>
            当表存在时候能否更新
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.AutoMigrateOnContainTable">
            <summary>
            指定某些表能自动迁移（以;分割）
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.AutoRemoveUnuseColumnInTable">
            <summary>
            自动清空没用的属性列，用于CodeFirst模式
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.AutoFilterEmptyValueColumnsWhenTrack">
            <summary>
            是否自动过滤空值列的更新
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.GlobalIgnoreUpdatedColumns">
            <summary>
            Track模式下,全局过滤指定更新列名（以;分割）
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.EnableConnectionPool">
            <summary>
            是否启用数据库连接池
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.EnableLogConnectionPool">
            <summary>
            是否开启连接池日志,需要先启用EnableDebug
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.MinIdle">
            <summary>
            连接池最小数量
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.MaxIdle">
            <summary>
            连接池最大数量
            </summary>
        </member>
        <member name="F:Pure.Data.DatabaseConfig._ConnectionPoolStepSize">
            <summary>
            连接池初始化步长
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.InitialSize">
            <summary>
            连接池初始化步长
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.MaxWaitMillis">
            <summary>
             配置获取连接等待超时的时间,以毫秒为单位，在抛出异常之前，池等待连接被回收的最长时间（当没有可用连接时）。设置为-1表示无限等待。
             最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无限等待（默认为无限，建议调整为60000ms，避免因线程池不够用，而导致请求被无限制挂起）
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.MaxTotal">
            <summary>
             连接池中可同时连接的最大的连接数，默认-1全部激活不限制
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.TimeBetweenEvictionRunsMillis">
            <summary>
            失效检查线程运行时间间隔，如果小于等于-1，不会启动检查线程，默认-1
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.MinEvictableIdleTimeMillis">
            <summary>
             配置一个连接在池中最小生存的时间，单位是毫秒，默认30分钟
             连接池中连接，在时间段内一直空闲， 被逐出连接池的时间
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.EnableRemoveAbandoned">
            <summary>
            是否启用失效清除对象
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.RemoveAbandonedOnBorrow">
            <summary>
            是否在获取对象连接时,自动检测是否含有失效的连接，如果有则执行清除
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.RemoveAbandonedOnMaintenance">
            <summary>
            是否运行期间，自动检测是否含有失效的连接，如果有则执行清除
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.RemoveAbandonedTimeout">
            <summary>
             自动回收超时时间(以秒数为单位)，默认300 
             超过时间限制，回收没有用(废弃)的连接（建议调整为180）
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.NumTestsPerEvictionRun">
            <summary>
             代表每次检查链接的数量，默认3，建议设置和maxActive一样大，这样每次可以有效检查所有的链接.
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.SoftMinEvictableIdleTimeMillis">
            <summary>
            软删除失效驱逐的时间，默认-1，单位毫秒
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.TestOnBorrow">
            <summary>
              取得对象时是否进行验证，检查对象是否有效，默认为false
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.TestOnCreate">
            <summary>
              创建对象时是否进行验证，检查对象是否有效，默认为false
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.TestOnReturn">
            <summary>
            返回对象时是否进行验证，检查对象是否有效，默认为false
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.TestWhileIdle">
            <summary>
             空闲时是否进行验证，检查对象是否有效，默认为false
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.ValidationQuery">
            <summary>
            SQL查询,用来验证从连接池取出的连接,在将连接返回给调用者之前.如果指定,则查询必须是一个SQL SELECT并且必须返回至少一行记录
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.EnableLobConverter">
            <summary>
            是否启用Lob类型转换器（Clob和Blob）
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.LobConverterClassName">
            <summary>
             Lob类型转换器接口实现类
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.EnableCodeGen">
            <summary>
            是否启用代码生成
            </summary> 
        </member>
        <member name="P:Pure.Data.DatabaseConfig.CodeGenType">
            <summary>
            代码生成类型
            </summary> 
        </member>
        <member name="P:Pure.Data.DatabaseConfig.CodeGenClassNameMode">
            <summary>
            类名显示模式
            </summary> 
        </member>
        <member name="P:Pure.Data.DatabaseConfig.CodeGenPropertyNameMode">
            <summary>
            属性名显示模式
            </summary> 
        </member>
        <member name="P:Pure.Data.DatabaseConfig.CodeGenProjectName">
            <summary>
             项目名称（英文缩写）
            </summary> 
        </member>
        <member name="P:Pure.Data.DatabaseConfig.CodeGenNameSpace">
            <summary>
             代码生成命名空间前缀
            </summary> 
        </member>
        <member name="P:Pure.Data.DatabaseConfig.CodeGenTableFilter">
            <summary>
            代码生成过滤表名前缀
            </summary> 
        </member>
        <member name="P:Pure.Data.DatabaseConfig.CodeGenTemplates">
            <summary>
            代码生成模板
            </summary>
        </member>
        <member name="P:Pure.Data.DatabaseConfig.BulkOperateClassName">
            <summary>
            批量处理器
            </summary>
        </member>
        <member name="T:Pure.Data.LoadMapperMode">
            <summary>
            加载mapper方式
            </summary>
        </member>
        <member name="T:Pure.Data.IDataSource">
            <summary>
            数据源
            </summary>
        </member>
        <member name="P:Pure.Data.IDataSource.Name">
            <summary>
            数据源名称
            </summary>
        </member>
        <member name="P:Pure.Data.IDataSource.ConnectionString">
            <summary>
            数据源链接字符串
            </summary>
        </member>
        <member name="P:Pure.Data.IDataSource.Weight">
            <summary>
            被选中的权重
            </summary>
        </member>
        <member name="T:Pure.Data.DataSourceType">
            <summary>
            数据源类型
            </summary>
        </member>
        <member name="F:Pure.Data.DataSourceType.Write">
            <summary>
            写数据库源
            </summary>
        </member>
        <member name="F:Pure.Data.DataSourceType.Read">
            <summary>
            读数据库源
            </summary>
        </member>
        <member name="F:Pure.Data.DataSourceType.ReadAndWrite">
            <summary>
            可读写数据源
            </summary>
        </member>
        <member name="T:Pure.Data.IDatabaseConfig">
            <summary>
            数据库配置
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.InitByPureDataConfiguration">
            <summary>
            是否由PureDataConfiguration初始化
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.ValidateStopOnFirstFailure">
            <summary>
            是否当验证出现错误即可停止
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.ParameterPrefix">
            <summary>
            sql参数前缀
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.ParameterSuffix">
            <summary>
            sql参数后缀
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.GlobalTablePrefix">
            <summary>
            全局表前缀
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.EnableIntercept">
            <summary> 
            是否启用监听器
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.Interceptors">
            <summary>
            中断器集合
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.ExecuteTimeout">
            <summary>
            执行超时单位秒，默认30秒
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.ExecuteSlowMills">
            <summary>
            执行耗时操作记录单位毫秒，默认1000
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.KeepConnectionAlive">
            <summary>
            是否保持数据库连接状态直到对象释放
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.AutoDisposeConnection">
            <summary>
            是否自动释放Connection对象，false则只保留一个Connection对象
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.EnableDebug">
            <summary>
            是否启动调试模式
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.EnableLogError">
            <summary>
            是否记录错误
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.EnableOrmCache">
            <summary>
            是否启用ORM缓存
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.CacheOrmTime">
            <summary>
            列表对象缓存过期时间，默认60秒
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.CacheOrmSingleTime">
            <summary>
            单对象缓存过期时间，默认60秒
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.OrmCacheCheckPeriod">
            <summary>缓存维护定时器的检查周期，默认5秒</summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.EnableOrmLog">
            <summary>
            是否启用自定义日志输出
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.EnableInternalLog">
            <summary>
            是否启用内部日志输出
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.OutputAction">
            <summary>
            输出日志方法代理
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.OrmLogsPath">
            <summary>
            日志输出路径
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.MaxServerLogSize">
            <summary>
            最大日志行数
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.DefaultPageSize">
            <summary>
            默认分页大小，默认10
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.CategoryLogType">
            <summary>
            日志分类类型:Info/Debug/Error
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.MappingAssemblies">
            <summary>
            组装实体映射dll的Assembly,默认读取当前程序下所有Assembly
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.LoadMapperMode">
            <summary>
            加载Mapper 的模式: 1：fluent mapper ， 2：Attribute  ， 3：sql map
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.DataSources">
            <summary>
            读写分离数据源集合
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.NameSpacePrefix">
            <summary>
            Sql Map  Scope前缀命名空间
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.IsWatchSqlMapFile">
            <summary>
            是否监听SqlMap配置文件
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.WatchSqlMapInterval">
            <summary>
            间隔监听SqlMap配置文件时间（毫秒）
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.SqlMapFilePaths">
            <summary>
            sql map配置路径
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.SqlMapDirPaths">
            <summary>
            sql map所在目录路径
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.OutputSqlMapLoaderLogs">
            <summary>
            输出Sql map加载日志代理
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.EnableSqlMap">
            <summary>
            是否启用Sql Map功能
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.FormatSql">
            <summary>
            是否启用SQL格式化
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.LogWithRawSql">
            <summary>
            是否用原始格式化SQL输出到日志
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.CanUpdatedWhenTableExisted">
            <summary>
            当表存在时候能否更新
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.AutoMigrate">
            <summary>
            是否自动迁移数据库脚本
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.AutoRemoveUnuseColumnInTable">
            <summary>
            自动清空没用的属性列，用于CodeFirst模式
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.EnableAutoMigrateLog">
            <summary>
            是否启用自动迁移日志
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.EnableAutoMigrateDebug">
            <summary>
            是否启用自动迁移调试
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.AutoMigrateOnContainTable">
            <summary>
            指定某些表能自动迁移（以;分割）
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.AutoMigrateWithoutTable">
            <summary>
            不迁移某些表（以;分割）
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.DbConnectionInit">
            <summary>
            数据库连接初始化事件
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.EnableGlobalIgnoreUpdatedColumns">
            <summary>
            是否启用全局忽略列的更新
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.AutoFilterEmptyValueColumnsWhenTrack">
            <summary>
            是否自动过滤空值列的更新
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.GlobalIgnoreUpdatedColumns">
            <summary>
            Track模式下,全局过滤指定更新列名（以;分割）
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.EnableLobConverter">
            <summary>
            是否启用Lob类型转换器（Clob和Blob）
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.LobConverterClassName">
            <summary>
             Lob类型转换器接口实现类
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.EnableCodeGen">
            <summary>
            是否启用代码生成
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.CodeGenType">
            <summary>
            代码生成类型
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.CodeGenClassNameMode">
            <summary>
            代码生成显示类名
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.CodeGenPropertyNameMode">
            <summary>
            属性名称类型
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.CodeGenProjectName">
            <summary>
            项目名称（英文缩写）
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.CodeGenBaseDirectory">
            <summary>
            代码生成根目录
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.CodeGenNameSpace">
            <summary>
            命名空间前缀
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.CodeGenTableFilter">
            <summary>
            代码生成过滤表名前缀
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.CodeGenTemplates">
            <summary>
            代码生成模板
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.BulkOperateClassName">
            <summary>
            批量处理器
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.EnableDefaultPropertySecurityValidate">
            <summary>
            是否启用默认属性安全校验器
            </summary>
        </member>
        <member name="P:Pure.Data.IDatabaseConfig.PropertySecurityValidateClassName">
            <summary>
            属性安全校验管理器
            </summary>
        </member>
        <member name="T:Pure.Data.PureDataConfiguration">
            <summary>
            数据库配置文件
            </summary>
        </member>
        <member name="P:Pure.Data.Settings.KeepConnectionAlive">
            <summary>
             Set to true to keep the first opened connection alive until this object is disposed
            </summary>
        </member>
        <member name="P:Pure.Data.Settings.AutoDisposeConnection">
            <summary>
            是否自动释放Connection对象，false则只保留一个Connection对象
            </summary>
            
        </member>
        <member name="P:Pure.Data.Settings.ValidateStopOnFirstFailure">
            <summary>
            是否当验证出现错误即可停止
            </summary>
        </member>
        <member name="P:Pure.Data.Settings.CacheOrmTime">
            <summary>实体缓存过期时间，默认60秒</summary>
            
        </member>
        <member name="P:Pure.Data.Settings.CacheOrmSingleTime">
            <summary>单对象缓存过期时间，默认60秒</summary>
            
        </member>
        <member name="P:Pure.Data.Settings.OrmCacheCheckPeriod">
            <summary>缓存维护定时器的检查周期，默认5秒</summary>
            
        </member>
        <member name="P:Pure.Data.Settings.CategoryLogType">
            <summary>
            是否按日志类型保存日志文件
            </summary>
            
        </member>
        <member name="P:Pure.Data.Settings.OrmLogsPath">
            <summary>
            日志输出路径
            </summary>
            
        </member>
        <member name="P:Pure.Data.Settings.MaxServerLogSize">
            <summary>最大日志行数</summary>
            
        </member>
        <member name="P:Pure.Data.Settings.DefaultPageSize">
            <summary>默认分页大小</summary>
            
        </member>
        <member name="P:Pure.Data.Settings.LoadMapperMode">
            <summary>
            加载Mapper 的模式: 1：fluent mapper ， 2：Attribute  ， 3：sql map
            </summary>
            
        </member>
        <member name="P:Pure.Data.Settings.IsWatchSqlMapFile">
            <summary>
            是否监听Sql map配置文件
            </summary>
            
        </member>
        <member name="P:Pure.Data.Settings.WatchSqlMapInterval">
            <summary>
            监听sql map文件间隔时间
            </summary>
            
        </member>
        <member name="P:Pure.Data.Settings.NameSpacePrefix">
            <summary>
            是否启用SQL格式化
            </summary>
            
        </member>
        <member name="P:Pure.Data.Settings.FormatSql">
            <summary>
            是否启用SQL格式化
            </summary>
            
        </member>
        <member name="P:Pure.Data.Settings.LogWithRawSql">
            <summary>
            是否用原始格式化SQL输出到日志
            </summary>
        </member>
        <member name="P:Pure.Data.Settings.AutoMigrateOnContainTable">
            <summary>
            指定某些表能自动迁移（以;分割）
            </summary>
            
        </member>
        <member name="P:Pure.Data.Settings.GlobalIgnoreUpdatedColumns">
            <summary>
            Track模式下,全局过滤指定更新列名（以;分割）
            </summary>
            
        </member>
        <member name="P:Pure.Data.Settings.EnableLobConverter">
            <summary>
            是否启用Lob类型转换器（Clob和Blob）
            </summary>
            
        </member>
        <member name="P:Pure.Data.Settings.LobConverterClassName">
            <summary>
             Lob类型转换器接口实现类
            </summary>
            
        </member>
        <member name="P:Pure.Data.Settings.BulkOperateClassName">
            <summary>
             批量处理器接口实现类
            </summary>
            
        </member>
        <member name="P:Pure.Data.Settings.EnableCodeGen">
            <summary>
            是否启用代码生成
            </summary>
            
        </member>
        <member name="P:Pure.Data.Settings.CodeGenType">
            <summary>
            代码生成类型
            </summary>
            
        </member>
        <member name="P:Pure.Data.Settings.CodeGenClassNameMode">
            <summary>
            类名显示模式
            </summary>
            
        </member>
        <member name="P:Pure.Data.Settings.CodeGenPropertyNameMode">
            <summary>
            属性名显示模式
            </summary>
            
        </member>
        <member name="P:Pure.Data.Settings.CodeGenProjectName">
            <summary>
             项目名称（英文缩写）
            </summary>
            
        </member>
        <member name="P:Pure.Data.Settings.CodeGenNameSpace">
            <summary>
             代码生成命名空间前缀
            </summary>
            
        </member>
        <member name="P:Pure.Data.Settings.CodeGenTableFilter">
            <summary>
            代码生成过滤表名前缀
            </summary>
            
        </member>
        <member name="P:Pure.Data.Settings.CodeGenBaseDirectory">
            <summary>
            代码生成根目录
            </summary>
            
        </member>
        <member name="T:Pure.Data.ResourceType">
            <summary>
            资源来源类型
            </summary>
        </member>
        <member name="T:Pure.Data.CodeGenType">
            <summary>
            代码生成类型
            </summary>
        </member>
        <member name="F:Pure.Data.CodeGenType.CodeFirst">
            <summary>
            代码优先(根据实体和Mapper生成)
            </summary>
        </member>
        <member name="F:Pure.Data.CodeGenType.DbFirst">
            <summary>
            数据库优先(根据数据库表生成)
            </summary>
        </member>
        <member name="T:Pure.Data.CodeGenClassNameMode">
            <summary>
            代码生成类名模式
            </summary>
        </member>
        <member name="F:Pure.Data.CodeGenClassNameMode.UpperAll">
            <summary>
            全大写Camel PROJECTWORKER
            </summary>
        </member>
        <member name="F:Pure.Data.CodeGenClassNameMode.LowerAll">
            <summary>
            全小写Camel PROJECTWORKER
            </summary>
        </member>
        <member name="F:Pure.Data.CodeGenClassNameMode.PascalCase">
            <summary>
            第一个词的首字母，以及后面每个词的首字母都大写 . ProjectWorker
            </summary>
        </member>
        <member name="F:Pure.Data.CodeGenClassNameMode.CamelCase">
            <summary>
            第一个词的首字母小写，后面每个词的首字母大写 . projectWorker
            </summary>
        </member>
        <member name="F:Pure.Data.CodeGenClassNameMode.TitleCase">
            <summary>
            
            </summary>
        </member>
        <member name="F:Pure.Data.CodeGenClassNameMode.HumanCase">
            <summary>
            Project_worker
            </summary>
        </member>
        <member name="F:Pure.Data.CodeGenClassNameMode.UpperOrigin">
            <summary>
            去除前缀后全大写 PROJECT_WORKER
            </summary>
        </member>
        <member name="F:Pure.Data.CodeGenClassNameMode.LowerOrigin">
            <summary>
            去除前缀后全小写 project_worker
            </summary>
        </member>
        <member name="F:Pure.Data.CodeGenClassNameMode.Origin">
            <summary>
            保留原有 Project_WORKER
            </summary>
        </member>
        <member name="T:Pure.Data.OutputType">
            <summary>
            输出类型
            </summary>
        </member>
        <member name="F:Pure.Data.OutputType.Table">
            <summary>
            输出表/视图
            </summary>
        </member>
        <member name="F:Pure.Data.OutputType.OutputContext">
            <summary>
            输出上下文
            </summary>
        </member>
        <member name="T:Pure.Data.CodeGenTemplate">
            <summary>
            代码生成模板
            </summary>
        </member>
        <member name="T:Pure.Data.LoadedDatabaseConfig">
            <summary>
            缓存的配置加载信息
            </summary>
        </member>
        <member name="T:Pure.Data.PureDataConfigurationLoader">
            <summary>
            本地数据库配置加载器
            </summary>
        </member>
        <member name="P:Pure.Data.PureDataConfigurationLoader.PureDataConfiguration">
            <summary>
            全局数据库配置
            </summary>
        </member>
        <member name="M:Pure.Data.AttributeHelper.GetCustomClassAttributes``1(System.Type,System.Boolean)">
            <summary>获取自定义类特性</summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.AttributeHelper.GetCustomPropertyAttributes``1(System.Type,System.Boolean)">
            <summary>获取自定义属性和特性</summary>
        </member>
        <member name="T:Pure.Data.ColumnAttribute">
            <summary>
            列字段
            </summary>
        </member>
        <member name="T:Pure.Data.IdAttribute">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Pure.Data.IdAttribute.CheckAutoId">
            <summary>
            是否为自动主键
            </summary>
        </member>
        <member name="M:Pure.Data.IdAttribute.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="checkAutoId">是否为自动主键</param>
        </member>
        <member name="T:Pure.Data.IgnoreAttribute">
            <summary>
            忽略字段
            </summary>
        </member>
        <member name="T:Pure.Data.KeyAttribute">
            <summary>
            主键
            </summary>
        </member>
        <member name="T:Pure.Data.NoCacheAttribute">
            <summary>是否不缓存对象实体属性。</summary>
        </member>
        <member name="T:Pure.Data.ReadonlyAttribute">
            <summary>
            只读字段
            </summary>
        </member>
        <member name="T:Pure.Data.SequenceAttribute">
            <summary>
            序列
            </summary>
        </member>
        <member name="P:Pure.Data.SequenceAttribute.Name">
            <summary>
            别名，对应数据里面的名字
            </summary>
        </member>
        <member name="T:Pure.Data.TableAttribute">
            <summary>
            数据库表
            </summary>
        </member>
        <member name="P:Pure.Data.TableAttribute.Name">
            <summary>
            别名，对应数据里面的名字
            </summary>
        </member>
        <member name="P:Pure.Data.VersionAttribute.IsVersion">
            <summary>
            是否版本
            </summary>
        </member>
        <member name="T:Pure.Data.BatchCommander">
            <summary>
            BatchCommander is used to execute batch queries.
            </summary>
        </member>
        <member name="M:Pure.Data.BatchCommander.ExecuteBatch">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:Pure.Data.BatchCommander.PrepareCommand(System.Data.IDbCommand)">
            <summary>
            调整DbCommand命令
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.BatchCommander.#ctor(Pure.Data.IDatabase,Pure.Data.BatchOptions,System.Data.IDbTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:Pure.Data.BatchCommander"/> class.
            </summary>
            <param name="db">The db.</param>
            <param name="batchSize">Size of the batch.</param>
            <param name="tran">The tran.</param>
        </member>
        <member name="M:Pure.Data.BatchCommander.#ctor(Pure.Data.Database,Pure.Data.BatchOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Pure.Data.BatchCommander"/> class.
            </summary>
            <param name="db">The db.</param>
            <param name="batchSize">Size of the batch.</param>
        </member>
        <member name="M:Pure.Data.BatchCommander.AddOrProcess(System.Data.IDbCommand)">
            <summary>
            增加命令（当达到BatchSize时候自动执行）
            </summary>
            <param name="cmd">The CMD.</param>
        </member>
        <member name="M:Pure.Data.BatchCommander.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:Pure.Data.IBulkOperate.InsertBatch(Pure.Data.IDatabase,System.Data.DataTable,System.Int32)">
            <summary>
            将 <see cref="T:System.Data.DataTable"/> 的数据批量插入到数据库中。
            </summary>
            <param name="dataTable">要批量插入的 <see cref="T:System.Data.DataTable"/>。</param>
            <param name="batchSize">每批次写入的数据量。</param>
        </member>
        <member name="M:Pure.Data.AbstractBulkOperate.ConvertToBulkDataTable``1(Pure.Data.IDatabase,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            List To DataTable
            待优化 -> IL
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.AssemblyHelper.GetAllAssembly(System.String,System.String)">
            <summary>
            加载某个Bin目录下面: Assembly[] asm = GetAllAssembly("*.Web.dll").ToArray();
            </summary>
            <param name="dllName"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.AssemblyHelper.GetBaseDirectory">
            <summary>
            得到当前应用程序的根目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.AssemblyHelper.FindTypeByInterface``1(System.String)">
            <summary>
            扫描程序集找到实现了某个接口的第一个实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="searchpattern">文件名过滤</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.AssemblyHelper.FindTypeByInheritType(System.Type,System.String)">
            <summary>
            扫描程序集找到继承了某基类的所有子类
            </summary>
            <param name="inheritType">基类</param>
            <param name="searchpattern">文件名过滤</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.AssemblyHelper.FindAllPropertyByAttribute``1(System.String)">
            <summary>
            扫描程序集找到带有某个Attribute的所有PropertyInfo
            </summary>
            <typeparam name="T"></typeparam>
            <param name="searchpattern">文件名过滤</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.AssemblyHelper.FindAllTypeByAttribute``1(System.String)">
            <summary>
            扫描程序集找到类型上带有某个Attribute的所有类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="searchpattern">文件名过滤</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.BlowFish.#ctor(System.String)">
            <summary>
            Constructor for hex key
            </summary>
            <param name="hexKey">Cipher key as a hex string</param>
        </member>
        <member name="M:Pure.Data.BlowFish.#ctor(System.Byte[])">
            <summary>
            Constructor for byte key
            </summary>
            <param name="cipherKey">Cipher key as a byte array</param>
        </member>
        <member name="M:Pure.Data.BlowFish.Encrypt_CBC(System.String)">
            <summary>
            Encrypts a string in CBC mode
            </summary>
            <param name="pt">Plaintext data to encrypt</param>
            <returns>Ciphertext with IV appended to front</returns>
        </member>
        <member name="M:Pure.Data.BlowFish.Decrypt_CBC(System.String)">
            <summary>
            Decrypts a string in CBC mode
            </summary>
            <param name="ct">Ciphertext with IV appended to front</param>
            <returns>Plaintext</returns>
        </member>
        <member name="M:Pure.Data.BlowFish.Decrypt_CBC(System.Byte[])">
            <summary>
            Decrypts a byte array in CBC mode.
            IV must be created and saved manually.
            </summary>
            <param name="ct">Ciphertext data to decrypt</param>
            <returns>Plaintext</returns>
        </member>
        <member name="M:Pure.Data.BlowFish.Encrypt_CBC(System.Byte[])">
            <summary>
            Encrypts a byte array in CBC mode.
            IV must be created and saved manually.
            </summary>
            <param name="pt">Plaintext data to encrypt</param>
            <returns>Ciphertext</returns>
        </member>
        <member name="M:Pure.Data.BlowFish.Encrypt_ECB(System.String)">
            <summary>
            Encrypt a string in ECB mode
            </summary>
            <param name="pt">Plaintext to encrypt as ascii string</param>
            <returns>hex value of encrypted data</returns>
        </member>
        <member name="M:Pure.Data.BlowFish.Decrypt_ECB(System.String)">
            <summary>
            Decrypts a string (ECB)
            </summary>
            <param name="ct">hHex string of the ciphertext</param>
            <returns>Plaintext ascii string</returns>
        </member>
        <member name="M:Pure.Data.BlowFish.Encrypt_ECB(System.Byte[])">
            <summary>
            Encrypts a byte array in ECB mode
            </summary>
            <param name="pt">Plaintext data</param>
            <returns>Ciphertext bytes</returns>
        </member>
        <member name="M:Pure.Data.BlowFish.Decrypt_ECB(System.Byte[])">
            <summary>
            Decrypts a byte array (ECB)
            </summary>
            <param name="ct">Ciphertext byte array</param>
            <returns>Plaintext</returns>
        </member>
        <member name="M:Pure.Data.BlowFish.Encrypt_CTR(System.String)">
            <summary>
            Encrypts a string (CTR)
            </summary>
            <param name="pt">The plaintext to encrypt</param>
            <returns>The ciphertext</returns>
        </member>
        <member name="M:Pure.Data.BlowFish.Decrypt_CTR(System.String)">
            <summary>
            Decrypt a string (CTR)
            </summary>
            <param name="ct">The ciphertext to decrypt</param>
            <returns>The plaintext</returns>
        </member>
        <member name="P:Pure.Data.BlowFish.IV">
            <summary>
            Initialization vector for CBC mode.
            </summary>
        </member>
        <member name="M:Pure.Data.BlowFish.SetRandomIV">
            <summary>
            Creates and sets a random initialization vector.
            </summary>
            <returns>The random IV</returns>
        </member>
        <member name="M:Pure.Data.BlowFish.SetupKey(System.Byte[])">
            <summary>
            Sets up the S-blocks and the key
            </summary>
            <param name="cipherKey">Block cipher key (1-448 bits)</param>
        </member>
        <member name="M:Pure.Data.BlowFish.Crypt_ECB(System.Byte[],System.Boolean)">
            <summary>
            Encrypts or decrypts data in ECB mode
            </summary>
            <param name="text">plain/ciphertext</param>
            <param name="decrypt">true to decrypt, false to encrypt</param>
            <returns>(En/De)crypted data</returns>
        </member>
        <member name="M:Pure.Data.BlowFish.Crypt_CBC(System.Byte[],System.Boolean)">
            <summary>
            Encrypts or decrypts data in CBC mode
            </summary>
            <param name="text">plain/ciphertext</param>
            <param name="decrypt">true to decrypt, false to encrypt</param>
            <returns>(En/De)crypted data</returns>
        </member>
        <member name="M:Pure.Data.BlowFish.XorBlock(System.Byte[]@,System.Byte[])">
            <summary>
            XoR encrypts two 8 bit blocks
            </summary>
            <param name="block">8 bit block 1</param>
            <param name="iv">8 bit block 2</param>
        </member>
        <member name="M:Pure.Data.BlowFish.BlockEncrypt(System.Byte[]@)">
            <summary>
            Encrypts a 64 bit block
            </summary>
            <param name="block">The 64 bit block to encrypt</param>
        </member>
        <member name="M:Pure.Data.BlowFish.BlockDecrypt(System.Byte[]@)">
            <summary>
            Decrypts a 64 bit block
            </summary>
            <param name="block">The 64 bit block to decrypt</param>
        </member>
        <member name="M:Pure.Data.BlowFish.SetBlock(System.Byte[])">
            <summary>
            Splits the block into the two uint values
            </summary>
            <param name="block">the 64 bit block to setup</param>
        </member>
        <member name="M:Pure.Data.BlowFish.GetBlock(System.Byte[]@)">
            <summary>
            Converts the two uint values into a 64 bit block
            </summary>
            <param name="block">64 bit buffer to receive the block</param>
        </member>
        <member name="M:Pure.Data.BlowFish.encipher">
            <summary>
            Runs the blowfish algorithm (standard 16 rounds)
            </summary>
        </member>
        <member name="M:Pure.Data.BlowFish.decipher">
            <summary>
            Runs the blowfish algorithm in reverse (standard 16 rounds)
            </summary>
        </member>
        <member name="M:Pure.Data.BlowFish.round(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            one round of the blowfish algorithm
            </summary>
            <param name="a">See spec</param>
            <param name="b">See spec</param>
            <param name="n">See spec</param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.DbProviderNameManage">
            <summary>
            数据库提供程序名称
            </summary>
        </member>
        <member name="M:Pure.Data.DbProviderNameManage.GetDatabaseType(System.String)">
            <summary>
            根据Provider字符串获取数据类型
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="F:Pure.Data.DbProviderNameManage.SQLServer">
            <summary>
            SQLServer数据库提供程序名称：System.Data.SqlClient
            </summary>
        </member>
        <member name="F:Pure.Data.DbProviderNameManage.SqlServerCe">
            <summary>
            SqlServerCe数据库提供程序名称：System.Data.SqlServerCe
            </summary>
        </member>
        <member name="F:Pure.Data.DbProviderNameManage.SQLAzure">
            <summary>
            微软Azure云数据库
            </summary>
        </member>
        <member name="F:Pure.Data.DbProviderNameManage.SqlServerCe40">
            <summary>
            SqlServerCe.4.0数据库提供程序名称：System.Data.SqlServerCe4.0
            </summary>
        </member>
        <member name="F:Pure.Data.DbProviderNameManage.SQLite">
            <summary>
            SQLite数据库提供程序名称：System.Data.SQLite
            </summary>
        </member>
        <member name="F:Pure.Data.DbProviderNameManage.MySql">
            <summary>
            MySql数据库提供程序名称：MySql.Data.MySqlClient
            </summary>
        </member>
        <member name="F:Pure.Data.DbProviderNameManage.Oracle">
            <summary>
            Oracle数据库提供程序名称：System.Data.OracleClient
            </summary>
        </member>
        <member name="F:Pure.Data.DbProviderNameManage.OleDb">
            <summary>
            基于OleDb驱动的数据库提供程序名称：System.Data.OleDb
            </summary>
        </member>
        <member name="F:Pure.Data.DbProviderNameManage.Odbc">
            <summary>
            基于ODBC驱动的数据库。描述值为：Odbc。
            </summary>
        </member>
        <member name="F:Pure.Data.DbProviderNameManage.PostgreSQL">
            <summary>
            基于PostgreSQL驱动的数据库(加州大学伯克利分校的PostgreSQL数据库)提供程序名称：Npgsql
            </summary>
        </member>
        <member name="F:Pure.Data.DbProviderNameManage.DB2">
            <summary>
            IBM公司的DB2数据库。描述值为：Db2。
            </summary>
        </member>
        <member name="F:Pure.Data.DbProviderNameManage.FirebirdSql">
            <summary>
            Firebird数据库。描述值为：Firebird
            </summary>
        </member>
        <member name="F:Pure.Data.DbProviderNameManage.Informix">
            <summary>
            IBM公司的Informix数据库。描述值为：Informix。
            </summary>
        </member>
        <member name="F:Pure.Data.DbProviderNameManage.SybaseASA">
            <summary>
            Sybase公司的SybaseASA数据库。描述值为：SybaseASA。
            </summary>
        </member>
        <member name="F:Pure.Data.DbProviderNameManage.SybaseASE">
            <summary>
            Sybase公司的SybaseASE数据库。描述值为：SybaseASE。
            </summary>
        </member>
        <member name="F:Pure.Data.DbProviderNameManage.SybaseUltraLite">
            <summary>
            Sybase公司的SybaseUltraLite数据库。描述值为：SybaseUltraLite。
            </summary>
        </member>
        <member name="F:Pure.Data.DbProviderNameManage.DM">
            <summary>
            国产达梦数据库。描述值为：Dm。
            </summary>
        </member>
        <member name="T:Pure.Data.Inflector">
            <summary>
            Summary for the Inflector class
            </summary>
        </member>
        <member name="M:Pure.Data.Inflector.#cctor">
            <summary>
            Initializes the <see cref="T:Pure.Data.Inflector"/> class.
            </summary>
        </member>
        <member name="M:Pure.Data.Inflector.AddIrregularRule(System.String,System.String)">
            <summary>
            Adds the irregular rule.
            </summary>
            <param name="singular">The singular.</param>
            <param name="plural">The plural.</param>
        </member>
        <member name="M:Pure.Data.Inflector.AddUnknownCountRule(System.String)">
            <summary>
            Adds the unknown count rule.
            </summary>
            <param name="word">The word.</param>
        </member>
        <member name="M:Pure.Data.Inflector.AddPluralRule(System.String,System.String)">
            <summary>
            Adds the plural rule.
            </summary>
            <param name="rule">The rule.</param>
            <param name="replacement">The replacement.</param>
        </member>
        <member name="M:Pure.Data.Inflector.AddSingularRule(System.String,System.String)">
            <summary>
            Adds the singular rule.
            </summary>
            <param name="rule">The rule.</param>
            <param name="replacement">The replacement.</param>
        </member>
        <member name="M:Pure.Data.Inflector.MakePlural(System.String)">
            <summary>
            Makes the plural.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Inflector.MakeSingular(System.String)">
            <summary>
            Makes the singular.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Inflector.ToPascalString(System.String)">
            <summary>
            转换为Pascal格式字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Inflector.ToCamelString(System.String)">
            <summary>
            转换为Camel格式字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Inflector.ApplyRules(System.Collections.Generic.IList{Pure.Data.Inflector.InflectorRule},System.String)">
            <summary>
            Applies the rules.
            </summary>
            <param name="rules">The rules.</param>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Inflector.ToTitleCase(System.String)">
            <summary>
            Converts the string to title case.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Inflector.ToHumanCase(System.String)">
            <summary>
            Converts the string to human case.
            </summary>
            <param name="lowercaseAndUnderscoredWord">The lowercase and underscored word.</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Inflector.AddUnderscores(System.String)">
            <summary>
            Adds the underscores.
            </summary>
            <param name="pascalCasedWord">The pascal cased word.</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Inflector.MakeInitialCaps(System.String)">
            <summary>
            Makes the initial caps.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Inflector.MakeInitialLowerCase(System.String)">
            <summary>
            Makes the initial lower case.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Inflector.IsStringNumeric(System.String)">
            <summary>
            Determine whether the passed string is numeric, by attempting to parse it to a double
            </summary>
            <param name="str">The string to evaluated for numeric conversion</param>
            <returns>
            	<c>true</c> if the string can be converted to a number; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pure.Data.Inflector.AddOrdinalSuffix(System.String)">
            <summary>
            Adds the ordinal suffix.
            </summary>
            <param name="number">The number.</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Inflector.ConvertUnderscoresToDashes(System.String)">
            <summary>
            Converts the underscores to dashes.
            </summary>
            <param name="underscoredWord">The underscored word.</param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.Inflector.InflectorRule">
            <summary>
            Summary for the InflectorRule class
            </summary>
        </member>
        <member name="F:Pure.Data.Inflector.InflectorRule.regex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Pure.Data.Inflector.InflectorRule.replacement">
            <summary>
            
            </summary>
        </member>
        <member name="M:Pure.Data.Inflector.InflectorRule.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Pure.Data.Inflector.InflectorRule"/> class.
            </summary>
            <param name="regexPattern">The regex pattern.</param>
            <param name="replacementText">The replacement text.</param>
        </member>
        <member name="M:Pure.Data.Inflector.InflectorRule.Apply(System.String)">
            <summary>
            Applies the specified word.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.PureDataException">
            <summary>
            Pure Data 执行出错
            </summary>
        </member>
        <member name="T:Pure.Data.ReflectHelper">
            <summary>反射工具类</summary>
        </member>
        <member name="M:Pure.Data.ReflectHelper.GetFieldEx(System.Type,System.String,System.Boolean)">
            <summary>获取字段。搜索私有、静态、基类，优先返回大小写精确匹配成员</summary>
            <param name="type">类型</param>
            <param name="name">名称</param>
            <param name="ignoreCase">忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.ReflectHelper.GetField(System.Type,System.String,System.Boolean)">
            <summary>获取字段</summary>
            <param name="type">类型</param>
            <param name="name">名称</param>
            <param name="ignoreCase">忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.ReflectionHelper.CreateInstance``1(System.String,System.String)">
            <summary>
            创建对象实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fullName">命名空间.类型名</param>
            <param name="assemblyName">程序集</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.ReflectionHelper.CreateInstance``1(System.String,System.String,System.String)">
            <summary>
            创建对象实例
            </summary>
            <typeparam name="T">要创建对象的类型</typeparam>
            <param name="assemblyName">类型所在程序集名称</param>
            <param name="nameSpace">类型所在命名空间</param>
            <param name="className">类型名</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.ReflectionHelper.GetAllPropertyNames``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            获取所有属性名列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ignoreProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.ReflectionHelper.GetNonNullableType(System.Type)">
            <summary>
            获取当前非空类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.ReflectionHelper.GetNullableType(System.Type)">
            <summary>
            获取当前可空类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.ReflectionHelper.IsAssignableToGenericType(System.Type,System.Type)">
            <summary>
            Checks whether <paramref name="givenType"/> implements/inherits <paramref name="genericType"/>.
            </summary>
            <param name="givenType">Type to check</param>
            <param name="genericType">Generic type</param>
        </member>
        <member name="M:Pure.Data.ReflectionHelper.GetAttributesOfMemberAndDeclaringType``1(System.Reflection.MemberInfo)">
            <summary>
            Gets a list of attributes defined for a class member and it's declaring type including inherited attributes.
            </summary>
            <typeparam name="TAttribute">Type of the attribute</typeparam>
            <param name="memberInfo">MemberInfo</param>
        </member>
        <member name="M:Pure.Data.ReflectionHelper.GetSingleAttributeOfMemberOrDeclaringTypeOrNull``1(System.Reflection.MemberInfo)">
            <summary>
            Tries to gets an of attribute defined for a class member and it's declaring type including inherited attributes.
            Returns null if it's not declared at all.
            </summary>
            <typeparam name="TAttribute">Type of the attribute</typeparam>
            <param name="memberInfo">MemberInfo</param>
        </member>
        <member name="T:Pure.Data.FastInvokeHandler">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.FastCreateInstanceHandler">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.FastPropertyGetHandler">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.FastPropertySetHandler">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="T:Pure.Data.DynamicCalls">
            <summary>
            
            </summary>
        </member>
        <member name="F:Pure.Data.DynamicCalls.dictInvoker">
            <summary>
            用于存放GetMethodInvoker的Dictionary
            </summary>
        </member>
        <member name="F:Pure.Data.DynamicCalls.dictCreator">
            <summary>
            用于存放GetInstanceCreator的Dictionary
            </summary>
        </member>
        <member name="F:Pure.Data.DynamicCalls.dictGetter">
            <summary>
            用于存放GetPropertyGetter的Dictionary
            </summary>
        </member>
        <member name="F:Pure.Data.DynamicCalls.dictSetter">
            <summary>
            用于存放SetPropertySetter的Dictionary
            </summary>
        </member>
        <member name="M:Pure.Data.DynamicCalls.EmitCastToReference(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            
            </summary>
            <param name="ilGenerator"></param>
            <param name="type"></param>
        </member>
        <member name="M:Pure.Data.DynamicCalls.EmitBoxIfNeeded(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            
            </summary>
            <param name="ilGenerator"></param>
            <param name="type"></param>
        </member>
        <member name="M:Pure.Data.DynamicCalls.EmitFastInt(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            
            </summary>
            <param name="ilGenerator"></param>
            <param name="value"></param>
        </member>
        <member name="T:Pure.Data.Singleton`1">
            <summary>
            A base class for the singleton design pattern.
            </summary>
            <typeparam name="T">Class type of the singleton</typeparam>
        </member>
        <member name="F:Pure.Data.Singleton`1.sInstance">
            <summary>
            Static instance. Needs to use lambda expression
            to construct an instance (since constructor is private).
            </summary>
        </member>
        <member name="P:Pure.Data.Singleton`1.Instance">
            <summary>
            Gets the instance of this singleton.
            </summary>
        </member>
        <member name="M:Pure.Data.Singleton`1.CreateInstanceOfT">
            <summary>
            Creates an instance of T via reflection since T's constructor is expected to be private.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.BindPropertiesExts.BindPropertiesFrom(System.Object,System.Object)">
            <summary>
            Copies the readable and writable public property values from the source object to the target
            </summary>
            <remarks>The source and target objects must be of the same type.</remarks>
            <param name="target">The target object</param>
            <param name="source">The source object</param>
        </member>
        <member name="M:Pure.Data.BindPropertiesExts.BindPropertiesFrom(System.Object,System.Object,System.String)">
            <summary>
            Copies the readable and writable public property values from the source object to the target
            </summary>
            <remarks>The source and target objects must be of the same type.</remarks>
            <param name="target">The target object</param>
            <param name="source">The source object</param>
            <param name="ignoreProperty">A single property name to ignore</param>
        </member>
        <member name="M:Pure.Data.BindPropertiesExts.BindPropertiesFrom(System.Object,System.Object,System.String[])">
            <summary>
            Copies the readable and writable public property values from the source object to the target
            </summary>
            <remarks>The source and target objects must be of the same type.</remarks>
            <param name="target">The target object</param>
            <param name="source">The source object</param>
            <param name="ignoreProperties">An array of property names to ignore</param>
        </member>
        <member name="M:Pure.Data.Snapshotter.SetGlobalIgnoreUpdatedColumns(System.String[])">
            <summary>
            设定全局过滤更新列名
            </summary>
            <param name="cols"></param>
        </member>
        <member name="M:Pure.Data.Snapshot`1.UpdateWithIgnoreParams(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            更新对象变更的内容
            </summary>
            <param name="bindedObj"></param>
            <param name="_PrimaryKeyValues"></param>
            <param name="ignoreProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Snapshot`1.Update(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.String[])">
            <summary>
            更新对象变更的内容
            </summary>
            <param name="_PrimaryKeyValues"></param>
            <param name="bindedObj"></param>
            <param name="ignoreProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Snapshot`1.UpdateWithIgnoreParamsAsync(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            更新对象变更的内容
            </summary>
            <param name="bindedObj"></param>
            <param name="_PrimaryKeyValues"></param>
            <param name="ignoreProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Snapshot`1.UpdateAsync(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.String[])">
            <summary>
            更新对象变更的内容
            </summary>
            <param name="_PrimaryKeyValues"></param>
            <param name="bindedObj"></param>
            <param name="ignoreProperties"></param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.StringBuilderCache">
            <summary>
            Reusable StringBuilder ThreadStatic Cache
            </summary>
        </member>
        <member name="T:Pure.Data.StringBuilderCacheAlt">
            <summary>
            Alternative Reusable StringBuilder ThreadStatic Cache
            </summary>
        </member>
        <member name="T:Pure.Data.StringHelper">
            <summary>字符串助手类</summary>
        </member>
        <member name="M:Pure.Data.StringHelper.EqualIgnoreCase(System.String,System.String[])">
            <summary>忽略大小写的字符串相等比较，判断是否以任意一个待比较字符串相等</summary>
            <param name="value">字符串</param>
            <param name="strs">待比较字符串数组</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.StringHelper.StartsWithIgnoreCase(System.String,System.String[])">
            <summary>忽略大小写的字符串开始比较，判断是否以任意一个待比较字符串开始</summary>
            <param name="value">字符串</param>
            <param name="strs">待比较字符串数组</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.StringHelper.EndsWithIgnoreCase(System.String,System.String[])">
            <summary>忽略大小写的字符串结束比较，判断是否以任意一个待比较字符串结束</summary>
            <param name="value">字符串</param>
            <param name="strs">待比较字符串数组</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.StringHelper.IsNullOrEmpty(System.String)">
            <summary>指示指定的字符串是 null 还是 String.Empty 字符串</summary>
            <param name="value">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.StringHelper.IsNullOrWhiteSpace(System.String)">
            <summary>是否空或者空白字符串</summary>
            <param name="value">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.StringHelper.Split(System.String,System.String[])">
            <summary>拆分字符串，过滤空格，无效时返回空数组</summary>
            <param name="value">字符串</param>
            <param name="separators">分组分隔符，默认逗号分号</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.StringHelper.SplitAsInt(System.String,System.String[])">
            <summary>拆分字符串成为整型数组，默认逗号分号分隔，无效时返回空数组</summary>
            <remarks>过滤空格、过滤无效、不过滤重复</remarks>
            <param name="value">字符串</param>
            <param name="separators">分组分隔符，默认逗号分号</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.StringHelper.SplitAsDictionary(System.String,System.String,System.String[])">
            <summary>拆分字符串成为名值字典。逗号分号分组，等号分隔</summary>
            <param name="value">字符串</param>
            <param name="nameValueSeparator">名值分隔符，默认等于号</param>
            <param name="separators">分组分隔符，默认逗号分号</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.StringHelper.Join(System.Collections.IEnumerable,System.String)">
            <summary>把一个列表组合成为一个字符串，默认逗号分隔</summary>
            <param name="value"></param>
            <param name="separator">组合分隔符，默认逗号</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.StringHelper.Join``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String})">
            <summary>把一个列表组合成为一个字符串，默认逗号分隔</summary>
            <param name="value"></param>
            <param name="separator">组合分隔符，默认逗号</param>
            <param name="func">把对象转为字符串的委托</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.StringHelper.Separate(System.Text.StringBuilder,System.String)">
            <summary>追加分隔符字符串，忽略开头，常用于拼接</summary>
            <param name="sb">字符串构造者</param>
            <param name="separator">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.StringHelper.GetBytes(System.String,System.Text.Encoding)">
            <summary>字符串转数组</summary>
            <param name="value">字符串</param>
            <param name="encoding">编码，默认utf-8无BOM</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.StringHelper.EnsureStart(System.String,System.String)">
            <summary>确保字符串以指定的另一字符串开始，不区分大小写</summary>
            <param name="str">字符串</param>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.StringHelper.EnsureEnd(System.String,System.String)">
            <summary>确保字符串以指定的另一字符串结束，不区分大小写</summary>
            <param name="str">字符串</param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.StringHelper.TrimStart(System.String,System.String[])">
            <summary>从当前字符串开头移除另一字符串，不区分大小写，循环多次匹配前缀</summary>
            <param name="str">当前字符串</param>
            <param name="starts">另一字符串</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.StringHelper.TrimEnd(System.String,System.String[])">
            <summary>从当前字符串结尾移除另一字符串，不区分大小写，循环多次匹配后缀</summary>
            <param name="str">当前字符串</param>
            <param name="ends">另一字符串</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.StringHelper.Substring(System.String,System.String,System.String,System.Int32,System.Int32[])">
            <summary>从字符串中检索子字符串，在指定头部字符串之后，指定尾部字符串之前</summary>
            <remarks>常用于截取xml某一个元素等操作</remarks>
            <param name="str">目标字符串</param>
            <param name="after">头部字符串，在它之后</param>
            <param name="before">尾部字符串，在它之前</param>
            <param name="startIndex">搜索的开始位置</param>
            <param name="positions">位置数组，两个元素分别记录头尾位置</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.StringHelper.Cut(System.String,System.Int32,System.String)">
            <summary>根据最大长度截取字符串，并允许以指定空白填充末尾</summary>
            <param name="str">字符串</param>
            <param name="maxLength">截取后字符串的最大允许长度，包含后面填充</param>
            <param name="pad">需要填充在后面的字符串，比如几个圆点</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.StringHelper.CutBinary(System.String,System.Int32,System.String,System.Boolean)">
            <summary>根据最大长度截取字符串（二进制计算长度），并允许以指定空白填充末尾</summary>
            <remarks>默认采用Default编码进行处理，其它编码请参考本函数代码另外实现</remarks>
            <param name="str">字符串</param>
            <param name="maxLength">截取后字符串的最大允许长度，包含后面填充</param>
            <param name="pad">需要填充在后面的字符串，比如几个圆点</param>
            <param name="strict">严格模式时，遇到截断位置位于一个字符中间时，忽略该字符，否则包括该字符。默认true</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.StringHelper.CutStart(System.String,System.String[])">
            <summary>从当前字符串开头移除另一字符串以及之前的部分</summary>
            <param name="str">当前字符串</param>
            <param name="starts">另一字符串</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.StringHelper.CutEnd(System.String,System.String[])">
            <summary>从当前字符串结尾移除另一字符串以及之后的部分</summary>
            <param name="str">当前字符串</param>
            <param name="ends">另一字符串</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.StringHelper.LevenshteinSearch(System.String,System.String[])">
            <summary>编辑距离搜索，从词组中找到最接近关键字的若干匹配项</summary>
            <remarks>
            算法代码由@Aimeast 独立完成。http://www.cnblogs.com/Aimeast/archive/2011/09/05/2167844.html
            </remarks>
            <param name="key">关键字</param>
            <param name="words">词组</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.StringHelper.LevenshteinDistance(System.String,System.String)">
            <summary>编辑距离</summary>
            <remarks>
            又称Levenshtein距离（也叫做Edit Distance），是指两个字串之间，由一个转成另一个所需的最少编辑操作次数。
            许可的编辑操作包括将一个字符替换成另一个字符，插入一个字符，删除一个字符。
            算法代码由@Aimeast 独立完成。http://www.cnblogs.com/Aimeast/archive/2011/09/05/2167844.html
            </remarks>
            <param name="str1"></param>
            <param name="str2"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.StringHelper.LCSSearch(System.String,System.String[])">
            <summary>最长公共子序列搜索，从词组中找到最接近关键字的若干匹配项</summary>
            <remarks>
            算法代码由@Aimeast 独立完成。http://www.cnblogs.com/Aimeast/archive/2011/09/05/2167844.html
            </remarks>
            <param name="key"></param>
            <param name="words"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.StringHelper.LCSDistance(System.String,System.String[])">
            <summary>
            最长公共子序列问题是寻找两个或多个已知数列最长的子序列。
            一个数列 S，如果分别是两个或多个已知数列的子序列，且是所有符合此条件序列中最长的，则 S 称为已知序列的最长公共子序列。
            The longest common subsequence (LCS) problem is to find the longest subsequence common to all sequences in a set of sequences (often just two). Note that subsequence is different from a substring, see substring vs. subsequence. It is a classic computer science problem, the basis of diff (a file comparison program that outputs the differences between two files), and has applications in bioinformatics.
            </summary>
            <remarks>
            算法代码由@Aimeast 独立完成。http://www.cnblogs.com/Aimeast/archive/2011/09/05/2167844.html
            </remarks>
            <param name="word"></param>
            <param name="keys">多个关键字。长度必须大于0，必须按照字符串长度升序排列。</param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.Database">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="P:Pure.Data.Database.Connection">
            <summary>
            数据库连接对象
            </summary>
        </member>
        <member name="M:Pure.Data.Database.SetConnectionAlive(System.Boolean)">
            <summary>
            设置连接持续，如果true需要手动释放
            </summary>
            <param name="enable"></param>
        </member>
        <member name="P:Pure.Data.Database.Transaction">
            <summary>
            数据库事务对象
            </summary>
        </member>
        <member name="P:Pure.Data.Database.LogHelper">
            <summary>
            日志输出助手
            </summary>
        </member>
        <member name="P:Pure.Data.Database.Config">
            <summary>数据库配置</summary>
        </member>
        <member name="M:Pure.Data.Database.InitDatabaseConfig(System.Action{Pure.Data.IDatabaseConfig})">
            <summary>
            初始化数据库配置
            </summary>
            <param name="InitConfig"></param>
        </member>
        <member name="M:Pure.Data.Database.CreateAndInitConnection(System.Data.IDbConnection)">
            <summary>
            创建新的连接对象
            </summary>
        </member>
        <member name="M:Pure.Data.Database.InitDbConnectionInfo(Pure.Data.DbConnectionMetaInfo,System.Data.IDbConnection)">
            <summary>
            初始化数据库连接信息
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Pure.Data.Database.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Start a new transaction, can be nested, every call must be
            matched by a call to AbortTransaction or CompleteTransaction
            Use `using (var scope=db.Transaction) { scope.Complete(); }` to ensure correct semantics
            </summary>
            <param name="isolationLevel"></param>
        </member>
        <member name="M:Pure.Data.Database.Close">
            <summary>
            关闭数据库连接，当开启KeepConnectionAlive为true则不关闭
            </summary>
        </member>
        <member name="M:Pure.Data.Database.NewBatchCommand(Pure.Data.BatchOptions,System.Data.IDbTransaction)">
            <summary>
            创建批处理命令
            </summary>
            <param name="batchSize"></param>
            <param name="tran"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Database.UpdateWithOnlyParams``1(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            更新对象指定列的内容
            </summary>
            <param name="bindedObj"></param>
            <param name="_PrimaryKeyValues"></param>
            <param name="onlyProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Database.UpdateOnly``1(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.String[])">
            <summary>
            更新对象指定列的内容
            </summary>
            <param name="_PrimaryKeyValues"></param>
            <param name="bindedObj"></param>
            <param name="onlyProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Database.UpdateOnlyImpl``1(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.String[])">
            <summary>
            更新对象指定列的内容
            </summary>
            <param name="_PrimaryKeyValues"></param>
            <param name="bindedObj"></param>
            <param name="onlyProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Database.UpdateWithOnlyParamsAsync``1(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            更新对象指定列的内容
            </summary>
            <param name="bindedObj"></param>
            <param name="_PrimaryKeyValues"></param>
            <param name="onlyProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Database.UpdateOnlyAsync``1(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.String[])">
            <summary>
            更新对象变更的内容
            </summary>
            <param name="_PrimaryKeyValues"></param>
            <param name="bindedObj"></param>
            <param name="onlyProperties"></param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.DatabaseAsync">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="M:Pure.Data.DatabaseAsync.ExecuteAsync(Pure.Data.IDatabase,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            
            </summary>
            <param name="db"></param>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DatabaseAsync.CountAsync``1(Pure.Data.IDatabase,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes a query using the specified predicate, returning an integer that represents the number of rows that match the query.
            </summary>
        </member>
        <member name="M:Pure.Data.DatabaseAsync.GetAsync``1(Pure.Data.IDatabase,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes a query for the specified id, returning the data typed as per T.
            </summary>
        </member>
        <member name="M:Pure.Data.DatabaseAsync.GetListAsync``1(Pure.Data.IDatabase,System.Object,System.Collections.Generic.IList{Pure.Data.ISort},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes a select query using the specified predicate, returning an IEnumerable data typed as per T.
            </summary>
        </member>
        <member name="M:Pure.Data.DatabaseAsync.GetPageDataAsync``1(Pure.Data.IDatabase,System.Object,System.Collections.Generic.IList{Pure.Data.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes a select query using the specified predicate, returning an IEnumerable data typed as per T.
            Data returned is dependent upon the specified page and resultsPerPage.
            </summary>
        </member>
        <member name="M:Pure.Data.DatabaseAsync.GetSetAsync``1(Pure.Data.IDatabase,System.Object,System.Collections.Generic.IList{Pure.Data.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes a select query using the specified predicate, returning an IEnumerable data typed as per T.
            Data returned is dependent upon the specified firstResult and maxResults.
            </summary>
        </member>
        <member name="M:Pure.Data.DatabaseAsync.GetPageAsync``1(Pure.Data.IDatabase,System.Object,System.Collections.Generic.IList{Pure.Data.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes a select query using the specified predicate, returning an IEnumerable data typed as per T.
            Data returned is dependent upon the specified page and resultsPerPage.
            </summary>
        </member>
        <member name="M:Pure.Data.DatabaseAsync.InsertAsync``1(Pure.Data.IDatabase,System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            The asynchronous counterpart to <see cref="M:Pure.Data.IDapperImplementor.Insert``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.DatabaseAsync.InsertAsync``1(Pure.Data.IDatabase,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            The asynchronous counterpart to <see cref="M:Pure.Data.IDapperImplementor.Insert``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})"/>.
            </summary>
            
        </member>
        <member name="M:Pure.Data.DatabaseAsync.UpdateAsync``1(Pure.Data.IDatabase,``0,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            The asynchronous counterpart to <see cref="!:IDapperImplementor.Update&lt;T&gt;(IDbConnection, T, IDbTransaction, int?)"/>.
            </summary>
            
        </member>
        <member name="M:Pure.Data.DatabaseAsync.DeleteAsync``1(Pure.Data.IDatabase,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            The asynchronous counterpart to <see cref="M:Pure.Data.IDapperImplementor.Delete``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.DatabaseAsync.DeleteAsync``1(Pure.Data.IDatabase,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            The asynchronous counterpart to <see cref="M:Pure.Data.IDapperImplementor.Delete``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})"/>.
            </summary>
            
        </member>
        <member name="T:Pure.Data.InitStatusProcess">
            <summary>
            初始化状态进程
            </summary>
        </member>
        <member name="M:Pure.Data.DatabaseConfigPool.GetInitStatus(Pure.Data.IDatabase)">
            <summary>
            获取初始化进度状态 
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DbConnectionFactory.Resolve(System.String,System.String)">
            <summary>
            Look at the type and provider name being used and instantiate a suitable DatabaseType instance.
            </summary>
            <param name="typeName"></param>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DbConnectionFactory.GetProviderFactory(System.String,System.String)">
            <summary>获取提供者工厂</summary>
            <param name="assemblyFile"></param>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.IDatabase">
            <summary>
            数据库上下文接口
            </summary>
        </member>
        <member name="M:Pure.Data.IDatabase.QuerySqlMap(System.String,System.String,System.Object)">
            <summary>
            执行Sql Map配置文件中的Sql
            </summary>
            <param name="scope">区域</param>
            <param name="sqlID">sql编号</param>
            <param name="param">参数</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.IDatabase.Track``1(``0)">
            <summary>
            追踪实体对象，可用于更新对象的指定值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.IDatabase.UpdateWithOnlyParams``1(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            更新对象指定列的内容
            </summary>
            <param name="bindedObj"></param>
            <param name="_PrimaryKeyValues"></param>
            <param name="onlyProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.IDatabase.UpdateOnly``1(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.String[])">
            <summary>
            更新对象指定列的内容
            </summary>
            <param name="_PrimaryKeyValues"></param>
            <param name="bindedObj"></param>
            <param name="onlyProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.IDatabase.UpdateWithOnlyParamsAsync``1(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            更新对象指定列的内容
            </summary>
            <param name="bindedObj"></param>
            <param name="_PrimaryKeyValues"></param>
            <param name="onlyProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.IDatabase.UpdateOnlyAsync``1(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.String[])">
            <summary>
            更新对象指定列的内容
            </summary>
            <param name="_PrimaryKeyValues"></param>
            <param name="bindedObj"></param>
            <param name="onlyProperties"></param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.PageDataResult`1">
            <summary>
            分页数据结果
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Pure.Data.IDapperAsyncImplementor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Pure.Data.IDapperAsyncImplementor.GetAsync``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            The asynchronous counterpart to <see cref="M:Pure.Data.IDapperImplementor.Get``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.IDapperAsyncImplementor.GetListAsync``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{Pure.Data.ISort},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            The asynchronous counterpart to <see cref="M:Pure.Data.IDapperImplementor.GetList``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{Pure.Data.ISort},System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.IDapperAsyncImplementor.GetPageDataAsync``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{Pure.Data.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            The asynchronous counterpart to <see cref="M:Pure.Data.IDapperImplementor.GetPage``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{Pure.Data.ISort},System.Int32,System.Int32,System.Int32@,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.IDapperAsyncImplementor.GetSetAsync``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{Pure.Data.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            The asynchronous counterpart to <see cref="M:Pure.Data.IDapperImplementor.GetSet``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{Pure.Data.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.IDapperAsyncImplementor.CountAsync``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            The asynchronous counterpart to <see cref="M:Pure.Data.IDapperImplementor.Count``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.IDapperAsyncImplementor.InsertAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            The asynchronous counterpart to <see cref="M:Pure.Data.IDapperImplementor.Insert``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.IDapperAsyncImplementor.InsertAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            The asynchronous counterpart to <see cref="M:Pure.Data.IDapperImplementor.Insert``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.IDapperAsyncImplementor.UpdateAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            The asynchronous counterpart to <see cref="!:IDapperImplementor.Update&lt;T&gt;(IDbConnection, T, IDbTransaction, int?)"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.IDapperAsyncImplementor.DeleteAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            The asynchronous counterpart to <see cref="M:Pure.Data.IDapperImplementor.Delete``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.IDapperAsyncImplementor.DeleteAsync``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            The asynchronous counterpart to <see cref="M:Pure.Data.IDapperImplementor.Delete``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.DapperAsyncImplementor.#ctor(Pure.Data.Sql.ISqlGenerator,Pure.Data.IDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:Pure.Data.DapperAsyncImplementor"/> class.
            </summary>
            <param name="sqlGenerator">The SQL generator.</param>
        </member>
        <member name="M:Pure.Data.DapperAsyncImplementor.InsertAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            The asynchronous counterpart to <see cref="M:Pure.Data.IDapperImplementor.Insert``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.DapperAsyncImplementor.InsertAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            The asynchronous counterpart to <see cref="M:Pure.Data.IDapperImplementor.Insert``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.DapperAsyncImplementor.UpdateAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            The asynchronous counterpart to <see cref="!:IDapperImplementor.Update&lt;T&gt;(IDbConnection, T, IDbTransaction, int?)"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.DapperAsyncImplementor.UpdateAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="sql"></param>
            <param name="trans"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DapperAsyncImplementor.DeleteAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            The asynchronous counterpart to <see cref="M:Pure.Data.IDapperImplementor.Delete``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.DapperAsyncImplementor.DeleteAsync``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            The asynchronous counterpart to <see cref="M:Pure.Data.IDapperImplementor.Delete``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.DapperAsyncImplementor.DeleteByIdAsync``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            删除 by id
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="entity"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DapperAsyncImplementor.GetAsync``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            The asynchronous counterpart to <see cref="M:Pure.Data.IDapperImplementor.Get``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.DapperAsyncImplementor.GetListAsync``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{Pure.Data.ISort},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            The asynchronous counterpart to <see cref="M:Pure.Data.IDapperImplementor.GetList``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{Pure.Data.ISort},System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.DapperAsyncImplementor.GetPageDataAsync``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{Pure.Data.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            The asynchronous counterpart to <see cref="M:Pure.Data.IDapperImplementor.GetPage``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{Pure.Data.ISort},System.Int32,System.Int32,System.Int32@,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.DapperAsyncImplementor.GetPageReaderAsync``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{Pure.Data.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            获取分页page datareader
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="predicate"></param>
            <param name="sort"></param>
            <param name="page"></param>
            <param name="resultsPerPage"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DapperAsyncImplementor.GetSetAsync``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{Pure.Data.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            The asynchronous counterpart to <see cref="M:Pure.Data.IDapperImplementor.GetSet``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{Pure.Data.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.DapperAsyncImplementor.CountAsync``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            The asynchronous counterpart to <see cref="M:Pure.Data.IDapperImplementor.Count``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.DapperAsyncImplementor.GetListAsync``1(System.Data.IDbConnection,Pure.Data.IClassMapper,Pure.Data.IPredicate,System.Collections.Generic.IList{Pure.Data.ISort},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            The asynchronous counterpart to <see cref="M:Pure.Data.IDapperImplementor.GetList``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{Pure.Data.ISort},System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.DapperAsyncImplementor.GetPageDataAsync``1(System.Data.IDbConnection,Pure.Data.IClassMapper,Pure.Data.IPredicate,System.Collections.Generic.IList{Pure.Data.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            The asynchronous counterpart to <see cref="M:Pure.Data.IDapperImplementor.GetPage``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{Pure.Data.ISort},System.Int32,System.Int32,System.Int32@,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.DapperAsyncImplementor.GetSetAsync``1(System.Data.IDbConnection,Pure.Data.IClassMapper,Pure.Data.IPredicate,System.Collections.Generic.IList{Pure.Data.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            The asynchronous counterpart to <see cref="M:Pure.Data.IDapperImplementor.GetSet``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{Pure.Data.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.DapperExtensionsConfiguration.GetColumnString``1(System.String,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            获取所有列组成字符串，用于Select 列
            </summary>
            <typeparam name="T"></typeparam>
            <param name="prefix"></param>
            <param name="spliteStr"></param>
            <param name="ignoreProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DapperImplementor.DeleteById``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            删除 by id
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="entity"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.DataReaderExtensions">
            <summary>
            DataReader Extensions
            </summary>
        </member>
        <member name="M:Pure.Data.DataReaderExtensions.ToDataTable(System.Data.IDataReader,System.Boolean)">
            <summary>
             将IDataReader转换为DataTable
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DataReaderExtensions.ToDataTableWithRowDelegate(System.Data.IDataReader,System.Boolean,Pure.Data.IDatabase)">
            <summary>
             将IDataReader转换为DataTable
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DataReaderExtensions.ToExpandoObject(System.Data.IDataReader,System.Boolean,Pure.Data.IDatabase)">
            <summary>
                An IDataReader extension method that converts the @this to an expando object.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a dynamic.</returns>
        </member>
        <member name="M:Pure.Data.DataReaderExtensions.ToExpandoObjects(System.Data.IDataReader,System.Boolean,Pure.Data.IDatabase)">
            <summary>
                Enumerates to expando objects in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as an IEnumerable&lt;dynamic&gt;</returns>
        </member>
        <member name="M:Pure.Data.DataReaderExtensions.ToDataTable``1(``0[])">
            <summary>
                A T[] extension method that converts the @this to a data table.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>@this as a DataTable.</returns>
        </member>
        <member name="M:Pure.Data.DataReaderExtensions.ToDictionary(System.Object)">
            <summary>  
            将对象属性转换为key-value对  
            </summary>  
            <param name="obj"></param>  
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DataReaderExtensions.ToHashtable(System.Object)">
            <summary>
            获取实体类Hashtable键值 
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="entity">实体对象</param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.DataTableHelper">
            <summary>
            DataTable 公共帮助类
            </summary>
        </member>
        <member name="M:Pure.Data.DataTableHelper.DataTableToHashtableByKeyValue(System.Data.DataTable,System.String,System.String)">
            <summary>
            Hashtable根据key过滤表的内容
            </summary>
            <param name="dt">数据库表</param>
            <param name="keyField">键</param>
            <param name="valFiled">值</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DataTableHelper.DataTableToXML(System.Data.DataTable)">
            <summary>
            DataTable 转 XML
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DataTableHelper.DataTableToArrayList(System.Data.DataTable)">
            <summary>
            DataTable 转 IList 行中是用Hashtable对象存
            </summary>
            <param name="dt"></param>
            <returns>行中是用Hashtable对象存</returns>
        </member>
        <member name="M:Pure.Data.DataTableHelper.DataTableToHashtable(System.Data.DataTable)">
            <summary>
            DataTable 转 DataTableToHashtable
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DataTableHelper.DataRowToHashTable(System.Data.DataRow)">
            <summary>
            DataRow  转  HashTable
            </summary>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DataTableHelper.DataTableToIList``1(System.Data.DataTable)">
            <summary>
            DataTable 转 对象要LIST
            </summary>
            <param name="dt"></param>
            <returns>行中是对象的类，类的属性与数据字段一致</returns>
        </member>
        <member name="M:Pure.Data.DataTableHelper.GetNewDataTable(System.Data.DataTable,System.String)">
            <summary>
            根据条件过滤表的内容
            </summary>
            <param name="dt"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Pure.Data.DataTableHelper.SelectDistinct(System.Data.DataTable,System.String[])”忽略有格式错误的 XML 注释 -->
        <member name="M:Pure.Data.DataTableHelper.IsExistRows(System.Data.DataTable)">
            <summary>
            检查DataTable 是否有数据行
            </summary>
            <param name="dt">DataTable</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DataTableHelper.SortedTable(System.Data.DataTable,System.String[])">
            <summary>
            排序表的视图
            </summary>
            <param name="dt"></param>
            <param name="sorts"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DataTableHelper.GetPagedTable(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            Datatable 分页
            </summary>
            <param name="dt"></param>
            <param name="PageIndex">当前页</param>
            <param name="PageSize">页大小</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DataUtils.ReadNullableChar(System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Pure.Data.DataUtils.ThrowDataException(System.Exception,System.Int32,System.Data.IDataReader)">
            <summary>
            Throws a data exception, only used internally
            </summary>
            <param name="ex"></param>
            <param name="index"></param>
            <param name="reader"></param>
        </member>
        <member name="T:Pure.Data.EmitConverter">
            <summary>
            EmitConverter
            </summary>
        </member>
        <!-- 对于成员“M:Pure.Data.EmitConverter.GetDeserializer(System.Type,System.Data.IDataReader,System.Int32,System.Int32,System.Boolean)”忽略有格式错误的 XML 注释 -->
        <member name="M:Pure.Data.EmitConverter.GetStructDeserializer(System.Type,System.Int32)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.EmitConverter.GetSettableProps(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.EmitConverter.GetSettableFields(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.EmitConverter.EmitInt32(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="value"></param>
        </member>
        <member name="M:Pure.Data.EmitConverter.GetTypeDeserializer(System.Type,System.Data.IDataReader,System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="reader"></param>
            <param name="startBound"></param>
            <param name="length"></param>
            <param name="returnNullIfFirstMissing"></param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.EmitConverter.FastExpando">
            <summary>
            
            </summary>
        </member>
        <member name="M:Pure.Data.EmitConverter.ReaderToEnumerable``1(System.Data.IDataReader)">
            <summary>
            Emit转换DataReader为对象列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.EmitConverter.ReaderToModel``1(System.Data.IDataReader)">
            <summary>
            Emit转换DataReader为单个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.ExpandoExts.ToExpandoByObject(System.Object)">
            <summary>
            转换为动态类型
            </summary>
            <param name="o">The object to convert.</param>
            <returns>a new expando object with the values of the passed in object</returns>
        </member>
        <member name="M:Pure.Data.ExpandoExts.ToDictionaryByObject(System.Object)">
            <summary>
            转换为IDictionary
            </summary>
            <param name="thingy">The object to convert to a dictionary.</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.ExpandoExts.ToDataTable(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            转换为DataTable
            </summary>
            <param name="items"></param>
            <returns>A DataTable with the copied dynamic data.</returns>
            <remarks>Credit given to Brian Vallelunga http://stackoverflow.com/a/6298704/5262210 </remarks>
        </member>
        <member name="M:Pure.Data.ExpandoExts.ToDataTable(System.Collections.Generic.IEnumerable{System.Object},System.Data.DataTable)">
            <summary>
            转换为DataTable
            </summary>
            <param name="items">The items to convert to data rows.</param>
            <param name="toFill">The datatable to fill. It's required this datatable has the proper columns setup.</param>
            <returns>
            toFill with the data from items.
            </returns>
            <remarks>
            Credit given to Brian Vallelunga http://stackoverflow.com/a/6298704/5262210
            </remarks>
        </member>
        <member name="T:Pure.Data.HashtableHelper">
            <summary>
            Hashtable帮助类
            </summary>
        </member>
        <member name="M:Pure.Data.HashtableHelper.GetModelToHashtable``1(``0)">
            <summary>
            实体类Model转Hashtable(反射)
            </summary>
        </member>
        <member name="M:Pure.Data.PredicateExpressions.Property(System.Linq.Expressions.Expression,System.String)">
            <summary>
            创建一个访问属性的表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="propertyName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.PredicateExpressions.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            条件表达式且（第一个true才执行第二个）
            </summary>
            <param name="left">左表达式</param>
            <param name="right">右表达式</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.PredicateExpressions.Call(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
            <summary>
            创建一个回调带有参数方法的表达式
            </summary>
            <param name="instance">表达式</param>
            <param name="methodName">方法名字</param>
            <param name="arguments">参数</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.PredicateExpressions.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建一个比较表达式
            </summary>
            <param name="left">左表达式</param>
            <param name="right">右表达式</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.PredicateExpressions.ToLambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            Lambda表达式
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="body">表达式</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.PredicateExpressions.True``1">
            <summary>
            Lambda(真)
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.PredicateExpressions.False``1">
            <summary>
            Lambda（假）
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.PredicateExpressions.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Creates a predicate expression from the specified lambda expression.
            </summary>
        </member>
        <member name="M:Pure.Data.PredicateExpressions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            组合And
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.PredicateExpressions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            组合Or
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.PredicateExpressions.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Negates the predicate.
            </summary>
        </member>
        <member name="M:Pure.Data.PredicateExpressions.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Combines the first expression with the second using the specified merge function.
            </summary>
        </member>
        <member name="T:Pure.Data.PredicateExpressions.ParameterRebinder">
            <summary>
            ParameterRebinder
            </summary>
        </member>
        <member name="F:Pure.Data.PredicateExpressions.ParameterRebinder.map">
            <summary>
            The ParameterExpression map
            </summary>
        </member>
        <member name="M:Pure.Data.PredicateExpressions.ParameterRebinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            Initializes a new instance of the <see cref="T:Pure.Data.PredicateExpressions.ParameterRebinder"/> class.
            </summary>
            <param name="map">The map.</param>
        </member>
        <member name="M:Pure.Data.PredicateExpressions.ParameterRebinder.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            Replaces the parameters.
            </summary>
            <param name="map">The map.</param>
            <param name="exp">The exp.</param>
            <returns>Expression</returns>
        </member>
        <member name="M:Pure.Data.PredicateExpressions.ParameterRebinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the parameter.
            </summary>
            <param name="p">The p.</param>
            <returns>Expression</returns>
        </member>
        <member name="T:Pure.Data.Predicates">
            <summary>
            过滤条件选择助手
            </summary>
        </member>
        <member name="M:Pure.Data.Predicates.Field``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Pure.Data.Operator,System.Object,System.Boolean)">
            <summary>
            Factory method that creates a new IFieldPredicate predicate: [FieldName] [Operator] [Value]. 
            Example: WHERE FirstName = 'Foo'
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="expression">An expression that returns the left operand [FieldName].</param>
            <param name="op">The comparison operator.</param>
            <param name="value">The value for the predicate.</param>
            <param name="not">Effectively inverts the comparison operator. Example: WHERE FirstName &lt;&gt; 'Foo'.</param>
            <returns>An instance of IFieldPredicate.</returns>
        </member>
        <member name="M:Pure.Data.Predicates.Property``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Pure.Data.Operator,System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Boolean)">
            <summary>
            Factory method that creates a new IPropertyPredicate predicate: [FieldName1] [Operator] [FieldName2]
            Example: WHERE FirstName = LastName
            </summary>
            <typeparam name="T">The type of the entity for the left operand.</typeparam>
            <typeparam name="T2">The type of the entity for the right operand.</typeparam>
            <param name="expression">An expression that returns the left operand [FieldName1].</param>
            <param name="op">The comparison operator.</param>
            <param name="expression2">An expression that returns the right operand [FieldName2].</param>
            <param name="not">Effectively inverts the comparison operator. Example: WHERE FirstName &lt;&gt; LastName </param>
            <returns>An instance of IPropertyPredicate.</returns>
        </member>
        <member name="M:Pure.Data.Predicates.Group(Pure.Data.GroupOperator,Pure.Data.IPredicate[])">
            <summary>
            Factory method that creates a new IPredicateGroup predicate.
            Predicate groups can be joined together with other predicate groups.
            </summary>
            <param name="op">The grouping operator to use when joining the predicates (AND / OR).</param>
            <param name="predicate">A list of predicates to group.</param>
            <returns>An instance of IPredicateGroup.</returns>
        </member>
        <member name="M:Pure.Data.Predicates.Exists``1(Pure.Data.IPredicate,System.Boolean)">
            <summary>
            Factory method that creates a new IExistsPredicate predicate.
            </summary>
        </member>
        <member name="M:Pure.Data.Predicates.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Pure.Data.BetweenValues,System.Boolean)">
            <summary>
            Factory method that creates a new IBetweenPredicate predicate. 
            </summary>
        </member>
        <member name="M:Pure.Data.Predicates.Sort``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            Factory method that creates a new Sort which controls how the results will be sorted.
            </summary>
        </member>
        <member name="T:Pure.Data.Operator">
            <summary>
            Comparison operator for predicates.
            </summary>
        </member>
        <member name="F:Pure.Data.Operator.Eq">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:Pure.Data.Operator.Gt">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:Pure.Data.Operator.Ge">
            <summary>
            大于或等于
            </summary>
        </member>
        <member name="F:Pure.Data.Operator.Lt">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:Pure.Data.Operator.Le">
            <summary>
            小于或等于
            </summary>
        </member>
        <member name="F:Pure.Data.Operator.Like">
            <summary>
            Like (You can use % in the value to do wilcard searching)
            </summary>
        </member>
        <member name="F:Pure.Data.Operator.In">
            <summary>
            In集合操作
            </summary>
        </member>
        <member name="T:Pure.Data.PredicateGroup">
            <summary>
            Groups IPredicates together using the specified group operator.
            </summary>
        </member>
        <member name="T:Pure.Data.GroupOperator">
            <summary>
            Operator to use when joining predicates in a PredicateGroup.
            </summary>
        </member>
        <member name="T:Pure.Data.StringNameHelper">
            <summary>
            StringNameHelper 公共帮助类
            </summary>
        </member>
        <member name="M:Pure.Data.StringNameHelper.MergeSpace(System.String)">
            <summary>  
            字符串中多个连续空格转为一个空格  
            </summary>  
            <param name="str">待处理的字符串</param>  
            <returns>合并空格后的字符串</returns>  
        </member>
        <member name="T:Pure.Data.LobType">
            <summary>
            拓展大文本类型
            </summary>
        </member>
        <member name="F:Pure.Data.LobType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Pure.Data.LobType.Clob">
            <summary>
            clob大文本
            </summary>
        </member>
        <member name="F:Pure.Data.LobType.Blob">
            <summary>
            blob字节对象
            </summary>
        </member>
        <member name="F:Pure.Data.LobConverter.Enable">
            <summary>
            是否启用转换
            </summary>
        </member>
        <member name="T:Pure.Data.ILobParameterConverter">
            <summary>
            Lob类型转换接口
            </summary>
        </member>
        <member name="M:Pure.Data.ILobParameterConverter.Convert(System.Object,Pure.Data.LobType)">
            <summary>
            转换Lob类型参数值（Clob或者Blob）
            </summary>
            <param name="originValue"></param>
            <param name="lobType"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.ConsoleHelper.OutputMessage(System.String,System.Exception,Pure.Data.MessageType)">
            <summary>
            默认控制台输出
            </summary>
            <param name="data"></param>
            <param name="type"></param>
        </member>
        <member name="P:Pure.Data.LogHelper.CategoryLogType">
            <summary>
            是否按日志类型保存日志文件
            </summary>
        </member>
        <member name="M:Pure.Data.LogHelper.WriteException(System.Exception)">
            <summary>输出异常日志</summary>
            <param name="ex">异常信息</param>
        </member>
        <member name="P:Pure.Data.ServerLog.CategoryLogType">
            <summary>
            是否按日志类型保存日志文件
            </summary>
        </member>
        <member name="T:Pure.Data.AutoClassMapper`1">
            <summary>
            Automatically maps an entity to a table using a combination of reflection and naming conventions for keys.
            </summary>
        </member>
        <member name="T:Pure.Data.ClassMapper`1">
            <summary>
            Maps an entity to a table through a collection of property maps.
            </summary>
        </member>
        <member name="P:Pure.Data.ClassMapper`1.SchemaName">
            <summary>
            Gets or sets the schema to use when referring to the corresponding table name in the database.
            </summary>
        </member>
        <member name="P:Pure.Data.ClassMapper`1.TableName">
            <summary>
            Gets or sets the table to use in the database.
            </summary>
        </member>
        <member name="P:Pure.Data.ClassMapper`1.Properties">
            <summary>
            A collection of properties that will map to columns in the database table.
            </summary>
        </member>
        <member name="M:Pure.Data.ClassMapper`1.Schema(System.String)">
            <summary>
            设置Schema模型
            </summary>
            <param name="schemaName"></param>
        </member>
        <member name="M:Pure.Data.ClassMapper`1.Table(System.String)">
            <summary>
            设置表名称
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:Pure.Data.ClassMapper`1.Description(System.String)">
            <summary>
            设置表注释
            </summary>
            <param name="desc"></param>
        </member>
        <member name="M:Pure.Data.ClassMapper`1.Sequence(System.String)">
            <summary>
            设置序列号名称，一般用于Oracle
            </summary>
            <param name="seq"></param>
        </member>
        <member name="M:Pure.Data.ClassMapper`1.Ignore(System.Boolean)">
            <summary>
            设置忽略当前表的数据迁移
            </summary>
            <param name="ignoreMigrate"></param>
        </member>
        <member name="M:Pure.Data.ClassMapper`1.AutoMap(System.Boolean)">
            <summary>
            自动映射列信息
            </summary>
        </member>
        <member name="M:Pure.Data.ClassMapper`1.AutoMap(System.Func{System.Type,System.Reflection.PropertyInfo,System.Boolean},System.Boolean)">
            <summary>
            自动映射列信息
            </summary>
            <param name="canMap"></param>
        </member>
        <member name="M:Pure.Data.ClassMapper`1.Map``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            映射一个实体列对象
            </summary>
        </member>
        <member name="M:Pure.Data.ClassMapper`1.Map(System.Reflection.PropertyInfo)">
            <summary>
            映射一个实体列对象
            </summary>
        </member>
        <member name="P:Pure.Data.ClassMapper`1.CascadeMode">
            <summary>
            Sets the cascade mode for all rules within this validator.
            </summary>
        </member>
        <member name="M:Pure.Data.ClassMapper`1.Validate``1(Pure.Data.IDatabase,``0)">
            <summary>
            验证对象数据是否有效
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.ClassMapper`1.Validate``1(Pure.Data.IDatabase,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            验证对象数据，可指定验证某些属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="validator"></param>
            <param name="instance"></param>
            <param name="propertyExpressions"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.ClassMapper`1.Validate``1(Pure.Data.IDatabase,``0,System.String[])">
            <summary>
            验证对象数据，可指定验证某些属性
            </summary>
            <param name="instance">The object to validate</param>
            <param name="properties">The names of the properties to validate.</param>
            <returns>A ValidationResult object containing any validation failures.</returns>
        </member>
        <member name="M:Pure.Data.ClassMapper`1.ValidateAndThrow``1(Pure.Data.IDatabase,``0)">
            <summary>
            验证如果不通过抛出异常
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Pure.Data.ClassMapper`1.ValidateInternal``1(Pure.Data.Validations.ValidationContext{``0})">
            <summary>
            验证内部实现
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.ClassMapper`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            为某个属性设置验证规则
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.ClassMapper`1.LoadDisplayName(Pure.Data.Validations.Internal.PropertyRule)">
            <summary>
            加载验证的显示名称
            </summary>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="P:Pure.Data.ClassMapper.SchemaName">
            <summary>
            Gets or sets the schema to use when referring to the corresponding table name in the database.
            </summary>
        </member>
        <member name="P:Pure.Data.ClassMapper.TableName">
            <summary>
            获取或者设置表名
            </summary>
        </member>
        <member name="P:Pure.Data.ClassMapper.TableDescription">
            <summary>
            获取或者设置表注释
            </summary>
        </member>
        <member name="P:Pure.Data.ClassMapper.IgnoredMigrate">
            <summary>
            是否忽略数据迁移
            </summary>
        </member>
        <member name="P:Pure.Data.ClassMapper.Properties">
            <summary>
            A collection of properties that will map to columns in the database table.
            </summary>
        </member>
        <member name="M:Pure.Data.ClassMapper.Schema(System.String)">
            <summary>
            设置表SCHEMA模型
            </summary>
            <param name="schemaName"></param>
        </member>
        <member name="M:Pure.Data.ClassMapper.Table(System.String)">
            <summary>
            设置表名称
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:Pure.Data.ClassMapper.Description(System.String)">
            <summary>
            设置表注释
            </summary>
            <param name="desc"></param>
        </member>
        <member name="M:Pure.Data.ClassMapper.Sequence(System.String)">
            <summary>
            设置序列号，一般用于oracle
            </summary>
            <param name="seq"></param>
        </member>
        <member name="M:Pure.Data.ClassMapper.Ignore(System.Boolean)">
            <summary>
            设置忽略当前表数据迁移
            </summary>
            <param name="ignoreMigrate"></param>
        </member>
        <member name="M:Pure.Data.ClassMapper.AutoMap">
            <summary>
            自动迁移列信息
            </summary>
        </member>
        <member name="M:Pure.Data.ClassMapper.AutoMap(System.Func{System.Type,System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            自动迁移列信息
            </summary>
            <param name="canMap"></param>
        </member>
        <member name="M:Pure.Data.ClassMapper.Map(System.Reflection.PropertyInfo)">
            <summary>
            Fluently, maps an entity property to a column
            </summary>
        </member>
        <member name="P:Pure.Data.ClassMapper.CascadeMode">
            <summary>
            Sets the cascade mode for all rules within this validator.
            </summary>
        </member>
        <member name="M:Pure.Data.ClassMapper.Validate``1(Pure.Data.IDatabase,``0)">
            <summary>
            验证对象数据是否有效
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.ClassMapper.Validate``1(Pure.Data.IDatabase,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            验证对象数据，可指定验证某些属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="validator"></param>
            <param name="instance"></param>
            <param name="propertyExpressions"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.ClassMapper.Validate``1(Pure.Data.IDatabase,``0,System.String[])">
            <summary>
            验证对象数据，可指定验证某些属性
            </summary>
            <param name="instance">The object to validate</param>
            <param name="properties">The names of the properties to validate.</param>
            <returns>A ValidationResult object containing any validation failures.</returns>
        </member>
        <member name="M:Pure.Data.ClassMapper.ValidateAndThrow``1(Pure.Data.IDatabase,``0)">
            <summary>
            验证如果不通过抛出异常
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Pure.Data.ClassMapper.ValidateInternal``1(Pure.Data.Validations.ValidationContext{``0})">
            <summary>
            验证内部实现
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.PluralizedAutoClassMapper`1">
            <summary>
            Automatically maps an entity to a table using a combination of reflection and naming conventions for keys. 
            Identical to AutoClassMapper, but attempts to pluralize table names automatically.
            Example: Person entity maps to People table
            </summary>
        </member>
        <member name="F:Pure.Data.ComputedColumnType.Always">
            <summary>
            Always considered as a computed column
            </summary>
        </member>
        <member name="F:Pure.Data.ComputedColumnType.ComputedOnInsert">
            <summary>
            Only considered a Computed column for inserts, Updates will not consider this column to be computed
            </summary>
        </member>
        <member name="F:Pure.Data.ComputedColumnType.ComputedOnUpdate">
            <summary>
            Only considered a Computed column for updates, Inserts will not consider this column to be computed
            </summary>
        </member>
        <member name="T:Pure.Data.IPropertyMap">
            <summary>
            Maps an entity property to its corresponding column in the database.
            </summary>
        </member>
        <member name="T:Pure.Data.PropertyMap">
            <summary>
            Maps an entity property to its corresponding column in the database.
            </summary>
        </member>
        <member name="P:Pure.Data.PropertyMap.Name">
            <summary>
            Gets the name of the property by using the specified propertyInfo.
            </summary>
        </member>
        <member name="P:Pure.Data.PropertyMap.ColumnName">
            <summary>
            Gets the column name for the current property.
            </summary>
        </member>
        <member name="P:Pure.Data.PropertyMap.KeyType">
            <summary>
            主键类型
            </summary>
        </member>
        <member name="P:Pure.Data.PropertyMap.Ignored">
            <summary>
            是否忽略当前属性
            </summary>
        </member>
        <member name="P:Pure.Data.PropertyMap.IsReadOnly">
            <summary>
            是否只读属性，将不会出现在Insert和Update语句中
            </summary>
        </member>
        <member name="P:Pure.Data.PropertyMap.LobType">
            <summary>
            大文本类型
            </summary>
        </member>
        <member name="P:Pure.Data.PropertyMap.PropertyInfo">
            <summary>
            属性信息
            </summary>
        </member>
        <member name="M:Pure.Data.PropertyMap.Column(System.String)">
            <summary>
            Fluently sets the column name for the property.
            </summary>
            <param name="columnName">The column name as it exists in the database.</param>
        </member>
        <member name="M:Pure.Data.PropertyMap.Key(Pure.Data.KeyType)">
            <summary>
            Fluently sets the key type of the property.
            </summary>
            <param name="columnName">The column name as it exists in the database.</param>
        </member>
        <member name="M:Pure.Data.PropertyMap.Ignore">
            <summary>
            Fluently sets the ignore status of the property.
            </summary>
        </member>
        <member name="M:Pure.Data.PropertyMap.ReadOnly">
            <summary>
            Fluently sets the read-only status of the property.
            </summary>
        </member>
        <member name="T:Pure.Data.KeyType">
            <summary>
            主键类型
            </summary>
        </member>
        <member name="F:Pure.Data.KeyType.NotAKey">
            <summary>
            非主键
            </summary>
        </member>
        <member name="F:Pure.Data.KeyType.Identity">
            <summary>
            自增主键
            </summary>
        </member>
        <member name="F:Pure.Data.KeyType.TriggerIdentity">
            <summary>
            根据触发器自动生成主键. 如 : Oracle's Sequence 
            </summary>
        </member>
        <member name="F:Pure.Data.KeyType.Guid">
            <summary>
            Guid类型主键
            </summary>
        </member>
        <member name="F:Pure.Data.KeyType.Assigned">
            <summary>
            自定义主键
            </summary>
        </member>
        <member name="M:Pure.Data.DbExtensions.ToSqlFilter(System.String,System.String,Pure.Data.IDatabase)">
             <summary>
            Sql Filter
             </summary>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="T:Pure.Data.CommandFlags">
            <summary>
            Additional state flags that control command behaviour
            </summary>
        </member>
        <member name="F:Pure.Data.CommandFlags.None">
            <summary>
            No additional flags
            </summary>
        </member>
        <member name="F:Pure.Data.CommandFlags.Buffered">
            <summary>
            Should data be buffered before returning?
            </summary>
        </member>
        <member name="F:Pure.Data.CommandFlags.Pipelined">
            <summary>
            Can async queries be pipelined?
            </summary>
        </member>
        <member name="F:Pure.Data.CommandFlags.NoCache">
            <summary>
            Should the plan cache be bypassed?
            </summary>
        </member>
        <member name="T:Pure.Data.CommandDefinition">
            <summary>
            Represents the key aspects of a sql operation
            </summary>
        </member>
        <member name="P:Pure.Data.CommandDefinition.CommandText">
            <summary>
            The command (sql or a stored-procedure name) to execute
            </summary>
        </member>
        <member name="P:Pure.Data.CommandDefinition.Parameters">
            <summary>
            The parameters associated with the command
            </summary>
        </member>
        <member name="P:Pure.Data.CommandDefinition.Transaction">
            <summary>
            The active transaction for the command
            </summary>
        </member>
        <member name="P:Pure.Data.CommandDefinition.CommandTimeout">
            <summary>
            The effective timeout for the command
            </summary>
        </member>
        <member name="P:Pure.Data.CommandDefinition.CommandType">
            <summary>
            The type of command that the command-text represents
            </summary>
        </member>
        <member name="P:Pure.Data.CommandDefinition.Buffered">
            <summary>
            Should data be buffered before returning?
            </summary>
        </member>
        <member name="P:Pure.Data.CommandDefinition.AddToCache">
            <summary>
            Should the plan for this query be cached?
            </summary>
        </member>
        <member name="P:Pure.Data.CommandDefinition.Flags">
            <summary>
            Additional state flags against this command
            </summary>
        </member>
        <member name="P:Pure.Data.CommandDefinition.Pipelined">
            <summary>
            Can async queries be pipelined?
            </summary>
        </member>
        <member name="P:Pure.Data.CommandDefinition.Database">
            <summary>
            拓展的数据库接口
            </summary>
        </member>
        <member name="M:Pure.Data.CommandDefinition.#ctor(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.CommandFlags,Pure.Data.IDatabase,System.Threading.CancellationToken)">
            <summary>
            Initialize the command definition
            </summary>
        </member>
        <member name="P:Pure.Data.CommandDefinition.CancellationToken">
            <summary>
            For asynchronous operations, the cancellation-token
            </summary>
        </member>
        <member name="T:Pure.Data.SqlMapper">
            <summary>
            Dapper, a light weight object mapper for ADO.NET
            </summary>
        </member>
        <member name="T:Pure.Data.SqlMapper.Settings">
            <summary>
            Permits specifying certain SqlMapper values globally.
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.Settings.SetDefaults">
            <summary>
            Resets all Settings to their default values
            </summary>
        </member>
        <member name="P:Pure.Data.SqlMapper.Settings.CommandTimeout">
            <summary>
            Specifies the default Command Timeout for all Queries
            </summary>
        </member>
        <member name="P:Pure.Data.SqlMapper.Settings.UseSingleResultOptimization">
            <summary>
            Gets or sets whether Dapper should use the CommandBehavior.SingleResult optimization
            </summary>
            <remarks>Note that a consequence of enabling this option is that errors that happen <b>after</b> the first select may not be reported</remarks>
        </member>
        <member name="P:Pure.Data.SqlMapper.Settings.UseSingleRowOptimization">
            <summary>
            Gets or sets whether Dapper should use the CommandBehavior.SingleRow optimization
            </summary>
            <remarks>Note that on some DB providers this optimization can have adverse performance impact</remarks>
        </member>
        <member name="P:Pure.Data.SqlMapper.Settings.ApplyNullValues">
            <summary>
            Indicates whether nulls in data are silently ignored (default) vs actively applied and assigned to members
            </summary>
        </member>
        <member name="P:Pure.Data.SqlMapper.Settings.PadListExpansions">
            <summary>
            Should list expansions be padded with null-valued parameters, to prevent query-plan saturation? For example,
            an 'in @foo' expansion with 7, 8 or 9 values will be sent as a list of 10 values, with 3, 2 or 1 of them null.
            The padding size is relative to the size of the list; "next 10" under 150, "next 50" under 500,
            "next 100" under 1500, etc.
            </summary>
            <remarks>
            Caution: this should be treated with care if your DB provider (or the specific configuration) allows for null
            equality (aka "ansi nulls off"), as this may change the intent of your query; as such, this is disabled by 
            default and must be enabled.
            </remarks>
        </member>
        <member name="P:Pure.Data.SqlMapper.Settings.InListStringSplitCount">
            <summary>
            If set (non-negative), when performing in-list expansions of integer types ("where id in @ids", etc), switch to a string_split based
            operation if there are more than this many elements. Note that this feautre requires SQL Server 2016 / compatibility level 130 (or above).
            </summary>
        </member>
        <member name="T:Pure.Data.SqlMapper.IDynamicParameters">
            <summary>
            Implement this interface to pass an arbitrary db specific set of parameters to Dapper
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.IDynamicParameters.AddParameters(System.Data.IDbCommand,Pure.Data.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="T:Pure.Data.SqlMapper.IParameterLookup">
            <summary>
            Extends IDynamicParameters providing by-name lookup of parameter values
            </summary>
        </member>
        <member name="P:Pure.Data.SqlMapper.IParameterLookup.Item(System.String)">
            <summary>
            Get the value of the specified parameter (return null if not found)
            </summary>
        </member>
        <member name="T:Pure.Data.SqlMapper.IParameterCallbacks">
            <summary>
            Extends IDynamicParameters with facilities for executing callbacks after commands have completed
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.IParameterCallbacks.OnCompleted">
            <summary>
            Invoked when the command has executed
            </summary>
        </member>
        <member name="T:Pure.Data.SqlMapper.ICustomQueryParameter">
            <summary>
            Implement this interface to pass an arbitrary db specific parameter to Dapper
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.ICustomQueryParameter.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter needed to the command before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="name">Parameter name</param>
        </member>
        <member name="T:Pure.Data.SqlMapper.ITypeHandler">
            <summary>
            Implement this interface to perform custom type-based parameter handling and value parsing
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.ITypeHandler.SetValue(System.Data.IDbDataParameter,System.Object)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:Pure.Data.SqlMapper.ITypeHandler.Parse(System.Type,System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <param name="destinationType">The type to parse to</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:Pure.Data.SqlMapper.TypeHandler`1">
            <summary>
            Base-class for simple type-handlers
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.TypeHandler`1.SetValue(System.Data.IDbDataParameter,`0)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:Pure.Data.SqlMapper.TypeHandler`1.Parse(System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:Pure.Data.SqlMapper.ITypeMap">
            <summary>
            Implement this interface to change default mapping of reader columns to type members
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.ITypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.ITypeMap.FindExplicitConstructor">
            <summary>
            Returns a constructor which should *always* be used.
            
            Parameters will be default values, nulls for reference types and zero'd for value types.
            
            Use this class to force object creation away from parameterless constructors you don't control.
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.ITypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.ITypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="T:Pure.Data.SqlMapper.IMemberMap">
            <summary>
            Implements this interface to provide custom member mapping
            </summary>
        </member>
        <member name="P:Pure.Data.SqlMapper.IMemberMap.ColumnName">
            <summary>
            Source DataReader column name
            </summary>
        </member>
        <member name="P:Pure.Data.SqlMapper.IMemberMap.MemberType">
            <summary>
             Target member type
            </summary>
        </member>
        <member name="P:Pure.Data.SqlMapper.IMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:Pure.Data.SqlMapper.IMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:Pure.Data.SqlMapper.IMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:Pure.Data.SqlMapper.Link`2">
            <summary>
            This is a micro-cache; suitable when the number of terms is controllable (a few hundred, for example),
            and strictly append-only; you cannot change existing values. All key matches are on **REFERENCE**
            equality. The type is fully thread-safe.
            </summary>
        </member>
        <member name="E:Pure.Data.SqlMapper.QueryCachePurged">
            <summary>
            Called if the query cache is purged via PurgeQueryCache
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.PurgeQueryCache">
            <summary>
            Purge the query cache 
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.GetCachedSQLCount">
            <summary>
            Return a count of all the cached queries by dapper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.GetCachedSQL(System.Int32)">
            <summary>
            Return a list of all the queries cached by dapper
            </summary>
            <param name="ignoreHitCountAbove"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.GetHashCollissions">
            <summary>
            Deep diagnostics only: find any hash collisions in the cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.ResetTypeHandlers">
            <summary>
            Clear the registered type handlers
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.AddTypeMap(System.Type,System.Data.DbType)">
            <summary>
            Configure the specified type to be mapped to a given db-type
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.AddTypeHandler(System.Type,Pure.Data.SqlMapper.ITypeHandler)">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.AddTypeHandlerImpl(System.Type,Pure.Data.SqlMapper.ITypeHandler,System.Boolean)">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.AddTypeHandler``1(Pure.Data.SqlMapper.TypeHandler{``0})">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="T:Pure.Data.SqlMapper.TypeHandlerCache`1">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.TypeHandlerCache`1.Parse(System.Object)">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.TypeHandlerCache`1.SetValue(System.Data.IDbDataParameter,System.Object)">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.GetDbType(System.Object)">
            <summary>
            Get the DbType that maps to a given value
            </summary>
        </member>
        <member name="T:Pure.Data.SqlMapper.Identity">
            <summary>
            Identity of a cached query in Dapper, used for extensibility
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.Identity.ForDynamicParameters(System.Type)">
            <summary>
            Create an identity for use with DynamicParameters, internal use only
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.Identity.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:Pure.Data.SqlMapper.Identity.sql">
            <summary>
            The sql
            </summary>
        </member>
        <member name="F:Pure.Data.SqlMapper.Identity.commandType">
            <summary>
            The command type 
            </summary>
        </member>
        <member name="F:Pure.Data.SqlMapper.Identity.hashCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Pure.Data.SqlMapper.Identity.gridIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Pure.Data.SqlMapper.Identity.type">
            <summary>
            
            </summary>
        </member>
        <member name="F:Pure.Data.SqlMapper.Identity.connectionString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Pure.Data.SqlMapper.Identity.parametersType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.Identity.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.Identity.Equals(Pure.Data.SqlMapper.Identity)">
            <summary>
            Compare 2 Identity objects
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Obtains the data as a list; if it is *already* a list, the original object is returned without
            any duplication; otherwise, ToList() is invoked.
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.Execute(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Execute parameterized SQL  
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.Execute(System.Data.IDbConnection,Pure.Data.CommandDefinition)">
            <summary>
            Execute parameterized SQL  
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.ExecuteScalar(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.ExecuteScalar``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.ExecuteScalar(System.Data.IDbConnection,Pure.Data.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.ExecuteScalar``1(System.Data.IDbConnection,Pure.Data.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.ExecuteReader(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            DataTable table = new DataTable("MyTable");
            using (var reader = ExecuteReader(cnn, sql, param))
            {
                table.Load(reader);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Pure.Data.SqlMapper.ExecuteReader(System.Data.IDbConnection,Pure.Data.CommandDefinition)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
        </member>
        <member name="M:Pure.Data.SqlMapper.ExecuteReader(System.Data.IDbConnection,Pure.Data.CommandDefinition,System.Data.CommandBehavior)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
        </member>
        <member name="M:Pure.Data.SqlMapper.Query(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Return a list of dynamic objects, reader is closed after the call
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Pure.Data.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.Query(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Executes a query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.Query``1(System.Data.IDbConnection,Pure.Data.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryFirst(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Return a dynamic object with properties matching the columns.
            </summary>
            <param name="cnn">The connection to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryFirstOrDefault(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Return a dynamic object with properties matching the columns.
            </summary>
            <param name="cnn">The connection to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Pure.Data.SqlMapper.QuerySingle(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Return a dynamic object with properties matching the columns.
            </summary>
            <param name="cnn">The connection to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Pure.Data.SqlMapper.QuerySingleOrDefault(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Return a dynamic object with properties matching the columns.
            </summary>
            <param name="cnn">The connection to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryFirst``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Executes a single-row query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of result to return.</typeparam>
            <param name="cnn">The connection to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <returns>
            A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryFirstOrDefault``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Executes a single-row query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of result to return.</typeparam>
            <param name="cnn">The connection to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <returns>
            A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.QuerySingle``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Executes a single-row query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of result to return.</typeparam>
            <param name="cnn">The connection to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <returns>
            A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.QuerySingleOrDefault``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Executes a single-row query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of result to return.</typeparam>
            <param name="cnn">The connection to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <returns>
            A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryFirst(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Executes a single-row query, returning the data typed as <paramref name="type"/>.
            </summary>
            <param name="cnn">The connection to query on.</param>
            <param name="type">The type to return.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <c>null</c>.</exception>
            <returns>
            A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryFirstOrDefault(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Executes a single-row query, returning the data typed as <paramref name="type"/>.
            </summary>
            <param name="cnn">The connection to query on.</param>
            <param name="type">The type to return.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <c>null</c>.</exception>
            <returns>
            A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.QuerySingle(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Executes a single-row query, returning the data typed as <paramref name="type"/>.
            </summary>
            <param name="cnn">The connection to query on.</param>
            <param name="type">The type to return.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <c>null</c>.</exception>
            <returns>
            A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.QuerySingleOrDefault(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Executes a single-row query, returning the data typed as <paramref name="type"/>.
            </summary>
            <param name="cnn">The connection to query on.</param>
            <param name="type">The type to return.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <c>null</c>.</exception>
            <returns>
            A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryFirst``1(System.Data.IDbConnection,Pure.Data.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of results to return.</typeparam>
            <param name="cnn">The connection to query on.</param>
            <param name="command">The command used to query on this connection.</param>
            <returns>
            A single instance or null of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryFirstOrDefault``1(System.Data.IDbConnection,Pure.Data.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of results to return.</typeparam>
            <param name="cnn">The connection to query on.</param>
            <param name="command">The command used to query on this connection.</param>
            <returns>
            A single or null instance of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.QuerySingle``1(System.Data.IDbConnection,Pure.Data.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of results to return.</typeparam>
            <param name="cnn">The connection to query on.</param>
            <param name="command">The command used to query on this connection.</param>
            <returns>
            A single instance of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.QuerySingleOrDefault``1(System.Data.IDbConnection,Pure.Data.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of results to return.</typeparam>
            <param name="cnn">The connection to query on.</param>
            <param name="command">The command used to query on this connection.</param>
            <returns>
            A single instance of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryMultiple(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryMultiple(System.Data.IDbConnection,Pure.Data.CommandDefinition)">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.Query``3(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst">The first type in the record set</typeparam>
            <typeparam name="TSecond">The second type in the record set</typeparam>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.Query``4(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.Query``5(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Perform a multi mapping query with 4 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.Query``6(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Perform a multi mapping query with 5 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.Query``7(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Perform a multi mapping query with 6 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.Query``8(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Perform a multi mapping query with 7 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TSeventh"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Type[],System.Func{System.Object[],``0},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Perform a multi mapping query with arbitrary input parameters
            </summary>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="types">array of types in the record set</param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.ReadChar(System.Object)">
            <summary>
            Internal use only
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.ReadNullableChar(System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.FindOrAddParameter(System.Data.IDataParameterCollection,System.Data.IDbCommand,System.String)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.PackListParameters(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="T:Pure.Data.SqlMapper.LiteralToken">
            <summary>
            Represents a placeholder for a value that should be replaced as a literal value in the resulting sql
            </summary>
        </member>
        <member name="P:Pure.Data.SqlMapper.LiteralToken.Token">
            <summary>
            The text in the original command that should be replaced
            </summary>
        </member>
        <member name="P:Pure.Data.SqlMapper.LiteralToken.Member">
            <summary>
            The name of the member referred to by the token
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.ReplaceLiterals(Pure.Data.SqlMapper.IParameterLookup,System.Data.IDbCommand)">
            <summary>
            Replace all literal tokens with their text form
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.Format(System.Object)">
            <summary>
            Convert numeric values to their string form for SQL literal purposes
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.CreateParamInfoGenerator(Pure.Data.SqlMapper.Identity,System.Boolean,System.Boolean)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="F:Pure.Data.SqlMapper.TypeMapProvider">
            <summary>
            Gets type-map for the given type
            </summary>
            <returns>Type map instance, default is to create new instance of DefaultTypeMap</returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.GetTypeMap(System.Type)">
            <summary>
            Gets type-map for the given type
            </summary>
            <returns>Type map implementation, DefaultTypeMap instance if no override present</returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.SetTypeMap(System.Type,Pure.Data.SqlMapper.ITypeMap)">
            <summary>
            Set custom mapping for type deserializers
            </summary>
            <param name="type">Entity type to override</param>
            <param name="map">Mapping rules impementation, null to remove custom map</param>
        </member>
        <member name="M:Pure.Data.SqlMapper.GetTypeDeserializer(System.Type,System.Data.IDataReader,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Internal use only
            </summary>
            <param name="type"></param>
            <param name="reader"></param>
            <param name="startBound"></param>
            <param name="length"></param>
            <param name="returnNullIfFirstMissing"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.ThrowDataException(System.Exception,System.Int32,System.Data.IDataReader,System.Object)">
            <summary>
            Throws a data exception, only used internally
            </summary>
        </member>
        <member name="F:Pure.Data.SqlMapper.DataTableTypeNameKey">
            <summary>
            Key used to indicate the type name associated with a DataTable
            </summary>
        </member>
        <member name="P:Pure.Data.SqlMapper.ConnectionStringComparer">
            <summary>
            How should connection strings be compared for equivalence? Defaults to StringComparer.Ordinal.
            Providing a custom implementation can be useful for allowing multi-tenancy databases with identical
            schema to share strategies. Note that usual equivalence rules apply: any equivalent connection strings
            <b>MUST</b> yield the same hash-code.
            </summary>
        </member>
        <member name="T:Pure.Data.SqlMapper.GridReader">
            <summary>
            The grid reader provides interfaces for reading multiple result sets from a Dapper query 
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.GridReader.Read(System.Boolean)">
            <summary>
            Read the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Pure.Data.SqlMapper.GridReader.Read``1(System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.GridReader.Read(System.Type,System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.GridReader.Read``3(System.Func{``0,``1,``2},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.GridReader.Read``4(System.Func{``0,``1,``2,``3},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.GridReader.Read``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.GridReader.Read``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.GridReader.Read``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.GridReader.Read``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.GridReader.Read``1(System.Type[],System.Func{System.Object[],``0},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="P:Pure.Data.SqlMapper.GridReader.IsConsumed">
            <summary>
            Has the underlying reader been consumed?
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.GridReader.Dispose">
            <summary>
            Dispose the grid, closing and disposing both the underlying reader and command.
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.GridReader.ReadAsync(System.Boolean)">
            <summary>
            Read the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Pure.Data.SqlMapper.GridReader.ReadAsync(System.Type,System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.GridReader.ReadAsync``1(System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.AsTableValuedParameter(System.Data.DataTable,System.String)">
            <summary>
            Used to pass a DataTable as a TableValuedParameter
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.SetTypeName(System.Data.DataTable,System.String)">
            <summary>
            Associate a DataTable with a type name
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.GetTypeName(System.Data.DataTable)">
            <summary>
            Fetch the type name associated with a DataTable
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.AsTableValuedParameter(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Server.SqlDataRecord},System.String)">
            <summary>
            Used to pass a IEnumerable&lt;SqlDataRecord&gt; as a TableValuedParameter
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Execute a query asynchronously using .NET 4.5 Task.
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryAsync(System.Data.IDbConnection,Pure.Data.CommandDefinition)">
            <summary>
            Execute a query asynchronously using .NET 4.5 Task.
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Execute a query asynchronously using .NET 4.5 Task.
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryAsync(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Execute a query asynchronously using .NET 4.5 Task.
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryAsync``1(System.Data.IDbConnection,Pure.Data.CommandDefinition)">
            <summary>
            Execute a query asynchronously using .NET 4.5 Task.
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryAsync(System.Data.IDbConnection,System.Type,Pure.Data.CommandDefinition)">
            <summary>
            Execute a query asynchronously using .NET 4.5 Task.
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.ExecuteAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Execute a command asynchronously using .NET 4.5 Task.
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.ExecuteAsync(System.Data.IDbConnection,Pure.Data.CommandDefinition)">
            <summary>
            Execute a command asynchronously using .NET 4.5 Task.
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryAsync``3(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst">The first type in the recordset</typeparam>
            <typeparam name="TSecond">The second type in the recordset</typeparam>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryAsync``3(System.Data.IDbConnection,Pure.Data.CommandDefinition,System.Func{``0,``1,``2},System.String)">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst">The first type in the recordset</typeparam>
            <typeparam name="TSecond">The second type in the recordset</typeparam>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="splitOn">The field we should split and read the second object from (default: id)</param>
            <param name="command">The command to execute</param>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryAsync``4(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryAsync``4(System.Data.IDbConnection,Pure.Data.CommandDefinition,System.Func{``0,``1,``2,``3},System.String)">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="splitOn">The field we should split and read the second object from (default: id)</param>
            <param name="command">The command to execute</param>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryAsync``5(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Perform a multi mapping query with 4 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryAsync``5(System.Data.IDbConnection,Pure.Data.CommandDefinition,System.Func{``0,``1,``2,``3,``4},System.String)">
            <summary>
            Perform a multi mapping query with 4 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="splitOn">The field we should split and read the second object from (default: id)</param>
            <param name="command">The command to execute</param>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryAsync``6(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Perform a multi mapping query with 5 input parameters
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryAsync``6(System.Data.IDbConnection,Pure.Data.CommandDefinition,System.Func{``0,``1,``2,``3,``4,``5},System.String)">
            <summary>
            Perform a multi mapping query with 5 input parameters
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryAsync``7(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Perform a multi mapping query with 6 input parameters
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryAsync``7(System.Data.IDbConnection,Pure.Data.CommandDefinition,System.Func{``0,``1,``2,``3,``4,``5,``6},System.String)">
            <summary>
            Perform a multi mapping query with 6 input parameters
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryAsync``8(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Perform a multi mapping query with 7 input parameters
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryAsync``8(System.Data.IDbConnection,Pure.Data.CommandDefinition,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.String)">
            <summary>
            Perform a multi mapping query with 7 input parameters
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryAsync``1(System.Data.IDbConnection,System.String,System.Type[],System.Func{System.Object[],``0},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Perform a multi mapping query with arbitrary input parameters
            </summary>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="types">array of types in the recordset</param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryMultipleAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryMultipleAsync(System.Data.IDbConnection,Pure.Data.CommandDefinition)">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.ExecuteReaderAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            DataTable table = new DataTable("MyTable");
            using (var reader = ExecuteReader(cnn, sql, param))
            {
                table.Load(reader);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Pure.Data.SqlMapper.ExecuteReaderAsync(System.Data.IDbConnection,Pure.Data.CommandDefinition)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
        </member>
        <member name="M:Pure.Data.SqlMapper.ExecuteScalarAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.ExecuteScalarAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.ExecuteScalarAsync(System.Data.IDbConnection,Pure.Data.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.ExecuteScalarAsync``1(System.Data.IDbConnection,Pure.Data.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryFirstAsync(System.Data.IDbConnection,Pure.Data.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="cnn">The connection to query on.</param>
            <param name="command">The command used to query on this connection.</param>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryFirstOrDefaultAsync(System.Data.IDbConnection,Pure.Data.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="cnn">The connection to query on.</param>
            <param name="command">The command used to query on this connection.</param>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Pure.Data.SqlMapper.QuerySingleAsync(System.Data.IDbConnection,Pure.Data.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="cnn">The connection to query on.</param>
            <param name="command">The command used to query on this connection.</param>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Pure.Data.SqlMapper.QuerySingleOrDefaultAsync(System.Data.IDbConnection,Pure.Data.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="cnn">The connection to query on.</param>
            <param name="command">The command used to query on this connection.</param>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryFirstAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <typeparam name="T">The type of result to return.</typeparam>
            <param name="cnn">The connection to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryFirstOrDefaultAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <typeparam name="T">The type of result to return.</typeparam>
            <param name="cnn">The connection to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
        </member>
        <member name="M:Pure.Data.SqlMapper.QuerySingleAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <typeparam name="T">The type of result to return.</typeparam>
            <param name="cnn">The connection to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
        </member>
        <member name="M:Pure.Data.SqlMapper.QuerySingleOrDefaultAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="cnn">The connection to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryFirstAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="cnn">The connection to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryFirstOrDefaultAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="cnn">The connection to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
        </member>
        <member name="M:Pure.Data.SqlMapper.QuerySingleAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="cnn">The connection to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
        </member>
        <member name="M:Pure.Data.SqlMapper.QuerySingleOrDefaultAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="cnn">The connection to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryFirstAsync(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="cnn">The connection to query on.</param>
            <param name="type">The type to return.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryFirstOrDefaultAsync(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="cnn">The connection to query on.</param>
            <param name="type">The type to return.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Pure.Data.SqlMapper.QuerySingleAsync(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="cnn">The connection to query on.</param>
            <param name="type">The type to return.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Pure.Data.SqlMapper.QuerySingleOrDefaultAsync(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Pure.Data.IDatabase)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="cnn">The connection to query on.</param>
            <param name="type">The type to return.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="transaction">The transaction to use, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryFirstAsync(System.Data.IDbConnection,System.Type,Pure.Data.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="cnn">The connection to query on.</param>
            <param name="type">The type to return.</param>
            <param name="command">The command used to query on this connection.</param>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryFirstAsync``1(System.Data.IDbConnection,Pure.Data.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="cnn">The connection to query on.</param>
            <param name="command">The command used to query on this connection.</param>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryFirstOrDefaultAsync(System.Data.IDbConnection,System.Type,Pure.Data.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="cnn">The connection to query on.</param>
            <param name="type">The type to return.</param>
            <param name="command">The command used to query on this connection.</param>
        </member>
        <member name="M:Pure.Data.SqlMapper.QueryFirstOrDefaultAsync``1(System.Data.IDbConnection,Pure.Data.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="cnn">The connection to query on.</param>
            <param name="command">The command used to query on this connection.</param>
        </member>
        <member name="M:Pure.Data.SqlMapper.QuerySingleAsync(System.Data.IDbConnection,System.Type,Pure.Data.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="cnn">The connection to query on.</param>
            <param name="type">The type to return.</param>
            <param name="command">The command used to query on this connection.</param>
        </member>
        <member name="M:Pure.Data.SqlMapper.QuerySingleAsync``1(System.Data.IDbConnection,Pure.Data.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="cnn">The connection to query on.</param>
            <param name="command">The command used to query on this connection.</param>
        </member>
        <member name="M:Pure.Data.SqlMapper.QuerySingleOrDefaultAsync(System.Data.IDbConnection,System.Type,Pure.Data.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="cnn">The connection to query on.</param>
            <param name="type">The type to return.</param>
            <param name="command">The command used to query on this connection.</param>
        </member>
        <member name="M:Pure.Data.SqlMapper.QuerySingleOrDefaultAsync``1(System.Data.IDbConnection,Pure.Data.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="cnn">The connection to query on.</param>
            <param name="command">The command used to query on this connection.</param>
        </member>
        <member name="M:Pure.Data.SqlMapper.TryOpenAsync(System.Data.IDbConnection,System.Threading.CancellationToken)">
            <summary>
            Attempts to open a connection asynchronously, with a better error message for unsupported usages.
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMapper.TrySetupAsyncCommand(Pure.Data.CommandDefinition,System.Data.IDbConnection,System.Action{System.Data.IDbCommand,System.Object})">
            <summary>
            Attempts setup a <see cref="T:System.Data.Common.DbCommand"/> on a <see cref="T:System.Data.Common.DbConnection"/>, with a better error message for unsupported usages.
            </summary>
        </member>
        <member name="T:Pure.Data.DynamicParameters">
            <summary>
            A bag of parameters that can be passed to the Dapper Query and Execute methods
            </summary>
        </member>
        <member name="M:Pure.Data.DynamicParameters.#ctor">
            <summary>
            construct a dynamic parameter bag
            </summary>
        </member>
        <member name="M:Pure.Data.DynamicParameters.#ctor(System.Object)">
            <summary>
            construct a dynamic parameter bag
            </summary>
            <param name="template">can be an anonymous type or a DynamicParameters bag</param>
        </member>
        <member name="M:Pure.Data.DynamicParameters.AddDynamicParams(System.Object)">
            <summary>
            Append a whole object full of params to the dynamic
            EG: AddDynamicParams(new {A = 1, B = 2}) // will add property A and B to the dynamic
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:Pure.Data.DynamicParameters.Set(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32})">
            <summary>
            Set a parameter to this dynamic parameter list
            </summary>
        </member>
        <member name="M:Pure.Data.DynamicParameters.Add(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32})">
            <summary>
            Add a parameter to this dynamic parameter list
            </summary>
        </member>
        <member name="M:Pure.Data.DynamicParameters.Add(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
            Add a parameter to this dynamic parameter list
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicParameters.RemoveUnused">
            <summary>
            If true, the command-text is inspected and only values that are clearly used are included on the connection
            </summary>
        </member>
        <member name="M:Pure.Data.DynamicParameters.AddParameters(System.Data.IDbCommand,Pure.Data.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="P:Pure.Data.DynamicParameters.ParameterNames">
            <summary>
            All the names of the param in the bag, use Get to yank them out
            </summary>
        </member>
        <member name="M:Pure.Data.DynamicParameters.Get``1(System.String)">
            <summary>
            Get the value of a parameter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns>The value, note DBNull.Value is not returned, instead the value is returned as null</returns>
        </member>
        <member name="M:Pure.Data.DynamicParameters.Output``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Data.DbType},System.Nullable{System.Int32})">
            <summary>
            Allows you to automatically populate a target property/field from output parameters. It actually
            creates an InputOutput parameter, so you can still pass data in. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The object whose property/field you wish to populate.</param>
            <param name="expression">A MemberExpression targeting a property/field of the target (or descendant thereof.)</param>
            <param name="dbType"></param>
            <param name="size">The size to set on the parameter. Defaults to 0, or DbString.DefaultLength in case of strings.</param>
            <returns>The DynamicParameters instance</returns>
        </member>
        <member name="T:Pure.Data.SqlDataRecordListTVPParameter">
            <summary>
            Used to pass a IEnumerable&lt;SqlDataRecord&gt; as a SqlDataRecordListTVPParameter
            </summary>
        </member>
        <member name="M:Pure.Data.SqlDataRecordListTVPParameter.#ctor(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Server.SqlDataRecord},System.String)">
            <summary>
            Create a new instance of SqlDataRecordListTVPParameter
            </summary>
        </member>
        <member name="T:Pure.Data.TableValuedParameter">
            <summary>
            Used to pass a DataTable as a TableValuedParameter
            </summary>
        </member>
        <member name="M:Pure.Data.TableValuedParameter.#ctor(System.Data.DataTable)">
            <summary>
            Create a new instance of TableValuedParameter
            </summary>
        </member>
        <member name="M:Pure.Data.TableValuedParameter.#ctor(System.Data.DataTable,System.String)">
            <summary>
            Create a new instance of TableValuedParameter
            </summary>
        </member>
        <member name="T:Pure.Data.DbString">
            <summary>
            This class represents a SQL string, it can be used if you need to denote your parameter is a Char vs VarChar vs nVarChar vs nChar
            </summary>
        </member>
        <member name="P:Pure.Data.DbString.IsAnsiDefault">
            <summary>
            Default value for IsAnsi.
            </summary>
        </member>
        <member name="F:Pure.Data.DbString.DefaultLength">
            <summary>
            A value to set the default value of strings
            going through Dapper. Default is 4000, any value larger than this
            field will not have the default value applied.
            </summary>
        </member>
        <member name="M:Pure.Data.DbString.#ctor">
            <summary>
            Create a new DbString
            </summary>
        </member>
        <member name="P:Pure.Data.DbString.IsAnsi">
            <summary>
            Ansi vs Unicode 
            </summary>
        </member>
        <member name="P:Pure.Data.DbString.IsFixedLength">
            <summary>
            Fixed length 
            </summary>
        </member>
        <member name="P:Pure.Data.DbString.Length">
            <summary>
            Length of the string -1 for max
            </summary>
        </member>
        <member name="P:Pure.Data.DbString.Value">
            <summary>
            The value of the string
            </summary>
        </member>
        <member name="M:Pure.Data.DbString.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter to the command... internal use only
            </summary>
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="T:Pure.Data.FeatureSupport">
            <summary>
            Handles variances in features per DBMS
            </summary>
        </member>
        <member name="M:Pure.Data.FeatureSupport.Get(System.Data.IDbConnection)">
            <summary>
            Gets the feature set based on the passed connection
            </summary>
        </member>
        <member name="P:Pure.Data.FeatureSupport.Arrays">
            <summary>
            True if the db supports array columns e.g. Postgresql
            </summary>
        </member>
        <member name="T:Pure.Data.SimpleMemberMap">
            <summary>
            Represents simple member map for one of target parameter or property or field to source DataReader column
            </summary>
        </member>
        <member name="M:Pure.Data.SimpleMemberMap.#ctor(System.String,System.Reflection.PropertyInfo)">
            <summary>
            Creates instance for simple property mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="property">Target property</param>
        </member>
        <member name="M:Pure.Data.SimpleMemberMap.#ctor(System.String,System.Reflection.FieldInfo)">
            <summary>
            Creates instance for simple field mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="field">Target property</param>
        </member>
        <member name="M:Pure.Data.SimpleMemberMap.#ctor(System.String,System.Reflection.ParameterInfo)">
            <summary>
            Creates instance for simple constructor parameter mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="parameter">Target constructor parameter</param>
        </member>
        <member name="P:Pure.Data.SimpleMemberMap.ColumnName">
            <summary>
            DataReader column name
            </summary>
        </member>
        <member name="P:Pure.Data.SimpleMemberMap.MemberType">
            <summary>
            Target member type
            </summary>
        </member>
        <member name="P:Pure.Data.SimpleMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:Pure.Data.SimpleMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:Pure.Data.SimpleMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:Pure.Data.DefaultTypeMap">
            <summary>
            Represents default type mapping strategy used by Dapper
            </summary>
        </member>
        <member name="M:Pure.Data.DefaultTypeMap.#ctor(System.Type)">
            <summary>
            Creates default type map
            </summary>
            <param name="type">Entity type</param>
        </member>
        <member name="M:Pure.Data.DefaultTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:Pure.Data.DefaultTypeMap.FindExplicitConstructor">
            <summary>
            Returns the constructor, if any, that has the ExplicitConstructorAttribute on it.
            </summary>
        </member>
        <member name="M:Pure.Data.DefaultTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:Pure.Data.DefaultTypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="P:Pure.Data.DefaultTypeMap.MatchNamesWithUnderscores">
            <summary>
            Should column names like User_Id be allowed to match properties/fields like UserId ?
            </summary>
        </member>
        <member name="T:Pure.Data.CustomPropertyTypeMap">
            <summary>
            Implements custom property mapping by user provided criteria (usually presence of some custom attribute with column to member mapping)
            </summary>
        </member>
        <member name="M:Pure.Data.CustomPropertyTypeMap.#ctor(System.Type,System.Func{System.Type,System.String,System.Reflection.PropertyInfo})">
            <summary>
            Creates custom property mapping
            </summary>
            <param name="type">Target entity type</param>
            <param name="propertySelector">Property selector based on target type and DataReader column name</param>
        </member>
        <member name="M:Pure.Data.CustomPropertyTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Always returns default constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Default constructor</returns>
        </member>
        <member name="M:Pure.Data.CustomPropertyTypeMap.FindExplicitConstructor">
            <summary>
            Always returns null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.CustomPropertyTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Not implemented as far as default constructor used for all cases
            </summary>
            <param name="constructor"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.CustomPropertyTypeMap.GetMember(System.String)">
            <summary>
            Returns property based on selector strategy
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Poperty member map</returns>
        </member>
        <member name="T:Pure.Data.IWrappedDataReader">
            <summary>
            Describes a reader that controls the lifetime of both a command and a reader,
            exposing the downstream command/reader as properties.
            </summary>
        </member>
        <member name="P:Pure.Data.IWrappedDataReader.Reader">
            <summary>
            Obtain the underlying reader
            </summary>
        </member>
        <member name="P:Pure.Data.IWrappedDataReader.Command">
            <summary>
            Obtain the underlying command
            </summary>
        </member>
        <member name="T:Pure.Data.ExplicitConstructorAttribute">
            <summary>
            Tell Dapper to use an explicit constructor, passing nulls or 0s for all parameters
            </summary>
        </member>
        <member name="F:Pure.Data.DynamicExpresso.AssignmentOperators.None">
            <summary>
            Disable all the assignment operators
            </summary>
        </member>
        <member name="F:Pure.Data.DynamicExpresso.AssignmentOperators.AssignmentEqual">
            <summary>
            Enable the assignment equal operator
            </summary>
        </member>
        <member name="F:Pure.Data.DynamicExpresso.AssignmentOperators.All">
            <summary>
            Enable all assignment operators
            </summary>
        </member>
        <member name="T:Pure.Data.DynamicExpresso.Interpreter">
            <summary>
            Class used to parse and compile a text expression into an Expression or a Delegate that can be invoked. Expression are written using a subset of C# syntax.
            Only get properties, Parse and Eval methods are thread safe.
            </summary>
        </member>
        <member name="M:Pure.Data.DynamicExpresso.Interpreter.#ctor">
            <summary>
            Creates a new Interpreter using InterpreterOptions.Default.
            </summary>
        </member>
        <member name="M:Pure.Data.DynamicExpresso.Interpreter.#ctor(Pure.Data.DynamicExpresso.InterpreterOptions)">
            <summary>
            Creates a new Interpreter using the specified options.
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Interpreter.ReferencedTypes">
            <summary>
            Gets a list of registeres types. Add types by using the Reference method.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Interpreter.Identifiers">
            <summary>
            Gets a list of known identifiers. Add identifiers using SetVariable, SetFunction or SetExpression methods.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Interpreter.AssignmentOperators">
            <summary>
            Gets the available assignment operators.
            </summary>
        </member>
        <member name="M:Pure.Data.DynamicExpresso.Interpreter.EnableAssignment(Pure.Data.DynamicExpresso.AssignmentOperators)">
            <summary>
            Allows to enable/disable assignment operators. 
            For security when expression are generated by the users is more safe to disable assignment operators.
            </summary>
            <param name="assignmentOperators"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DynamicExpresso.Interpreter.EnableReflection">
            <summary>
            Enable reflection expression (like x.GetType().GetMethod() or typeof(double).Assembly) by removing the DisableReflectionVisitor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DynamicExpresso.Interpreter.SetFunction(System.String,System.Delegate)">
            <summary>
            Allow the specified function delegate to be called from a parsed expression.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DynamicExpresso.Interpreter.SetVariable(System.String,System.Object)">
            <summary>
            Allow the specified variable to be used in a parsed expression.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DynamicExpresso.Interpreter.SetVariable(System.String,System.Object,System.Type)">
            <summary>
            Allow the specified variable to be used in a parsed expression.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DynamicExpresso.Interpreter.SetExpression(System.String,System.Linq.Expressions.Expression)">
            <summary>
            Allow the specified Expression to be used in a parsed expression.
            Basically add the specified expression as a known identifier.
            </summary>
            <param name="name"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DynamicExpresso.Interpreter.SetIdentifiers(System.Collections.Generic.IEnumerable{Pure.Data.DynamicExpresso.Identifier})">
            <summary>
            Allow the specified list of identifiers to be used in a parsed expression.
            Basically add the specified expressions as a known identifier.
            </summary>
            <param name="identifiers"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DynamicExpresso.Interpreter.SetIdentifier(Pure.Data.DynamicExpresso.Identifier)">
            <summary>
            Allow the specified identifier to be used in a parsed expression.
            Basically add the specified expression as a known identifier.
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DynamicExpresso.Interpreter.Reference(System.Type)">
            <summary>
            Allow the specified type to be used inside an expression. The type will be available using its name.
            If the type contains method extensions methods they will be available inside expressions.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DynamicExpresso.Interpreter.Reference(System.Collections.Generic.IEnumerable{Pure.Data.DynamicExpresso.ReferenceType})">
            <summary>
            Allow the specified type to be used inside an expression.
            See Reference(Type, string) method.
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DynamicExpresso.Interpreter.Reference(System.Type,System.String)">
            <summary>
            Allow the specified type to be used inside an expression by using a custom alias.
            If the type contains extensions methods they will be available inside expressions.
            </summary>
            <param name="type"></param>
            <param name="typeName">Public name that must be used in the expression.</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DynamicExpresso.Interpreter.Reference(Pure.Data.DynamicExpresso.ReferenceType)">
            <summary>
            Allow the specified type to be used inside an expression by using a custom alias.
            If the type contains extensions methods they will be available inside expressions.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DynamicExpresso.Interpreter.Parse(System.String,Pure.Data.DynamicExpresso.Parameter[])">
            <summary>
            Parse a text expression and returns a Lambda class that can be used to invoke it.
            </summary>
            <param name="expressionText">Expression statement</param>
            <param name="parameters"></param>
            <returns></returns>
            <exception cref="T:Pure.Data.DynamicExpresso.Exceptions.ParseException"></exception>
        </member>
        <member name="M:Pure.Data.DynamicExpresso.Interpreter.Parse(System.String,System.Type,Pure.Data.DynamicExpresso.Parameter[])">
            <summary>
            Parse a text expression and returns a Lambda class that can be used to invoke it.
            If the expression cannot be converted to the type specified in the expressionType parameter
            an exception is throw.
            </summary>
            <param name="expressionText">Expression statement</param>
            <param name="expressionType">The expected return type. Use void or object type if there isn't an expected return type.</param>
            <param name="parameters"></param>
            <returns></returns>
            <exception cref="T:Pure.Data.DynamicExpresso.Exceptions.ParseException"></exception>
        </member>
        <member name="M:Pure.Data.DynamicExpresso.Interpreter.ParseAsDelegate``1(System.String,System.String[])">
            <summary>
            Parse a text expression and convert it into a delegate.
            </summary>
            <typeparam name="TDelegate">Delegate to use</typeparam>
            <param name="expressionText">Expression statement</param>
            <param name="parametersNames">Names of the parameters. If not specified the parameters names defined inside the delegate are used.</param>
            <returns></returns>
            <exception cref="T:Pure.Data.DynamicExpresso.Exceptions.ParseException"></exception>
        </member>
        <member name="M:Pure.Data.DynamicExpresso.Interpreter.ParseAsExpression``1(System.String,System.String[])">
            <summary>
            Parse a text expression and convert it into a lambda expression.
            </summary>
            <typeparam name="TDelegate">Delegate to use</typeparam>
            <param name="expressionText">Expression statement</param>
            <param name="parametersNames">Names of the parameters. If not specified the parameters names defined inside the delegate are used.</param>
            <returns></returns>
            <exception cref="T:Pure.Data.DynamicExpresso.Exceptions.ParseException"></exception>
        </member>
        <member name="M:Pure.Data.DynamicExpresso.Interpreter.Eval(System.String,Pure.Data.DynamicExpresso.Parameter[])">
            <summary>
            Parse and invoke the specified expression.
            </summary>
            <param name="expressionText"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DynamicExpresso.Interpreter.Eval``1(System.String,Pure.Data.DynamicExpresso.Parameter[])">
            <summary>
            Parse and invoke the specified expression.
            </summary>
            <param name="expressionText"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DynamicExpresso.Interpreter.Eval(System.String,System.Type,Pure.Data.DynamicExpresso.Parameter[])">
            <summary>
            Parse and invoke the specified expression.
            </summary>
            <param name="expressionText"></param>
            <param name="expressionType">The return type of the expression. Use void or object if you don't know the expected return type.</param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="F:Pure.Data.DynamicExpresso.InterpreterOptions.PrimitiveTypes">
            <summary>
            Load primitive types like 'string', 'double', 'int', 'DateTime', 'Guid', ... See also LanguageConstants.CSharpPrimitiveTypes and LanguageConstants.PrimitiveTypes
            </summary>
        </member>
        <member name="F:Pure.Data.DynamicExpresso.InterpreterOptions.SystemKeywords">
            <summary>
            Load system keywords like 'true', 'false', 'null'. See also LanguageConstants.Literals.
            </summary>
        </member>
        <member name="F:Pure.Data.DynamicExpresso.InterpreterOptions.CommonTypes">
            <summary>
            Load common types like 'System.Math', 'System.Convert', 'System.Linq.Enumerable'. See also LanguageConstants.CommonTypes.
            </summary>
        </member>
        <member name="F:Pure.Data.DynamicExpresso.InterpreterOptions.CaseInsensitive">
            <summary>
            Variables and parameters names are case insensitive.
            </summary>
        </member>
        <member name="F:Pure.Data.DynamicExpresso.InterpreterOptions.Default">
            <summary>
            Load all default configurations: PrimitiveTypes + SystemKeywords + CommonTypes
            </summary>
        </member>
        <member name="F:Pure.Data.DynamicExpresso.InterpreterOptions.DefaultCaseInsensitive">
            <summary>
            Load all default configurations: PrimitiveTypes + SystemKeywords + CommonTypes + CaseInsensitive
            </summary>
        </member>
        <member name="T:Pure.Data.DynamicExpresso.Lambda">
            <summary>
            Represents a lambda expression that can be invoked. This class is thread safe.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Lambda.Parameters">
            <summary>
            Gets the parameters actually used in the expression parsed.
            </summary>
            <value>The used parameters.</value>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Lambda.UsedParameters">
            <summary>
            Gets the parameters actually used in the expression parsed.
            </summary>
            <value>The used parameters.</value>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Lambda.DeclaredParameters">
            <summary>
            Gets the parameters declared when parsing the expression.
            </summary>
            <value>The declared parameters.</value>
        </member>
        <member name="M:Pure.Data.DynamicExpresso.Lambda.Invoke(System.Object[])">
            <summary>
            Invoke the expression with the given parameters values.
            </summary>
            <param name="args">Order of parameters must be the same of the parameters used during parse (DeclaredParameters).</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DynamicExpresso.Lambda.Compile``1">
            <summary>
            Generate the given delegate by compiling the lambda expression.
            </summary>
            <typeparam name="TDelegate">The delegate to generate. Delegate parameters must match the one defined when creating the expression, see UsedParameters.</typeparam>
        </member>
        <member name="M:Pure.Data.DynamicExpresso.Lambda.LambdaExpression``1">
            <summary>
            Generate a lambda expression.
            </summary>
            <returns>The lambda expression.</returns>
            <typeparam name="TDelegate">The delegate to generate. Delegate parameters must match the one defined when creating the expression, see UsedParameters.</typeparam>
        </member>
        <member name="F:Pure.Data.DynamicExpresso.LanguageConstants.CSharpPrimitiveTypes">
            <summary>
            Primitive types alias (string, int, ...)
            </summary>
        </member>
        <member name="F:Pure.Data.DynamicExpresso.LanguageConstants.CommonTypes">
            <summary>
            Common .NET Types (Math, Convert, Enumerable)
            </summary>
        </member>
        <member name="F:Pure.Data.DynamicExpresso.LanguageConstants.Literals">
            <summary>
            true, false, null
            </summary>
        </member>
        <member name="T:Pure.Data.DynamicExpresso.Parameter">
            <summary>
            An expression parameter. This class is thread safe.
            </summary>
        </member>
        <member name="M:Pure.Data.DynamicExpresso.ParserArguments.TryGetParameters(System.String,System.Linq.Expressions.ParameterExpression@)">
            <summary>
            Get the parameter and mark is as used.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.ReferenceType.Name">
            <summary>
            Public name that must be used in the expression.
            </summary>
        </member>
        <member name="T:Pure.Data.DynamicExpresso.Resources.ErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.AmbiguousIndexerInvocation">
            <summary>
              Looks up a localized string similar to Ambiguous invocation of indexer in type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.AmbiguousMethodInvocation">
            <summary>
              Looks up a localized string similar to Ambiguous invocation of method &apos;{0}&apos; in type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.ArgsIncompatibleWithDelegate">
            <summary>
              Looks up a localized string similar to Argument list incompatible with delegate expression.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.ArgsIncompatibleWithLambda">
            <summary>
              Looks up a localized string similar to Argument list incompatible with lambda expression.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.BothTypesConvertToOther">
            <summary>
              Looks up a localized string similar to Both of the types &apos;{0}&apos; and &apos;{1}&apos; convert to the other.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.CannotConvertValue">
            <summary>
              Looks up a localized string similar to A value of type &apos;{0}&apos; cannot be converted to type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.CloseBracketOrCommaExpected">
            <summary>
              Looks up a localized string similar to &apos;]&apos; or &apos;,&apos; expected.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.CloseParenOrCommaExpected">
            <summary>
              Looks up a localized string similar to &apos;)&apos; or &apos;,&apos; expected.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.CloseParenOrOperatorExpected">
            <summary>
              Looks up a localized string similar to &apos;)&apos; or operator expected.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.ColonExpected">
            <summary>
              Looks up a localized string similar to &apos;:&apos; expected.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.DigitExpected">
            <summary>
              Looks up a localized string similar to Digit expected.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.DotOrOpenParenExpected">
            <summary>
              Looks up a localized string similar to &apos;.&apos; or &apos;(&apos; expected.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.ExpressionExpected">
            <summary>
              Looks up a localized string similar to Expression expected.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.ExpressionMustBeWritable">
            <summary>
              Looks up a localized string similar to Expression must be writable.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.FirstExprMustBeBool">
            <summary>
              Looks up a localized string similar to The first expression must be of type &apos;Boolean&apos;.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.Format">
            <summary>
              Looks up a localized string similar to {0} (at index {1})..
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.IdentifierExpected">
            <summary>
              Looks up a localized string similar to Identifier expected.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.IncompatibleOperand">
            <summary>
              Looks up a localized string similar to Operator &apos;{0}&apos; incompatible with operand type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.IncompatibleOperands">
            <summary>
              Looks up a localized string similar to Operator &apos;{0}&apos; incompatible with operand types &apos;{1}&apos; and &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.IncorrectNumberOfIndexes">
            <summary>
              Looks up a localized string similar to Incorrect number of indexes.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.InvalidCharacter">
            <summary>
              Looks up a localized string similar to Syntax error &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.InvalidCharacterLiteral">
            <summary>
              Looks up a localized string similar to Character literal must contain exactly one character.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.InvalidEscapeSequence">
            <summary>
              Looks up a localized string similar to Invalid character escape sequence.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.InvalidIndex">
            <summary>
              Looks up a localized string similar to Array index must be an integer expression.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.InvalidIntegerLiteral">
            <summary>
              Looks up a localized string similar to Invalid integer literal &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.InvalidMethodCall">
            <summary>
              Looks up a localized string similar to No applicable method exists in type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.InvalidRealLiteral">
            <summary>
              Looks up a localized string similar to Invalid real literal &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.NeitherTypeConvertsToOther">
            <summary>
              Looks up a localized string similar to Neither of the types &apos;{0}&apos; and &apos;{1}&apos; converts to the other.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.NoApplicableConstructor">
            <summary>
              Looks up a localized string similar to No applicable constructor exists in type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.NoApplicableIndexer">
            <summary>
              Looks up a localized string similar to No applicable indexer exists in type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.OpenParenExpected">
            <summary>
              Looks up a localized string similar to &apos;(&apos; expected.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.SyntaxError">
            <summary>
              Looks up a localized string similar to Syntax error.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.TypeHasNoNullableForm">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; has no nullable form.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.TypeIdentifierExpected">
            <summary>
              Looks up a localized string similar to Type identifier expected.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.TypeofRequiresAType">
            <summary>
              Looks up a localized string similar to The &apos;typeof&apos; keyword requires a type as an argument.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.TypeofRequiresOneArg">
            <summary>
              Looks up a localized string similar to The &apos;typeof&apos; keyword requires 1 argument.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.UnknownPropertyOrField">
            <summary>
              Looks up a localized string similar to No property or field &apos;{0}&apos; exists in type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Pure.Data.DynamicExpresso.Resources.ErrorMessages.UnterminatedStringLiteral">
            <summary>
              Looks up a localized string similar to Unterminated string literal.
            </summary>
        </member>
        <member name="M:Pure.Data.FluentExpressionSQLEx.DiffYears(System.DateTime,System.DateTime)">
            <summary>
            计算两个日期的年差
            </summary>
            <param name="dateTime1"></param>
            <param name="dateTime2"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.FluentExpressionSQLEx.DiffMonths(System.DateTime,System.DateTime)">
            <summary>
            计算两个日期的月差
            </summary>
            <param name="dateTime1"></param>
            <param name="dateTime2"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.FluentExpressionSQLEx.DiffDays(System.DateTime,System.DateTime)">
            <summary>
            计算两个日期的日差
            </summary>
            <param name="dateTime1"></param>
            <param name="dateTime2"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.FluentExpressionSQLEx.DiffHours(System.DateTime,System.DateTime)">
            <summary>
            计算两个日期的时差
            </summary>
            <param name="dateTime1"></param>
            <param name="dateTime2"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.FluentExpressionSQLEx.DiffMinutes(System.DateTime,System.DateTime)">
            <summary>
            计算两个日期的分差
            </summary>
            <param name="dateTime1"></param>
            <param name="dateTime2"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.FluentExpressionSQLEx.DiffSeconds(System.DateTime,System.DateTime)">
            <summary>
            计算两个日期的秒差
            </summary>
            <param name="dateTime1"></param>
            <param name="dateTime2"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.FluentExpressionSQLEx.DiffMilliseconds(System.DateTime,System.DateTime)">
            <summary>
            计算两个日期的毫秒差
            </summary>
            <param name="dateTime1"></param>
            <param name="dateTime2"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.FluentExpressionSQLEx.DiffMicroseconds(System.DateTime,System.DateTime)">
            <summary>
            计算两个日期的微秒差
            </summary>
            <param name="dateTime1"></param>
            <param name="dateTime2"></param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.SqlFuncs">
            <summary>
            Sql 通用转换函数, 不产生结果，仅用于SQL转换
            </summary>
        </member>
        <member name="M:Pure.Data.SqlFuncs.Rand">
            <summary>
            产生随机数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlFuncs.Mod(System.Decimal,System.Decimal)">
            <summary>
            求余函数
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlFuncs.Mod(System.Int32,System.Int32)">
            <summary>
            求余函数
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlFuncs.Mod(System.Double,System.Double)">
            <summary>
            求余函数
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlFuncs.LikeLeft(System.Object,System.String)">
            <summary>
            like '% _ _ _'
            </summary>
        </member>
        <member name="M:Pure.Data.SqlFuncs.LikeRight(System.Object,System.String)">
            <summary>
            like '_ _ _ %'
            </summary>
        </member>
        <member name="M:Pure.Data.SqlFuncs.LikeLeftNot(System.Object,System.String)">
            <summary>
            like '% _ _ _'
            </summary>
        </member>
        <member name="M:Pure.Data.SqlFuncs.LikeRightNot(System.Object,System.String)">
            <summary>
            like '_ _ _ %'
            </summary>
        </member>
        <member name="T:Pure.Data.i18n.Messages">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.asciicoding_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; must be non-chinese string. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.CreditCardError">
            <summary>
              查找类似 &apos;{PropertyName}&apos; is not a valid credit card number. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.creditcode_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; is not a valid china credit code. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.date_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; is not a valid date format &apos;yyyy-MM-dd&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.domain_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; is not a valid domain . 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.email_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; is not a valid email address. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.empty_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; should be empty. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.enum_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; has a range of values which does not include &apos;{PropertyValue}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.equal_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; should be equal to &apos;{ComparisonValue}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.exact_length_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; must be {MaxLength} characters in length. You entered {TotalLength} characters. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.exclusivebetween_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; must be between {From} and {To} (exclusive). You entered {Value}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.greaterthan_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; must be greater than &apos;{ComparisonValue}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.greaterthanorequal_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; must be greater than or equal to &apos;{ComparisonValue}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.idcard_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; is not a valid china ID Card number. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.stringsafety_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; is not a valid china ID Card number. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.inclusivebetween_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; must be between {From} and {To}. You entered {Value}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.ipmask_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; is not a valid ip mask. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.ipv4_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; is not a valid ip-v4. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.ipv6_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; is not a valid ip-v6. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.length_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; must be between {MinLength} and {MaxLength} characters. You entered {TotalLength} characters. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.lessthan_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; must be less than &apos;{ComparisonValue}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.lessthanorequal_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; must be less than or equal to &apos;{ComparisonValue}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.mobile_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; is not a valid china mobile number. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.notempty_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; should not be empty. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.notequal_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; should not be equal to &apos;{ComparisonValue}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.notnull_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; must not be empty. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.null_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; must be empty. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.orgcode_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; is not a valid china orgcode. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.password_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; must start with a letter, the length of 6 to 18, can only contain letters, numbers and underscores. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.predicate_error">
            <summary>
              查找类似 The specified condition was not met for &apos;{PropertyName}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.qqnumber_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos;  is not a valid china qq number. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.regex_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; is not in the correct format. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.scale_precision_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; may not be more than {expectedPrecision} digits in total, with allowance for {expectedScale} decimals. {digits} digits and {actualScale} decimals were found. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.stronggpassword_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; must contain numbers, must contain lowercase or uppercase letters, must contain special symbols, at least 8 characters, and up to 30 characters. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.telphone_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; is not a valid china telphone number. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.time_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; is not a valid time format &apos;HH:mm:ss&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.unicodecoding_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; must be chinese string. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.username_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; must start with a letter, including letters, numbers, or underscores. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.website_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; is not a valid website url. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Pure.Data.i18n.Messages.zipcode_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; is not a valid zipcode. 的本地化字符串。
            </summary>
        </member>
        <member name="T:Pure.Data.Ascii85Guid">
            <summary>
            生成GUID的20个字节 
            </summary>
        </member>
        <member name="M:Pure.Data.Ascii85Guid.NewIdString">
            <summary> 
            保留GUID的20个字节(Create sequential guids to be used as keys encoding them as Ascii85 to produce 20 byte strings (smaller))。
            </summary> 
        </member>
        <member name="T:Pure.Data.Ascii85">
            <summary>
            C# implementation of ASCII85 encoding. 
            Based on C code from http://www.stillhq.com/cgi-bin/cvsweb/ascii85/
            </summary>
            <remarks>
            Jeff Atwood
            http://www.codinghorror.com/blog/archives/000410.html
            </remarks>
        </member>
        <!-- 对于成员“F:Pure.Data.Ascii85.PrefixMark”忽略有格式错误的 XML 注释 -->
        <member name="F:Pure.Data.Ascii85.SuffixMark">
            <summary>
            Suffix mark that identifies an encoded ASCII85 string, traditionally '~>'
            </summary>
        </member>
        <member name="F:Pure.Data.Ascii85.LineLength">
            <summary>
            Maximum line length for encoded ASCII85 string; 
            set to zero for one unbroken line.
            </summary>
        </member>
        <member name="F:Pure.Data.Ascii85.EnforceMarks">
            <summary>
            Add the Prefix and Suffix marks when encoding, and enforce their presence for decoding
            </summary>
        </member>
        <member name="M:Pure.Data.Ascii85.Decode(System.String)">
            <summary>
            Decodes an ASCII85 encoded string into the original binary data
            </summary>
            <param name="s">ASCII85 encoded string</param>
            <returns>byte array of decoded binary data</returns>
        </member>
        <member name="M:Pure.Data.Ascii85.Encode(System.Byte[])">
            <summary>
            Encodes binary data into a plaintext ASCII85 format string
            </summary>
            <param name="ba">binary data to encode</param>
            <returns>ASCII85 encoded string</returns>
        </member>
        <member name="T:Pure.Data.CombGuid">
            <summary>
            CombGuid 
            </summary>
        </member>
        <member name="M:Pure.Data.CombGuid.NewGuidComb">
            <summary> 
            保留GUID的10个字节，用另6个字节表示GUID生成的时间（DateTime）。
            </summary> 
        </member>
        <member name="T:Pure.Data.Hilo.EntityConfiguration">
            <summary>
            实体配置
            </summary>
        </member>
        <member name="P:Pure.Data.Hilo.EntityConfiguration.Name">
            <summary>
            实体名称
            </summary>
        </member>
        <member name="P:Pure.Data.Hilo.EntityConfiguration.MaxLo">
            <summary>
            最大Hilo长度
            </summary>
        </member>
        <member name="T:Pure.Data.Hilo.HiLoConfiguration">
            <summary>
            Hilo生成配置
            </summary>
        </member>
        <member name="P:Pure.Data.Hilo.HiLoConfiguration.CreateHiLoStructureIfNotExists">
            <summary>
            如果不存在hilo表是否创建表
            </summary>
        </member>
        <member name="P:Pure.Data.Hilo.HiLoConfiguration.DefaultMaxLo">
            <summary>
            默认Hilo生成存储长度
            </summary>
        </member>
        <member name="M:Pure.Data.Hilo.HiLoConfiguration.GetEntityConfig(System.String)">
            <summary>
            获取实体配置
            </summary>
            <param name="entityName"></param>
            <returns></returns>
        </member>
        <member name="P:Pure.Data.Hilo.HiLoConfiguration.Entities">
            <summary>
            实体配置信息集合
            </summary>
        </member>
        <member name="P:Pure.Data.Hilo.HiLoConfiguration.TableName">
            <summary>
            Hilo表名
            </summary>
        </member>
        <member name="P:Pure.Data.Hilo.HiLoConfiguration.NextHiColumnName">
            <summary>
            Hilo值列名
            </summary>
        </member>
        <member name="P:Pure.Data.Hilo.HiLoConfiguration.EntityColumnName">
            <summary>
            Hilo键列名
            </summary>
        </member>
        <member name="P:Pure.Data.Hilo.HiLoConfiguration.StorageType">
            <summary>
            Hilo存储类型
            </summary>
        </member>
        <member name="P:Pure.Data.Hilo.HiLoConfiguration.ObjectPrefix">
            <summary>
            序列号前缀
            </summary>
        </member>
        <member name="T:Pure.Data.Hilo.IHiLoConfiguration">
            <summary>
            Contract for a objetc that holds all configuration needed by NHiLo to work.
            </summary>
        </member>
        <member name="T:Pure.Data.Hilo.HiLoGenerator">
            <summary>
            Generates a new key based on HiLo algorithm.
            </summary>
        </member>
        <member name="M:Pure.Data.Hilo.HiLoGenerator.#ctor(Pure.Data.Hilo.IHiLoRepository,System.Int32)">
            <summary>
            Constructor of the class.
            </summary>
            <param name="repository">An implementation of the repository used to keep the high values.</param>
            <param name="maxLo">The value used as the low part of the key.</param>
        </member>
        <member name="M:Pure.Data.Hilo.HiLoGenerator.GetKey">
            <summary>
            Get as unique value to be used as a primary key.
            </summary>
            <returns>Unique long value.</returns>
        </member>
        <member name="T:Pure.Data.Hilo.HiLoGeneratorFactory">
            <summary>
            Factory that creates <see cref="!:IKeyGeneratorFactory"/> for client usage.
            </summary>
        </member>
        <member name="M:Pure.Data.Hilo.HiLoGeneratorFactory.GetKeyGenerator(System.String)">
            <summary>
            获取Hilo生成器
            </summary>
            <param name="entityName"></param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.Hilo.HiLoStorageType">
            <summary>
            存储类型
            </summary>
            <remarks>No all DBMS can implement all these storage types.</remarks>
        </member>
        <member name="F:Pure.Data.Hilo.HiLoStorageType.Table">
            <summary>
            存储在数据表中
            </summary>
        </member>
        <member name="F:Pure.Data.Hilo.HiLoStorageType.Sequence">
            <summary>
            存储在序列中，如（oracle）
            </summary>
        </member>
        <member name="M:Pure.Data.Hilo.IKeyGenerator`1.GetKey">
            <summary>
            生成Hilo值
            </summary>
            <returns>An unique key.</returns>
        </member>
        <member name="T:Pure.Data.Hilo.IKeyGeneratorFactory`1">
            <summary>
            Represents the contract used to create objects that generate keys.
            </summary>
            <typeparam name="T">The type of the key (long, string, etc).</typeparam>
        </member>
        <member name="M:Pure.Data.Hilo.IKeyGeneratorFactory`1.GetKeyGenerator(System.String)">
            <summary>
            Returns the object that produces new key values.
            </summary>
            <param name="entityName">The name of the entity you'll get the key value for. Must only contains letters and numbers, starting with a letter. Can't have its length more than 100 characters.</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Hilo.KeyGeneratorExtensions.GetKeyAsInt(Pure.Data.Hilo.IKeyGenerator{System.Int64})">
            <summary>
            Returns the unique value as a int value.
            </summary>
            <param name="generator">An object that produces new key values.</param>
            <returns>Unique int value.</returns>
        </member>
        <member name="T:Pure.Data.Hilo.AgnosticHiLoRepository">
            <summary>
            A base repository that allows the creation of DBMS NHilo repositories.
            </summary>
        </member>
        <member name="M:Pure.Data.Hilo.AgnosticHiLoRepository.PrepareSqlStatement(System.String,Pure.Data.Hilo.IHiLoConfiguration)">
            <summary>
            Prepare the SQL statement provided these information:
            {0} - table name
            {1} - nexthi column name
            {2} - entity column name
            {3} - parameter name
            </summary>
            <param name="rawStatement">The SQL statement which will be filled with custom information.</param>
            <param name="config">Object that holds the database information.</param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.Hilo.HiLoRepositoryFactory">
            <summary>
            Factory that creates repositories based on the provider specified in the connection string configuration.
            </summary>
        </member>
        <member name="F:Pure.Data.Hilo.HiLoRepositoryFactory._factoryFunction">
            <summary>
            Relates each kind of provider to a function that actually creates the correct repository. If a new provider is add, this constant should change.
            </summary>
        </member>
        <member name="T:Pure.Data.Hilo.SqlServerCeHiLoRepository">
            <summary>
            NHilo's repository implementation for Microsoft SQL Server CE.
            </summary>
        </member>
        <member name="T:Pure.Data.Hilo.SqlServerHiLoRepository">
            <summary>
            NHilo's repository implementation for Microsoft SQL Server.
            </summary>
        </member>
        <member name="T:Pure.Data.Hilo.SqlServerSequenceHiLoRepository">
            <summary>
            NHilo's repository implementation for Microsoft SQL Server.
            </summary>
        </member>
        <member name="T:Pure.Data.IdGenerateManager">
            <summary>
            ID管理器
            </summary>
        </member>
        <member name="T:Pure.Data.Configuration.IdGeneratorElement">
            <summary>
            Represents an IdGenerator configuration element. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Pure.Data.Configuration.IdGeneratorElement.Name">
            <summary>
            Gets/sets the name of the <see cref="T:Pure.Data.Configuration.IdGeneratorElement"/>.
            </summary>
        </member>
        <member name="P:Pure.Data.Configuration.IdGeneratorElement.Id">
            <summary>
            Gets/sets the GeneratorId of the <see cref="T:Pure.Data.Configuration.IdGeneratorElement"/>.
            </summary>
        </member>
        <member name="P:Pure.Data.Configuration.IdGeneratorElement.Epoch">
            <summary>
            Gets/sets the Epoch of the <see cref="T:Pure.Data.Configuration.IdGeneratorElement"/>.
            </summary>
        </member>
        <member name="P:Pure.Data.Configuration.IdGeneratorElement.TimestampBits">
            <summary>
            Gets/sets the <see cref="P:Pure.Data.MaskConfig.TimestampBits"/> of the <see cref="T:Pure.Data.Configuration.IdGeneratorElement"/>.
            </summary>
        </member>
        <member name="P:Pure.Data.Configuration.IdGeneratorElement.GeneratorIdBits">
            <summary>
            Gets/sets the <see cref="P:Pure.Data.MaskConfig.GeneratorIdBits"/> of the <see cref="T:Pure.Data.Configuration.IdGeneratorElement"/>.
            </summary>
        </member>
        <member name="P:Pure.Data.Configuration.IdGeneratorElement.SequenceBits">
            <summary>
            Gets/sets the <see cref="P:Pure.Data.MaskConfig.SequenceBits"/> of the <see cref="T:Pure.Data.Configuration.IdGeneratorElement"/>.
            </summary>
        </member>
        <member name="P:Pure.Data.Configuration.IdGeneratorElement.TickDuration">
            <summary>
            Gets/sets the <see cref="P:Pure.Data.ITimeSource.TickDuration"/> of the <see cref="T:Pure.Data.Configuration.IdGeneratorElement"/>.
            </summary>
        </member>
        <member name="T:Pure.Data.Configuration.IdGeneratorsCollection">
            <summary>
            Represents a IdGenerators configuration element containing a collection of child elements.
            </summary>
        </member>
        <member name="M:Pure.Data.Configuration.IdGeneratorsCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:Pure.Data.Configuration.IdGeneratorElement"/>.
            </summary>
            <returns>A newly created <see cref="T:Pure.Data.Configuration.IdGeneratorElement"/>.</returns>
        </member>
        <member name="M:Pure.Data.Configuration.IdGeneratorsCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified <see cref="T:Pure.Data.Configuration.IdGeneratorElement"/>.
            </summary>
            <param name="element">The <see cref="T:Pure.Data.Configuration.IdGeneratorElement"/> to return the key for.</param>
            <returns>An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:Pure.Data.Configuration.IdGeneratorElement"/>.</returns>
        </member>
        <member name="T:Pure.Data.Configuration.IdGeneratorsSection">
            <summary>
            Represents an IdGenerators section within a configuration file.
            </summary>
        </member>
        <member name="F:Pure.Data.Configuration.IdGeneratorsSection.SectionName">
            <summary>
            The default name of the section.
            </summary>
        </member>
        <member name="F:Pure.Data.Configuration.IdGeneratorsSection.IdGensCollectionName">
            <summary>
            The default name of the collection.
            </summary>
        </member>
        <member name="P:Pure.Data.Configuration.IdGeneratorsSection.IdGenerators">
            <summary>
            Gets an <see cref="T:Pure.Data.Configuration.IdGeneratorsCollection"/> of all the <see cref="T:Pure.Data.Configuration.IdGeneratorElement"/> objects in all
            participating configuration files.
            </summary>
        </member>
        <member name="T:Pure.Data.DefaultTimeSource">
            <summary>
            Provides time data to an <see cref="T:Pure.Data.IdGenerator"/>.
            </summary>
            <remarks>
            Unless specified the default duration of a tick for a <see cref="T:Pure.Data.DefaultTimeSource"/> is 1 millisecond.
            </remarks>
        </member>
        <member name="M:Pure.Data.DefaultTimeSource.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new <see cref="T:Pure.Data.DefaultTimeSource"/> object.
            </summary>
            <param name="epoch">The epoch to use as an offset from now.</param>
            <remarks>The default tickduration is 1 millisecond.</remarks>
        </member>
        <member name="M:Pure.Data.DefaultTimeSource.#ctor(System.DateTimeOffset,System.TimeSpan)">
            <summary>
            Initializes a new <see cref="T:Pure.Data.DefaultTimeSource"/> object.
            </summary>
            <param name="epoch">The epoch to use as an offset from now,</param>
            <param name="tickDuration">The duration of a tick for this timesource.</param>
        </member>
        <member name="M:Pure.Data.DefaultTimeSource.GetTicks">
            <summary>
            Returns the current number of ticks for the <see cref="T:Pure.Data.DefaultTimeSource"/>.
            </summary>
            <returns>The current number of ticks to be used by an <see cref="T:Pure.Data.IdGenerator"/> when creating an Id.</returns>
            <remarks>
            Note that a 'tick' is a period defined by the timesource; this may be any valid <see cref="T:System.TimeSpan"/>; be
            it a millisecond, an hour, 2.5 seconds or any other value.
            </remarks>
        </member>
        <member name="T:Pure.Data.IdGenerator">
            <summary>
            Generates Id's inspired by Twitter's (late) Snowflake project.
            </summary>
        </member>
        <member name="F:Pure.Data.IdGenerator.DefaultEpoch">
            <summary>
            Returns the default epoch.
            </summary>
        </member>
        <member name="P:Pure.Data.IdGenerator.Id">
            <summary>
            Gets the Id of the generator.
            </summary>
        </member>
        <member name="P:Pure.Data.IdGenerator.Epoch">
            <summary>
            Gets the epoch for the <see cref="T:Pure.Data.IdGenerator"/>.
            </summary>
        </member>
        <member name="P:Pure.Data.IdGenerator.MaskConfig">
            <summary>
            Gets the <see cref="P:Pure.Data.IdGenerator.MaskConfig"/> for the <see cref="T:Pure.Data.IdGenerator"/>.
            </summary>
        </member>
        <member name="P:Pure.Data.IdGenerator.TimeSource">
            <summary>
            Gets the <see cref="T:Pure.Data.ITimeSource"/> for the <see cref="T:Pure.Data.IdGenerator"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.IdGenerator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Pure.Data.IdGenerator"/> class, 2015-01-01 0:00:00Z is used as default 
            epoch and the <see cref="P:IdGen.MaskConfig.Default"/> value is used for the <see cref="P:Pure.Data.IdGenerator.MaskConfig"/>. The
            <see cref="T:Pure.Data.DefaultTimeSource"/> is used to retrieve timestamp information.
            </summary>
            <param name="generatorId">The Id of the generator.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when GeneratorId exceeds maximum value.</exception>
        </member>
        <member name="M:Pure.Data.IdGenerator.#ctor(System.Int32,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Pure.Data.IdGenerator"/> class. The <see cref="P:IdGen.MaskConfig.Default"/> 
            value is used for the <see cref="P:Pure.Data.IdGenerator.MaskConfig"/>.  The <see cref="T:Pure.Data.DefaultTimeSource"/> is used to retrieve
            timestamp information.
            </summary>
            <param name="generatorId">The Id of the generator.</param>
            <param name="epoch">The Epoch of the generator.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when GeneratorId exceeds maximum value or epoch in future.
            </exception>
        </member>
        <member name="M:Pure.Data.IdGenerator.#ctor(System.Int32,Pure.Data.MaskConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Pure.Data.IdGenerator"/> class.  The <see cref="T:Pure.Data.DefaultTimeSource"/> is
            used to retrieve timestamp information.
            </summary>
            <param name="generatorId">The Id of the generator.</param>
            <param name="maskConfig">The <see cref="P:Pure.Data.IdGenerator.MaskConfig"/> of the generator.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when maskConfig is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when maskConfig defines a non-63 bit bitmask.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when GeneratorId or Sequence masks are >31 bit, GeneratorId exceeds maximum value or epoch in future.
            </exception>
        </member>
        <member name="M:Pure.Data.IdGenerator.#ctor(System.Int32,System.DateTimeOffset,Pure.Data.MaskConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:Pure.Data.IdGenerator"/> class.  The <see cref="T:Pure.Data.DefaultTimeSource"/> is
            used to retrieve timestamp information.
            </summary>
            <param name="generatorId">The Id of the generator.</param>
            <param name="epoch">The Epoch of the generator.</param>
            <param name="maskConfig">The <see cref="P:Pure.Data.IdGenerator.MaskConfig"/> of the generator.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when maskConfig is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when maskConfig defines a non-63 bit bitmask.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when GeneratorId or Sequence masks are >31 bit, GeneratorId exceeds maximum value or epoch in future.
            </exception>
        </member>
        <member name="M:Pure.Data.IdGenerator.#ctor(System.Int32,Pure.Data.ITimeSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Pure.Data.IdGenerator"/> class.
            </summary>
            <param name="generatorId">The Id of the generator.</param>
            <param name="timeSource">The time-source to use when acquiring time data.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when either maskConfig or timeSource is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when maskConfig defines a non-63 bit bitmask.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when GeneratorId or Sequence masks are >31 bit, GeneratorId exceeds maximum value or epoch in future.
            </exception>
        </member>
        <member name="M:Pure.Data.IdGenerator.#ctor(System.Int32,Pure.Data.MaskConfig,Pure.Data.ITimeSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Pure.Data.IdGenerator"/> class.
            </summary>
            <param name="generatorId">The Id of the generator.</param>
            <param name="maskConfig">The <see cref="P:Pure.Data.IdGenerator.MaskConfig"/> of the generator.</param>
            <param name="timeSource">The time-source to use when acquiring time data.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when either maskConfig or timeSource is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when maskConfig defines a non-63 bit bitmask.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when GeneratorId or Sequence masks are >31 bit, GeneratorId exceeds maximum value or epoch in future.
            </exception>
        </member>
        <member name="M:Pure.Data.IdGenerator.CreateId">
            <summary>
            Creates a new Id.
            </summary>
            <returns>Returns an Id based on the <see cref="T:Pure.Data.IdGenerator"/>'s epoch, generatorid and sequence.</returns>
            <exception cref="T:Pure.Data.InvalidSystemClockException">Thrown when clock going backwards is detected.</exception>
            <exception cref="T:Pure.Data.SequenceOverflowException">Thrown when sequence overflows.</exception>
        </member>
        <member name="M:Pure.Data.IdGenerator.GetFromConfig(System.String)">
            <summary>
            Returns an instance of an <see cref="T:Pure.Data.IdGenerator"/> based on the values in the corresponding idGenerator
            element in the idGenSection of the configuration file. The <see cref="T:Pure.Data.DefaultTimeSource"/> is used to
            retrieve timestamp information.
            </summary>
            <param name="name">The name of the <see cref="T:Pure.Data.IdGenerator"/> in the idGenSection.</param>
            <returns>An instance of an <see cref="T:Pure.Data.IdGenerator"/> based on the values in the corresponding idGenerator
            element in the idGenSection of the configuration file.</returns>
            <remarks>
            When the <see cref="T:Pure.Data.IdGenerator"/> doesn't exist it is created; any consequent calls to this method with
            the same name will return the same instance.
            </remarks>
        </member>
        <member name="M:Pure.Data.IdGenerator.GetTicks">
            <summary>
            Gets the number of ticks since the <see cref="T:Pure.Data.ITimeSource"/>'s epoch.
            </summary>
            <returns>Returns the number of ticks since the <see cref="T:Pure.Data.ITimeSource"/>'s epoch.</returns>
        </member>
        <member name="M:Pure.Data.IdGenerator.GetMask(System.Byte)">
            <summary>
            Returns a bitmask masking out the desired number of bits; a bitmask of 2 returns 000...000011, a bitmask of
            5 returns 000...011111.
            </summary>
            <param name="bits">The number of bits to mask.</param>
            <returns>Returns the desired bitmask.</returns>
        </member>
        <member name="M:Pure.Data.IdGenerator.IdStream">
            <summary>
            Returns a 'never ending' stream of Id's.
            </summary>
            <returns>A 'never ending' stream of Id's.</returns>
        </member>
        <member name="M:Pure.Data.IdGenerator.GetEnumerator">
            <summary>
            Returns an enumerator that iterates over Id's.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate over Id's.</returns>
        </member>
        <member name="M:Pure.Data.IdGenerator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates over Id's.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate over Id's.</returns>
        </member>
        <member name="T:Pure.Data.IIdGenerator`1">
            <summary>
            Provides the interface for Id-generators.
            </summary>
            <typeparam name="T">The type for the generated ID's.</typeparam>
        </member>
        <member name="M:Pure.Data.IIdGenerator`1.CreateId">
            <summary>
            Creates a new Id.
            </summary>
            <returns>Returns an Id.</returns>
        </member>
        <member name="P:Pure.Data.IIdGenerator`1.TimeSource">
            <summary>
            Gets the <see cref="T:Pure.Data.ITimeSource"/> for the <see cref="T:Pure.Data.IIdGenerator`1"/>.
            </summary>
        </member>
        <member name="P:Pure.Data.IIdGenerator`1.Epoch">
            <summary>
            Gets the epoch for the <see cref="T:Pure.Data.IIdGenerator`1"/>.
            </summary>
        </member>
        <member name="P:Pure.Data.IIdGenerator`1.MaskConfig">
            <summary>
            Gets the <see cref="P:Pure.Data.IIdGenerator`1.MaskConfig"/> for the <see cref="T:Pure.Data.IIdGenerator`1"/>.
            </summary>
        </member>
        <member name="T:Pure.Data.InvalidSystemClockException">
            <summary>
            The exception that is thrown when a clock going backwards is detected.
            </summary>
        </member>
        <member name="M:Pure.Data.InvalidSystemClockException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Pure.Data.InvalidSystemClockException"/> class with a message that describes the error.
            </summary>
            <param name="message">
            The message that describes the exception. The caller of this constructor is required to ensure that this 
            string has been localized for the current system culture.
            </param>
        </member>
        <member name="T:Pure.Data.ITimeSource">
            <summary>
            Provides the interface for timesources that provide time information to <see cref="T:Pure.Data.IdGenerator"/>s.
            </summary>
        </member>
        <member name="P:Pure.Data.ITimeSource.Epoch">
            <summary>
            Gets the epoch of the <see cref="T:Pure.Data.ITimeSource"/>.
            </summary>
        </member>
        <member name="P:Pure.Data.ITimeSource.TickDuration">
            <summary>
            Returns the duration of a single tick.
            </summary>
            <remarks>
            It's up to the <see cref="T:Pure.Data.ITimeSource"/> to define what a 'tick' is; it may be nanoseconds, milliseconds,
            seconds or even days or years.
            </remarks>
        </member>
        <member name="M:Pure.Data.ITimeSource.GetTicks">
            <summary>
            Returns the current number of ticks for the <see cref="T:Pure.Data.ITimeSource"/>.
            </summary>
            <returns>The current number of ticks to be used by an <see cref="T:Pure.Data.IdGenerator"/> when creating an Id.</returns>
            <remarks>
            It's up to the <see cref="T:Pure.Data.ITimeSource"/> to define what a 'tick' is; it may be nanoseconds, milliseconds,
            seconds or even days or years.
            </remarks>
        </member>
        <member name="T:Pure.Data.MaskConfig">
            <summary>
            Specifies the number of bits to use for the different parts of an Id for an <see cref="T:Pure.Data.IdGenerator"/>.
            </summary>
        </member>
        <member name="P:Pure.Data.MaskConfig.TimestampBits">
            <summary>
            Gets number of bits to use for the timestamp part of the Id's to generate.
            </summary>
        </member>
        <member name="P:Pure.Data.MaskConfig.GeneratorIdBits">
            <summary>
            Gets number of bits to use for the generator-id part of the Id's to generate.
            </summary>
        </member>
        <member name="P:Pure.Data.MaskConfig.SequenceBits">
            <summary>
            Gets number of bits to use for the sequence part of the Id's to generate.
            </summary>
        </member>
        <member name="P:Pure.Data.MaskConfig.TotalBits">
            <summary>
            Gets the total number of bits for the <see cref="T:Pure.Data.MaskConfig"/>.
            </summary>
        </member>
        <member name="P:Pure.Data.MaskConfig.MaxIntervals">
            <summary>
            Returns the maximum number of intervals for this mask configuration.
            </summary>
        </member>
        <member name="P:Pure.Data.MaskConfig.MaxGenerators">
            <summary>
            Returns the maximum number of generators available for this mask configuration.
            </summary>
        </member>
        <member name="P:Pure.Data.MaskConfig.MaxSequenceIds">
            <summary>
            Returns the maximum number of sequential Id's for a time-interval (e.g. max. number of Id's generated 
            within a single interval).
            </summary>
        </member>
        <member name="P:Pure.Data.MaskConfig.Default">
            <summary>
            Gets a default <see cref="T:Pure.Data.MaskConfig"/> with 41 bits for the timestamp part, 10 bits for the generator-id 
            part and 12 bits for the sequence part of the id.
            </summary>
        </member>
        <member name="M:Pure.Data.MaskConfig.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a bitmask configuration for <see cref="T:Pure.Data.IdGenerator"/>s.
            </summary>
            <param name="timestampBits">Number of bits to use for the timestamp-part of Id's.</param>
            <param name="generatorIdBits">Number of bits to use for the generator-id of Id's.</param>
            <param name="sequenceBits">Number of bits to use for the sequence-part of Id's.</param>
        </member>
        <member name="M:Pure.Data.MaskConfig.WraparoundDate(System.DateTimeOffset,Pure.Data.ITimeSource)">
            <summary>
            Calculates the last date for an Id before a 'wrap around' will occur in the timestamp-part of an Id for the
            given <see cref="T:Pure.Data.MaskConfig"/>.
            </summary>
            <param name="epoch">The used epoch for the <see cref="T:Pure.Data.IdGenerator"/> to use as offset.</param>'
            <param name="timeSource">The used <see cref="T:Pure.Data.ITimeSource"/> for the <see cref="T:Pure.Data.IdGenerator"/>.</param>
            <returns>The last date for an Id before a 'wrap around' will occur in the timestamp-part of an Id.</returns>
            <remarks>
            Please note that for dates exceeding the <see cref="F:System.DateTimeOffset.MaxValue"/> an
            <see cref="T:System.ArgumentOutOfRangeException"/> will be thrown.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when any combination of a <see cref="P:Pure.Data.ITimeSource.TickDuration"/> and <see cref="P:Pure.Data.MaskConfig.MaxIntervals"/> 
            results in a date exceeding the <see cref="F:System.TimeSpan.MaxValue"/> value.
            </exception>
        </member>
        <member name="M:Pure.Data.MaskConfig.WraparoundInterval(Pure.Data.ITimeSource)">
            <summary>
            Calculates the interval at wich a 'wrap around' will occur in the timestamp-part of an Id for the given
            <see cref="T:Pure.Data.MaskConfig"/>.
            </summary>
            <param name="timeSource">The used <see cref="T:Pure.Data.ITimeSource"/> for the <see cref="T:Pure.Data.IdGenerator"/>.</param>
            <returns>
            The interval at wich a 'wrap around' will occur in the timestamp-part of an Id for the given
            <see cref="T:Pure.Data.MaskConfig"/>.
            </returns>
            <remarks>
            Please note that for intervals exceeding the <see cref="F:System.TimeSpan.MaxValue"/> an
            <see cref="T:System.OverflowException"/> will be thrown.
            </remarks>
            <exception cref="T:System.OverflowException">
            Thrown when any combination of a <see cref="P:Pure.Data.ITimeSource.TickDuration"/> and <see cref="P:Pure.Data.MaskConfig.MaxIntervals"/> 
            results in a TimeSpan exceeding the <see cref="F:System.TimeSpan.MaxValue"/> value.
            </exception>
        </member>
        <member name="T:Pure.Data.SequenceOverflowException">
            <summary>
            The exception that is thrown when a sequence overflows (e.g. too many Id's generated within the same timespan (ms)).
            </summary>
        </member>
        <member name="M:Pure.Data.SequenceOverflowException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Pure.Data.SequenceOverflowException"/> class with a message that describes the error.
            </summary>
            <param name="message">
            The message that describes the exception. The caller of this constructor is required to ensure that this 
            string has been localized for the current system culture.
            </param>
        </member>
        <member name="T:Pure.Data.StopwatchTimeSource">
            <summary>
            Provides time data to an <see cref="T:Pure.Data.IdGenerator"/>. This timesource uses a <see cref="T:System.Diagnostics.Stopwatch"/> for timekeeping.
            </summary>
        </member>
        <member name="P:Pure.Data.StopwatchTimeSource.Epoch">
            <summary>
            Gets the epoch of the <see cref="T:Pure.Data.ITimeSource"/>.
            </summary>
        </member>
        <member name="P:Pure.Data.StopwatchTimeSource.Elapsed">
            <summary>
            Gets the elapsed time since this <see cref="T:Pure.Data.ITimeSource"/> was initialized.
            </summary>
        </member>
        <member name="P:Pure.Data.StopwatchTimeSource.Offset">
            <summary>
            Gets the offset for this <see cref="T:Pure.Data.ITimeSource"/> which is defined as the difference of it's creationdate
            and it's epoch which is specified in the object's constructor.
            </summary>
        </member>
        <member name="M:Pure.Data.StopwatchTimeSource.#ctor(System.DateTimeOffset,System.TimeSpan)">
            <summary>
            Initializes a new <see cref="T:Pure.Data.StopwatchTimeSource"/> object.
            </summary>
            <param name="epoch">The epoch to use as an offset from now,</param>
            <param name="tickDuration">The duration of a single tick for this timesource.</param>
        </member>
        <member name="P:Pure.Data.StopwatchTimeSource.TickDuration">
            <summary>
            Returns the duration of a single tick.
            </summary>
        </member>
        <member name="M:Pure.Data.StopwatchTimeSource.GetTicks">
            <summary>
            Returns the current number of ticks for the <see cref="T:Pure.Data.DefaultTimeSource"/>.
            </summary>
            <returns>The current number of ticks to be used by an <see cref="T:Pure.Data.IdGenerator"/> when creating an Id.</returns>
        </member>
        <member name="T:Pure.Data.SequentialGuid">
            <summary>
            creating sequential Guids.
            This code is taken from jhtodd/SequentialGuid
            https://github.com/jhtodd/SequentialGuid/blob/master/SequentialGuid/Classes/SequentialGuid.cs
            </summary>
        </member>
        <member name="T:Pure.Data.SequentialGuidDatabaseType">
            <summary>
            Database type to generate GUIDs.
            </summary>
        </member>
        <member name="T:Pure.Data.SequentialGuidType">
            <summary>
            Describes the type of a sequential GUID value.
            </summary>
        </member>
        <member name="F:Pure.Data.SequentialGuidType.SequentialAsString">
            <summary>
            The GUID should be sequential when formatted using the
            <see cref="M:System.Guid.ToString" /> method.
            </summary>
        </member>
        <member name="F:Pure.Data.SequentialGuidType.SequentialAsBinary">
            <summary>
            The GUID should be sequential when formatted using the
            <see cref="M:System.Guid.ToByteArray" /> method.
            </summary>
        </member>
        <member name="F:Pure.Data.SequentialGuidType.SequentialAtEnd">
            <summary>
            The sequential portion of the GUID should be located at the end
            of the Data4 block.
            </summary>
        </member>
        <member name="T:Pure.Data.Snowflake">
            <summary>
            From: https://github.com/twitter/snowflake
            An object that generates IDs.
            This is broken into a separate class in case
            we ever want to support multiple worker threads
            per process
            </summary>
        </member>
        <member name="M:Pure.Data.SystemGuidExtensions.ToGuidStringWithoutSeparator(System.Guid)">
            <summary>
            不含分隔的32位字符：xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            </summary>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Pure.Data.SystemGuidExtensions.ToGuid16String(System.Guid)”忽略有格式错误的 XML 注释 -->
        <member name="M:Pure.Data.SystemGuidExtensions.ToGuidLongID(System.Guid)">
            <summary>  
            根据GUID获取19位的唯一数字序列  
            </summary>  
            <returns></returns>  
        </member>
        <member name="T:Pure.Data.SqlQuery`1">
            <summary>
            延迟加载实现
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Pure.Data.SqlQuery`1.GetEnumerator">
            <summary>
            调用ToList方法会自动执行解析
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.SqlQueryProvider`1">
            <summary>
            延迟加载驱动器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Pure.Data.SqlQueryProvider`1.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            解析Expression 并返回IEnumerable数据
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.MasterSlave.IDataSourceManager">
            <summary>
            数据源管理器
            </summary>
        </member>
        <member name="M:Pure.Data.MasterSlave.IDataSourceManager.GetDataSource(Pure.Data.DataSourceType)">
            <summary>
            获取数据源
            </summary>
            <param name="sourceChoice"></param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.MasterSlave.DataSourceManager">
            <summary>
            数据源管理器
            </summary>
        </member>
        <member name="F:Pure.Data.MasterSlave.DataSourceManager.weightFilter">
            <summary>
            权重筛选器
            </summary>
        </member>
        <member name="T:Pure.Data.MasterSlave.WeightFilter`1">
            <summary>
            权重筛选器
            </summary>
        </member>
        <member name="M:Pure.Data.MasterSlave.WeightFilter`1.Elect(System.Collections.Generic.IEnumerable{Pure.Data.MasterSlave.WeightFilter{`0}.WeightSource})">
            <summary>
            选举权重源
            </summary>
            <param name="inWeightSources"></param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.MasterSlave.WeightFilter`1.WeightSource">
            <summary>
            权重源
            </summary>
        </member>
        <member name="T:Pure.Data.Migration.AutoMigrateHelper">
            <summary>
            自动迁移助手
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.BaseMigrate.NextMigration">
            <summary>
            Finds the next migration available to be applied.  Only returns
            migrations that have NOT already been applied.
            </summary>
            <returns>The migration number of the next available Migration.</returns>
        </member>
        <member name="M:Pure.Data.Migration.BaseMigrate.PreviousMigration">
            <summary>
            Finds the previous migration that has been applied.  Only returns
            migrations that HAVE already been applied.
            </summary>
            <returns>The most recently applied Migration.</returns>
        </member>
        <member name="T:Pure.Data.Migration.DuplicatedVersionException">
            <summary>
            Exception thrown when a migration number is not unique.
            </summary>
        </member>
        <member name="T:Pure.Data.Migration.IrreversibleMigrationException">
            <summary>
            Exception thrown in a migration <c>Down()</c> method
            when changes can't be undone.
            </summary>
        </member>
        <member name="T:Pure.Data.Migration.MigrateAnywhere">
            <summary>
            Description of MigrateAnywhere.
            </summary>
        </member>
        <member name="T:Pure.Data.Migration.MigrationTypeComparer">
            <summary>
            Comparer of Migration by their version attribute.
            </summary>
        </member>
        <member name="T:Pure.Data.Migration.MigrationLoader">
            <summary>
            Handles inspecting code to find all of the Migrations in assemblies and reading
            other metadata such as the last revision, etc.
            </summary>
        </member>
        <member name="P:Pure.Data.Migration.MigrationLoader.MigrationsTypes">
            <summary>
            Returns registered migration <see cref="T:System.Type">types</see>.
            </summary>
        </member>
        <member name="P:Pure.Data.Migration.MigrationLoader.LastVersion">
            <summary>
            Returns the last version of the migrations.
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.MigrationLoader.CheckForDuplicatedVersion">
            <summary>
            Check for duplicated version in migrations.
            </summary>
            <exception cref="M:Pure.Data.Migration.MigrationLoader.CheckForDuplicatedVersion">CheckForDuplicatedVersion</exception>
        </member>
        <member name="M:Pure.Data.Migration.MigrationLoader.GetMigrationTypes(System.Reflection.Assembly)">
            <summary>
            Collect migrations in one <c>Assembly</c>.
            </summary>
            <param name="asm">The <c>Assembly</c> to browse.</param>
            <returns>The migrations collection</returns>
        </member>
        <member name="M:Pure.Data.Migration.MigrationLoader.GetMigrationVersion(System.Type)">
            <summary>
            Returns the version of the migration
            <see cref="T:Pure.Data.Migration.Framework.MigrationAttribute">MigrationAttribute</see>.
            </summary>
            <param name="t">Migration type.</param>
            <returns>Version number sepcified in the attribute</returns>
        </member>
        <member name="T:Pure.Data.Migration.Migrator">
            <summary>
            Migrations mediator.
            </summary>
        </member>
        <member name="P:Pure.Data.Migration.Migrator.MigrationsTypes">
            <summary>
            Returns registered migration <see cref="T:System.Type">types</see>.
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Migrator.MigrateToLastVersion">
            <summary>
            Run all migrations up to the latest.  Make no changes to database if
            dryrun is true.
            </summary>
        </member>
        <member name="P:Pure.Data.Migration.Migrator.AppliedMigrations">
            <summary>
            Returns the current migrations applied to the database.
            </summary>
        </member>
        <member name="P:Pure.Data.Migration.Migrator.Logger">
            <summary>
            Get or set the event logger.
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Migrator.MigrateTo(System.Int64)">
            <summary>
            Migrate the database to a specific version.
            Runs all migration between the actual version and the
            specified version.
            If <c>version</c> is greater then the current version,
            the <c>Up()</c> method will be invoked.
            If <c>version</c> lower then the current version,
            the <c>Down()</c> method of previous migration will be invoked.
            If <c>dryrun</c> is set, don't write any changes to the database.
            </summary>
            <param name="version">The version that must became the current one</param>
        </member>
        <member name="T:Pure.Data.Migration.Providers.ColumnPropertiesMapper">
            <summary>
            This is basically a just a helper base class
            per-database implementors may want to override ColumnSql
            </summary>
        </member>
        <member name="F:Pure.Data.Migration.Providers.ColumnPropertiesMapper.type">
            <summary>The SQL type</summary>
        </member>
        <member name="F:Pure.Data.Migration.Providers.ColumnPropertiesMapper.name">
            <summary>The name of the column</summary>
        </member>
        <member name="F:Pure.Data.Migration.Providers.ColumnPropertiesMapper.columnSql">
            <summary>
            the type of the column
            </summary>
        </member>
        <member name="F:Pure.Data.Migration.Providers.ColumnPropertiesMapper.indexed">
            <summary>
            Sql if This column is Indexed
            </summary>
        </member>
        <member name="F:Pure.Data.Migration.Providers.ColumnPropertiesMapper.defaultVal">
            <summary>
            Sql if this column has a default value
            </summary>
        </member>
        <member name="P:Pure.Data.Migration.Providers.ColumnPropertiesMapper.ColumnSql">
            <summary>
            The sql for this column, override in database-specific implementation classes
            </summary>
        </member>
        <member name="T:Pure.Data.Migration.Providers.Dialect">
            <summary>
            Defines the implementations specific details for a particular database.
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Providers.Dialect.RegisterColumnType(System.Data.DbType,System.Int32,System.String)">
            <summary>
            Subclasses register a typename for the given type code and maximum
            column length. <c>$l</c> in the type name will be replaced by the column
            length (if appropriate)
            </summary>
            <param name="code">The typecode</param>
            <param name="capacity">Maximum length of database type</param>
            <param name="name">The database type name</param>
        </member>
        <member name="M:Pure.Data.Migration.Providers.Dialect.RegisterColumnType(System.Data.DbType,System.String)">
            <summary>
            Suclasses register a typename for the given type code. <c>$l</c> in the 
            typename will be replaced by the column length (if appropriate).
            </summary>
            <param name="code">The typecode</param>
            <param name="name">The database type name</param>
        </member>
        <member name="M:Pure.Data.Migration.Providers.Dialect.GetTypeName(System.Data.DbType)">
            <summary>
            Get the name of the database type associated with the given 
            </summary>
            <param name="type">The DbType</param>
            <returns>The database type name used by ddl.</returns>
        </member>
        <member name="M:Pure.Data.Migration.Providers.Dialect.GetTypeName(System.Data.DbType,System.Int32)">
            <summary>
            Get the name of the database type associated with the given 
            </summary>
            <param name="type">The DbType</param>
            <returns>The database type name used by ddl.</returns>
            <param name="length"></param>
        </member>
        <member name="M:Pure.Data.Migration.Providers.Dialect.GetTypeName(System.Data.DbType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the name of the database type associated with the given 
            </summary>
            <param name="type">The DbType</param>
            <returns>The database type name used by ddl.</returns>
            <param name="length"></param>
            <param name="precision"></param>
            <param name="scale"></param>
        </member>
        <member name="T:Pure.Data.Migration.Providers.Firebird.FirebirdTransformationProvider">
            <summary>
            Summary description for MySqlTransformationProvider.
            </summary>
        </member>
        <member name="T:Pure.Data.Migration.Providers.Mysql.MySqlTransformationProvider">
            <summary>
            Summary description for MySqlTransformationProvider.
            </summary>
        </member>
        <member name="T:Pure.Data.Migration.Providers.PostgreSQL.PostgreSQLTransformationProvider">
            <summary>
            Migration transformations provider for Microsoft SQL Server.
            </summary>
        </member>
        <member name="T:Pure.Data.Migration.Providers.SQLite.SQLiteTransformationProvider">
            <summary>
            Summary description for SQLiteTransformationProvider.
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Providers.SQLite.SQLiteTransformationProvider.ParseSqlForColumnNames(System.String)">
            <summary>
            Turn something like 'columnName INTEGER NOT NULL' into just 'columnName'
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Providers.SQLite.SQLiteTransformationProvider.ExtractNameFromColumnDef(System.String)">
            <summary>
            Name is the first value before the space.
            </summary>
            <param name="columnDef"></param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.Migration.Providers.SqlServer.SqlServerCeTransformationProvider">
            <summary>
            Migration transformations provider for Microsoft SQL Server.
            </summary>
        </member>
        <member name="T:Pure.Data.Migration.Providers.SqlServer.SqlServerTransformationProvider">
            <summary>
            Migration transformations provider for Microsoft SQL Server.
            </summary>
        </member>
        <member name="T:Pure.Data.Migration.Providers.NoOpTransformationProvider">
            <summary>
            No Op (Null Object Pattern) implementation of the ITransformationProvider
            </summary>
        </member>
        <member name="T:Pure.Data.Migration.Providers.TransformationProvider">
            <summary>
            Base class for every transformation providers.
            A 'tranformation' is an operation that modifies the database.
            </summary>
        </member>
        <member name="P:Pure.Data.Migration.Providers.TransformationProvider.Logger">
            <summary>
            Returns the event logger
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Providers.TransformationProvider.AddTable(System.String,Pure.Data.Migration.Framework.Column[])">
            <summary>
            Add a new table
            </summary>
            <param name="name">Table name</param>
            <param name="columns">Columns</param>
            <example>
            Adds the Test table with two columns:
            <code>
            Database.AddTable("Test",
                              new Column("Id", typeof(int), ColumnProperty.PrimaryKey),
                              new Column("Title", typeof(string), 100)
                             );
            </code>
            </example>
        </member>
        <member name="M:Pure.Data.Migration.Providers.TransformationProvider.AddTable(System.String,System.String,Pure.Data.Migration.Framework.Column[])">
            <summary>
            Add a new table
            </summary>
            <param name="name">Table name</param>
            <param name="columns">Columns</param>
            <param name="engine">the database storage engine to use</param>
            <example>
            Adds the Test table with two columns:
            <code>
            Database.AddTable("Test", "INNODB",
                              new Column("Id", typeof(int), ColumnProperty.PrimaryKey),
                              new Column("Title", typeof(string), 100)
                             );
            </code>
            </example>
        </member>
        <member name="M:Pure.Data.Migration.Providers.TransformationProvider.AddColumn(System.String,System.String,System.Data.DbType,System.Int32,Pure.Data.Migration.Framework.ColumnProperty,System.Object)">
            <summary>
            Add a new column to an existing table.
            </summary>
            <param name="table">Table to which to add the column</param>
            <param name="column">Column name</param>
            <param name="type">Date type of the column</param>
            <param name="size">Max length of the column</param>
            <param name="property">Properties of the column, see <see cref="T:Pure.Data.Migration.Framework.ColumnProperty">ColumnProperty</see>,</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:Pure.Data.Migration.Providers.TransformationProvider.AddColumn(System.String,System.String,System.Data.DbType)">
            <summary>
            <see cref="M:Pure.Data.Migration.Providers.TransformationProvider.AddColumn(System.String,System.String,System.Data.DbType,System.Int32,Pure.Data.Migration.Framework.ColumnProperty,System.Object)">
            AddColumn(string, string, Type, int, ColumnProperty, object)
            </see>
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Providers.TransformationProvider.AddColumn(System.String,System.String,System.Data.DbType,System.Int32)">
            <summary>
            <see cref="M:Pure.Data.Migration.Providers.TransformationProvider.AddColumn(System.String,System.String,System.Data.DbType,System.Int32,Pure.Data.Migration.Framework.ColumnProperty,System.Object)">
            AddColumn(string, string, Type, int, ColumnProperty, object)
            </see>
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Providers.TransformationProvider.AddColumn(System.String,System.String,System.Data.DbType,Pure.Data.Migration.Framework.ColumnProperty)">
            <summary>
            <see cref="M:Pure.Data.Migration.Providers.TransformationProvider.AddColumn(System.String,System.String,System.Data.DbType,System.Int32,Pure.Data.Migration.Framework.ColumnProperty,System.Object)">
            AddColumn(string, string, Type, int, ColumnProperty, object)
            </see>
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Providers.TransformationProvider.AddColumn(System.String,System.String,System.Data.DbType,System.Int32,Pure.Data.Migration.Framework.ColumnProperty)">
            <summary>
            <see cref="M:Pure.Data.Migration.Providers.TransformationProvider.AddColumn(System.String,System.String,System.Data.DbType,System.Int32,Pure.Data.Migration.Framework.ColumnProperty,System.Object)">
            AddColumn(string, string, Type, int, ColumnProperty, object)
            </see>
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Providers.TransformationProvider.AddPrimaryKey(System.String,System.String,System.String[])">
            <summary>
            Append a primary key to a table.
            </summary>
            <param name="name">Constraint name</param>
            <param name="table">Table name</param>
            <param name="columns">Primary column names</param>
        </member>
        <member name="M:Pure.Data.Migration.Providers.TransformationProvider.GenerateForeignKey(System.String,System.String,System.String,System.String)">
            <summary>
            Guesses the name of the foreign key and add it
            </summary>
        </member>
        <!-- 对于成员“M:Pure.Data.Migration.Providers.TransformationProvider.GenerateForeignKey(System.String,System.String[],System.String,System.String[])”忽略有格式错误的 XML 注释 -->
        <member name="M:Pure.Data.Migration.Providers.TransformationProvider.GenerateForeignKey(System.String,System.String,System.String,System.String,Pure.Data.Migration.Framework.ForeignKeyConstraint)">
            <summary>
            Guesses the name of the foreign key and add it
            </summary>
        </member>
        <!-- 对于成员“M:Pure.Data.Migration.Providers.TransformationProvider.GenerateForeignKey(System.String,System.String[],System.String,System.String[],Pure.Data.Migration.Framework.ForeignKeyConstraint)”忽略有格式错误的 XML 注释 -->
        <member name="M:Pure.Data.Migration.Providers.TransformationProvider.AddForeignKey(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Append a foreign key (relation) between two tables.
            tables.
            </summary>
            <param name="name">Constraint name</param>
            <param name="primaryTable">Table name containing the primary key</param>
            <param name="primaryColumn">Primary key column name</param>
            <param name="refTable">Foreign table name</param>
            <param name="refColumn">Foreign column name</param>
        </member>
        <member name="M:Pure.Data.Migration.Providers.TransformationProvider.AddForeignKey(System.String,System.String,System.String[],System.String,System.String[])">
            <summary>
            <see cref="M:Pure.Data.Migration.Framework.ITransformationProvider.AddForeignKey(System.String,System.String,System.String,System.String,System.String)">
            AddForeignKey(string, string, string, string, string)
            </see>
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Providers.TransformationProvider.ConstraintExists(System.String,System.String)">
            <summary>
            Determines if a constraint exists.
            </summary>
            <param name="name">Constraint name</param>
            <param name="table">Table owning the constraint</param>
            <returns><c>true</c> if the constraint exists.</returns>
        </member>
        <member name="M:Pure.Data.Migration.Providers.TransformationProvider.ExecuteQuery(System.String)">
            <summary>
            Execute an SQL query returning results.
            </summary>
            <param name="sql">The SQL command.</param>
            <returns>A data iterator, <see cref="T:System.Data.IDataReader">IDataReader</see>.</returns>
        </member>
        <member name="M:Pure.Data.Migration.Providers.TransformationProvider.BeginTransaction">
            <summary>
            Starts a transaction. Called by the migration mediator.
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Providers.TransformationProvider.Rollback">
            <summary>
            Rollback the current migration. Called by the migration mediator.
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Providers.TransformationProvider.Commit">
            <summary>
            Commit the current transaction. Called by the migrations mediator.
            </summary>
        </member>
        <member name="P:Pure.Data.Migration.Providers.TransformationProvider.AppliedMigrations">
            <summary>
            The list of Migrations currently applied to the database.
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Providers.TransformationProvider.MigrationApplied(System.Int64)">
            <summary>
            Marks a Migration version number as having been applied
            </summary>
            <param name="version">The version number of the migration that was applied</param>
        </member>
        <member name="M:Pure.Data.Migration.Providers.TransformationProvider.MigrationUnApplied(System.Int64)">
            <summary>
            Marks a Migration version number as having been rolled back from the database
            </summary>
            <param name="version">The version number of the migration that was removed</param>
        </member>
        <member name="T:Pure.Data.Migration.Providers.TypeNames">
            <summary>
            This class maps a DbType to names.
            </summary>
            <remarks>
            Associations may be marked with a capacity. Calling the <c>Get()</c>
            method with a type and actual size n will return the associated
            name with smallest capacity >= n, if available and an unmarked
            default type otherwise.
            Eg, setting
            <code>
            	Names.Put(DbType,			"TEXT" );
            	Names.Put(DbType,	255,	"VARCHAR($l)" );
            	Names.Put(DbType,	65534,	"LONGVARCHAR($l)" );
            </code>
            will give you back the following:
            <code>
            	Names.Get(DbType)			// --> "TEXT" (default)
            	Names.Get(DbType,100)		// --> "VARCHAR(100)" (100 is in [0:255])
            	Names.Get(DbType,1000)	// --> "LONGVARCHAR(1000)" (100 is in [256:65534])
            	Names.Get(DbType,100000)	// --> "TEXT" (default)
            </code>
            On the other hand, simply putting
            <code>
            	Names.Put(DbType, "VARCHAR($l)" );
            </code>
            would result in
            <code>
            	Names.Get(DbType)			// --> "VARCHAR($l)" (will cause trouble)
            	Names.Get(DbType,100)		// --> "VARCHAR(100)" 
            	Names.Get(DbType,1000)	// --> "VARCHAR(1000)"
            	Names.Get(DbType,10000)	// --> "VARCHAR(10000)"
            </code>
            </remarks>
        </member>
        <member name="M:Pure.Data.Migration.Providers.TypeNames.Get(System.Data.DbType)">
            <summary>
            Get default type name for specified type
            </summary>
            <param name="typecode">the type key</param>
            <returns>the default type name associated with the specified key</returns>
        </member>
        <member name="M:Pure.Data.Migration.Providers.TypeNames.Get(System.Data.DbType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the type name specified type and size
            </summary>
            <param name="typecode">the type key</param>
            <param name="size">the SQL length </param>
            <param name="scale">the SQL scale </param>
            <param name="precision">the SQL precision </param>
            <returns>
            The associated name with smallest capacity >= size if available and the
            default type name otherwise
            </returns>
        </member>
        <member name="M:Pure.Data.Migration.Providers.TypeNames.Put(System.Data.DbType,System.Int32,System.String)">
            <summary>
            Set a type name for specified type key and capacity
            </summary>
            <param name="typecode">the type key</param>
            <param name="capacity">the (maximum) type size/length</param>
            <param name="value">The associated name</param>
        </member>
        <member name="M:Pure.Data.Migration.Providers.TypeNames.Put(System.Data.DbType,System.String)">
            <summary>
            
            </summary>
            <param name="typecode"></param>
            <param name="value"></param>
        </member>
        <member name="T:Pure.Data.Migration.ProviderFactory">
            <summary>
            Handles loading Provider implementations
            </summary>
        </member>
        <member name="T:Pure.Data.Migration.Framework.Column">
            <summary>
            Represents a table column.
            </summary>
        </member>
        <member name="T:Pure.Data.Migration.Framework.ColumnProperty">
            <summary>
            Represents a table column properties.
            </summary>
        </member>
        <member name="F:Pure.Data.Migration.Framework.ColumnProperty.Null">
            <summary>
            Null is allowable
            </summary>
        </member>
        <member name="F:Pure.Data.Migration.Framework.ColumnProperty.NotNull">
            <summary>
            Null is not allowable
            </summary>
        </member>
        <member name="F:Pure.Data.Migration.Framework.ColumnProperty.Identity">
            <summary>
            Identity column, autoinc
            </summary>
        </member>
        <member name="F:Pure.Data.Migration.Framework.ColumnProperty.Unique">
            <summary>
            Unique Column
            </summary>
        </member>
        <member name="F:Pure.Data.Migration.Framework.ColumnProperty.Indexed">
            <summary>
            Indexed Column
            </summary>
        </member>
        <member name="F:Pure.Data.Migration.Framework.ColumnProperty.Unsigned">
            <summary>
            Unsigned Column
            </summary>
        </member>
        <member name="F:Pure.Data.Migration.Framework.ColumnProperty.ForeignKey">
            <summary>
            Foreign Key
            </summary>
        </member>
        <member name="F:Pure.Data.Migration.Framework.ColumnProperty.PrimaryKey">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="F:Pure.Data.Migration.Framework.ColumnProperty.PrimaryKeyWithIdentity">
            <summary>
            Primary key. Make the column a PrimaryKey and unsigned
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ILogger.Started(System.Collections.Generic.List{System.Int64},System.Int64)">
            <summary>
            Log that we have started a migration
            </summary>
            <param name="currentVersion">Start list of versions</param>
            <param name="finalVersion">Final Version</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ILogger.MigrateUp(System.Int64,System.String)">
            <summary>
            Log that we are migrating up
            </summary>
            <param name="version">Version we are migrating to</param>
            <param name="migrationName">Migration name</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ILogger.MigrateDown(System.Int64,System.String)">
            <summary>
            Log that we are migrating down
            </summary>
            <param name="version">Version we are migrating to</param>
            <param name="migrationName">Migration name</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ILogger.Skipping(System.Int64)">
            <summary>
            Inform that a migration corresponding to the number of
            version is untraceable (not found?) and will be ignored.
            </summary>
            <param name="version">Version we couldnt find</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ILogger.RollingBack(System.Int64)">
            <summary>
            Log that we are rolling back to version
            </summary>
            <param name="originalVersion">
            version
            </param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ILogger.ApplyingDBChange(System.String)">
            <summary>
            Log a Sql statement that changes the schema or content of the database as part of a migration
            </summary>
            <remarks>
            SELECT statements should not be logged using this method as they do not alter the data or schema of the
            database.
            </remarks>
            <param name="sql">The Sql statement to log</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ILogger.Exception(System.Int64,System.String,System.Exception)">
            <summary>
            Log that we had an exception on a migration
            </summary>
            <param name="version">The version of the migration that caused the exception.</param>
            <param name="migrationName">The name of the migration that caused the exception.</param>
            <param name="ex">The exception itself</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ILogger.Exception(System.String,System.Exception)">
            <summary>
            Log that we had an exception on a migration
            </summary>
            <param name="message">An informative message to show to the user.</param>
            <param name="ex">The exception itself</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ILogger.Finished(System.Collections.Generic.List{System.Int64},System.Int64)">
            <summary>
            Log that we have finished a migration
            </summary>
            <param name="currentVersion">List of versions with which we started</param>
            <param name="finalVersion">Final Version</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ILogger.Log(System.String,System.Object[])">
            <summary>
            Log a message
            </summary>
            <param name="format">The format string ("{0}, blabla {1}").</param>
            <param name="args">Parameters to apply to the format string.</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ILogger.Warn(System.String,System.Object[])">
            <summary>
            Log a Warning
            </summary>
            <param name="format">The format string ("{0}, blabla {1}").</param>
            <param name="args">Parameters to apply to the format string.</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ILogger.Trace(System.String,System.Object[])">
            <summary>
            Log a Trace Message
            </summary>
            <param name="format">The format string ("{0}, blabla {1}").</param>
            <param name="args">Parameters to apply to the format string.</param>
        </member>
        <member name="P:Pure.Data.Migration.Framework.IMigration.Database">
            <summary>
            Represents the database.
            <see cref="T:Pure.Data.Migration.Framework.ITransformationProvider"></see>.
            </summary>
            <seealso cref="T:Pure.Data.Migration.Framework.ITransformationProvider">Migration.Framework.ITransformationProvider</seealso>
        </member>
        <member name="M:Pure.Data.Migration.Framework.IMigration.Up">
            <summary>
            Defines tranformations to port the database to the current version.
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Framework.IMigration.AfterUp">
            <summary>
            This is run after the Up transaction has been committed
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Framework.IMigration.Down">
            <summary>
            Defines transformations to revert things done in <c>Up</c>.
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Framework.IMigration.AfterDown">
            <summary>
            This is run after the Down transaction has been committed
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Framework.IMigration.InitializeOnce(System.String[])">
            <summary>
            This gets called once on the first migration object.
            </summary>
        </member>
        <member name="T:Pure.Data.Migration.Framework.ITransformationProvider">
            <summary>
            The main interface to use in Migrations to make changes on a database schema.
            </summary>
        </member>
        <member name="P:Pure.Data.Migration.Framework.ITransformationProvider.Item(System.String)">
            <summary>
            Get this provider or a NoOp provider if you are not running in the context of 'provider'.
            </summary>
        </member>
        <member name="P:Pure.Data.Migration.Framework.ITransformationProvider.AppliedMigrations">
            <summary>
            The list of Migrations currently applied to the database.
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.AddColumn(System.String,System.String,System.Data.DbType,System.Int32,Pure.Data.Migration.Framework.ColumnProperty,System.Object)">
            <summary>
            Add a column to an existing table
            </summary>
            <param name="table">The name of the table that will get the new column</param>
            <param name="column">The name of the new column</param>
            <param name="type">The data type for the new columnd</param>
            <param name="size">The precision or size of the column</param>
            <param name="property">Properties that can be ORed together</param>
            <param name="defaultValue">The default value of the column if no value is given in a query</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.AddColumn(System.String,System.String,System.Data.DbType)">
            <summary>
            Add a column to an existing table
            </summary>
            <param name="table">The name of the table that will get the new column</param>
            <param name="column">The name of the new column</param>
            <param name="type">The data type for the new columnd</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.AddColumn(System.String,System.String,System.Data.DbType,System.Int32)">
            <summary>
            Add a column to an existing table
            </summary>
            <param name="table">The name of the table that will get the new column</param>
            <param name="column">The name of the new column</param>
            <param name="type">The data type for the new columnd</param>
            <param name="size">The precision or size of the column</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.AddColumn(System.String,System.String,System.Data.DbType,System.Int32,Pure.Data.Migration.Framework.ColumnProperty)">
            <summary>
            Add a column to an existing table
            </summary>
            <param name="table">The name of the table that will get the new column</param>
            <param name="column">The name of the new column</param>
            <param name="type">The data type for the new columnd</param>
            <param name="size">The precision or size of the column</param>
            <param name="property">Properties that can be ORed together</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.AddColumn(System.String,System.String,System.Data.DbType,Pure.Data.Migration.Framework.ColumnProperty)">
            <summary>
            Add a column to an existing table
            </summary>
            <param name="table">The name of the table that will get the new column</param>
            <param name="column">The name of the new column</param>
            <param name="type">The data type for the new columnd</param>
            <param name="property">Properties that can be ORed together</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.AddColumn(System.String,System.String,System.Data.DbType,System.Object)">
            <summary>
            Add a column to an existing table with the default column size.
            </summary>
            <param name="table">The name of the table that will get the new column</param>
            <param name="column">The name of the new column</param>
            <param name="type">The data type for the new columnd</param>
            <param name="defaultValue">The default value of the column if no value is given in a query</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.AddColumn(System.String,Pure.Data.Migration.Framework.Column)">
            <summary>
            Add a column to an existing table
            </summary>
            <param name="table">The name of the table that will get the new column</param>
            <param name="column">An instance of a <see cref="T:Pure.Data.Migration.Framework.Column">Column</see> with the specified properties</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.AddForeignKey(System.String,System.String,System.String[],System.String,System.String[])">
            <summary>
            Add a foreign key constraint
            </summary>
            <param name="name">The name of the foreign key. e.g. FK_TABLE_REF</param>
            <param name="foreignTable">The table that the foreign key will be created in (eg. Table.FK_id)</param>
            <param name="foreignColumns">The columns that are the foreign keys (eg. FK_id)</param>
            <param name="primaryTable">The table that holds the primary keys (eg. Table.PK_id)</param>
            <param name="primaryColumns">The columns that are the primary keys (eg. PK_id)</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.AddForeignKey(System.String,System.String,System.String[],System.String,System.String[],Pure.Data.Migration.Framework.ForeignKeyConstraint)">
            <summary>
            Add a foreign key constraint
            </summary>
            <param name="name">The name of the foreign key. e.g. FK_TABLE_REF</param>
            <param name="foreignTable">The table that the foreign key will be created in (eg. Table.FK_id)</param>
            <param name="foreignColumns">The columns that are the foreign keys (eg. FK_id)</param>
            <param name="primaryTable">The table that holds the primary keys (eg. Table.PK_id)</param>
            <param name="primaryColumns">The columns that are the primary keys (eg. PK_id)</param>
            <param name="constraint">Constraint parameters</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.AddForeignKey(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Add a foreign key constraint
            </summary>
            
            <param name="name">The name of the foreign key. e.g. FK_TABLE_REF</param>
            <param name="foreignTable">The table that the foreign key will be created in (eg. Table.FK_id)</param>
            <param name="foreignColumn">The column that is the foreign key (eg. FK_id)</param>
            <param name="primaryTable">The table that holds the primary keys (eg. Table.PK_id)</param>
            <param name="primaryColumn">The column that is the primary key (eg. PK_id)</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.AddForeignKey(System.String,System.String,System.String,System.String,System.String,Pure.Data.Migration.Framework.ForeignKeyConstraint)">
            <summary>
            Add a foreign key constraint
            </summary>
            <param name="name">The name of the foreign key. e.g. FK_TABLE_REF</param>
            <param name="foreignTable">The table that the foreign key will be created in (eg. Table.FK_id)</param>
            <param name="foreignColumn">The column that is the foreign key (eg. FK_id)</param>
            <param name="primaryTable">The table that holds the primary key (eg. Table.PK_id)</param>
            <param name="primaryColumn">The column that is the primary key (eg. PK_id)</param>
            <param name="constraint">Constraint parameters</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.GenerateForeignKey(System.String,System.String,System.String,System.String)">
            <summary>
            Add a foreign key constraint when you don't care about the name of the constraint.
            Warning: This will prevent you from dropping the constraint since you won't know the name.
            </summary>
            <param name="foreignTable">The table that the foreign key will be created in (eg. Table.FK_id)</param>
            <param name="foreignColumn">The column that is the foreign key (eg. FK_id)</param>
            <param name="primaryTable">The table that holds the primary key (eg. Table.PK_id)</param>
            <param name="primaryColumn">The column that is the primary key (eg. PK_id)</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.GenerateForeignKey(System.String,System.String[],System.String,System.String[])">
            <summary>
            Add a foreign key constraint when you don't care about the name of the constraint.
            Warning: This will prevent you from dropping the constraint since you won't know the name.
            </summary>
            <param name="foreignTable">The table that the foreign key will be created in (eg. Table.FK_id)</param>
            <param name="foreignColumns">The columns that are the foreign keys (eg. FK_id)</param>
            <param name="primaryTable">The table that holds the primary key (eg. Table.PK_id)</param>
            <param name="primaryColumns">The column that is the primary key (eg. PK_id)</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.GenerateForeignKey(System.String,System.String[],System.String,System.String[],Pure.Data.Migration.Framework.ForeignKeyConstraint)">
            <summary>
            Add a foreign key constraint when you don't care about the name of the constraint.
            Warning: This will prevent you from dropping the constraint since you won't know the name.
            </summary>
            <param name="foreignTable">The table that the foreign key will be created in (eg. Table.FK_id)</param>
            <param name="foreignColumns">The columns that are the foreign keys (eg. FK_id)</param>
            <param name="primaryTable">The table that holds the primary key (eg. Table.PK_id)</param>
            <param name="primaryColumns">The columns that are the primary keys (eg. PK_id)</param>
            <param name="constraint">Constraint parameters</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.GenerateForeignKey(System.String,System.String,System.String,System.String,Pure.Data.Migration.Framework.ForeignKeyConstraint)">
            <summary>
            Add a foreign key constraint when you don't care about the name of the constraint.
            Warning: This will prevent you from dropping the constraint since you won't know the name.
            </summary>
            <param name="foreignTable">The table that the foreign key will be created in (eg. Table.FK_id)</param>
            <param name="foreignColumn">The columns that are the foreign keys (eg. FK_id)</param>
            <param name="primaryTable">The table that holds the primary key (eg. Table.PK_id)</param>
            <param name="primaryColumn">The column that is the primary key (eg. PK_id)</param>
            <param name="constraint">Constraint parameters</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.GenerateForeignKey(System.String,System.String)">
             <summary>
             Add a foreign key constraint when you don't care about the name of the constraint.
             Warning: This will prevent you from dropping the constraint since you won't know the name.
            
             The current expectations are that there is a column named the same as the foreignTable present in
             the table. This is subject to change because I think it's not a good convention.
             </summary>
             <param name="foreignTable">The table that the foreign key will be created in (eg. Table.FK_id)</param>
             <param name="primaryTable">The table that holds the primary key (eg. Table.PK_id)</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.GenerateForeignKey(System.String,System.String,Pure.Data.Migration.Framework.ForeignKeyConstraint)">
             <summary>
             Add a foreign key constraint when you don't care about the name of the constraint.
             Warning: This will prevent you from dropping the constraint since you won't know the name.
            
             The current expectations are that there is a column named the same as the foreignTable present in
             the table. This is subject to change because I think it's not a good convention.
             </summary>
             <param name="foreignTable">The table that the foreign key will be created in (eg. Table.FK_id)</param>
             <param name="primaryTable">The table that holds the primary key (eg. Table.PK_id)</param>
             <param name="constraint"></param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.AddPrimaryKey(System.String,System.String,System.String[])">
            <summary>
            Add a primary key to a table
            </summary>
            <param name="name">The name of the primary key to add.</param>
            <param name="table">The name of the table that will get the primary key.</param>
            <param name="columns">The name of the column or columns that are in the primary key.</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.AddUniqueConstraint(System.String,System.String,System.String[])">
            <summary>
            Add a constraint to a table
            </summary>
            <param name="name">The name of the constraint to add.</param>
            <param name="table">The name of the table that will get the constraint</param>
            <param name="columns">The name of the column or columns that will get the constraint.</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.AddCheckConstraint(System.String,System.String,System.String)">
            <summary>
            Add a constraint to a table
            </summary>
            <param name="name">The name of the constraint to add.</param>
            <param name="table">The name of the table that will get the constraint</param>
            <param name="checkSql">The check constraint definition.</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.AddTable(System.String,Pure.Data.Migration.Framework.Column[])">
            <summary>
            Add a table
            </summary>
            <param name="name">The name of the table to add.</param>
            <param name="columns">The columns that are part of the table.</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.AddTable(System.String,System.String,Pure.Data.Migration.Framework.Column[])">
            <summary>
            Add a table
            </summary>
            <param name="name">The name of the table to add.</param>
            <param name="engine">The name of the database engine to use. (MySQL)</param>
            <param name="columns">The columns that are part of the table.</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.BeginTransaction">
            <summary>
            Start a transction
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.ChangeColumn(System.String,Pure.Data.Migration.Framework.Column)">
            <summary>
            Change the definition of an existing column.
            </summary>
            <param name="table">The name of the table that will get the new column</param>
            <param name="column">An instance of a <see cref="T:Pure.Data.Migration.Framework.Column">Column</see> with the specified properties and the name of an existing column</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.ColumnExists(System.String,System.String)">
            <summary>
            Check to see if a column exists
            </summary>
            <param name="table"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.Commit">
            <summary>
            Commit the running transction
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.ConstraintExists(System.String,System.String)">
            <summary>
            Check to see if a constraint exists
            </summary>
            <param name="name">The name of the constraint</param>
            <param name="table">The table that the constraint lives on.</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.PrimaryKeyExists(System.String,System.String)">
            <summary>
            Check to see if a primary key constraint exists on the table
            </summary>
            <param name="name">The name of the primary key</param>
            <param name="table">The table that the constraint lives on.</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.ExecuteNonQuery(System.String)">
            <summary>
            Execute an arbitrary SQL query
            </summary>
            <param name="sql">The SQL to execute.</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.ExecuteQuery(System.String)">
            <summary>
            Execute an arbitrary SQL query
            </summary>
            <param name="sql">The SQL to execute.</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.ExecuteScalar(System.String)">
            <summary>
            Execute an arbitrary SQL query
            </summary>
            <param name="sql">The SQL to execute.</param>
            <returns>A single value that is returned.</returns>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.GetColumns(System.String)">
            <summary>
            Get the information about the columns in a table
            </summary>
            <param name="table">The table name that you want the columns for.</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.GetColumnByName(System.String,System.String)">
            <summary>
            Get information about a single column in a table
            </summary>
            <param name="table">The table name that you want the columns for.</param>
            <param name="column">The column name for which you want information.</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.GetTables">
            <summary>
            Get the names of all of the tables
            </summary>
            <returns>The names of all the tables.</returns>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.GetTableInfos(System.Boolean)">
            <summary>
            获取所有表信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.Insert(System.String,System.String[],System.String[])">
            <summary>
            Insert data into a table
            </summary>
            <param name="table">The table that will get the new data</param>
            <param name="columns">The names of the columns</param>
            <param name="values">The values in the same order as the columns</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.Delete(System.String,System.String[],System.String[])">
            <summary>
            Delete data from a table
            </summary>
            <param name="table">The table that will have the data deleted</param>
            <param name="columns">The names of the columns used in a where clause</param>
            <param name="values">The values in the same order as the columns</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.Delete(System.String,System.String,System.String)">
            <summary>
            Delete data from a table
            </summary>
            <param name="table">The table that will have the data deleted</param>
            <param name="whereColumn">The name of the column used in a where clause</param>
            <param name="whereValue">The value for the where clause</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.MigrationApplied(System.Int64)">
            <summary>
            Marks a Migration version number as having been applied
            </summary>
            <param name="version">The version number of the migration that was applied</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.MigrationUnApplied(System.Int64)">
            <summary>
            Marks a Migration version number as having been rolled back from the database
            </summary>
            <param name="version">The version number of the migration that was removed</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.RemoveColumn(System.String,System.String)">
            <summary>
            Remove an existing column from a table
            </summary>
            <param name="table">The name of the table to remove the column from</param>
            <param name="column">The column to remove</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.RemoveForeignKey(System.String,System.String)">
            <summary>
            Remove an existing foreign key constraint
            </summary>
            <param name="table">The table that contains the foreign key.</param>
            <param name="name">The name of the foreign key to remove</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.RemoveConstraint(System.String,System.String)">
            <summary>
            Remove an existing constraint
            </summary>
            <param name="table">The table that contains the foreign key.</param>
            <param name="name">The name of the constraint to remove</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.RemoveTable(System.String)">
            <summary>
            Remove an existing table
            </summary>
            <param name="tableName">The name of the table</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.RenameTable(System.String,System.String)">
            <summary>
            Rename an existing table
            </summary>
            <param name="oldName">The old name of the table</param>
            <param name="newName">The new name of the table</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.RenameColumn(System.String,System.String,System.String)">
            <summary>
            Rename an existing table
            </summary>
            <param name="tableName">The name of the table</param>
            <param name="oldColumnName">The old name of the column</param>
            <param name="newColumnName">The new name of the column</param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.Rollback">
            <summary>
            Rollback the currently running transaction.
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.Select(System.String,System.String,System.String)">
            <summary>
            Get values from a table
            </summary>
            <param name="what">The columns to select</param>
            <param name="from">The table to select from</param>
            <param name="where">The where clause to limit the selection</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.Select(System.String,System.String)">
            <summary>
            Get values from a table
            </summary>
            <param name="what">The columns to select</param>
            <param name="from">The table to select from</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.SelectScalar(System.String,System.String,System.String)">
            <summary>
            Get a single value from a table
            </summary>
            <param name="what">The columns to select</param>
            <param name="from">The table to select from</param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.SelectScalar(System.String,System.String)">
            <summary>
            Get a single value from a table
            </summary>
            <param name="what">The columns to select</param>
            <param name="from">The table to select from</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.TableExists(System.String)">
            <summary>
            Check if a table already exists
            </summary>
            <param name="tableName">The name of the table that you want to check on.</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.Update(System.String,System.String[],System.String[])">
            <summary>
            Update the values in a table
            </summary>
            <param name="table">The name of the table to update</param>
            <param name="columns">The names of the columns.</param>
            <param name="columnValues">The values for the columns in the same order as the names.</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Migration.Framework.ITransformationProvider.Update(System.String,System.String[],System.String[],System.String)">
            <summary>
            Update the values in a table
            </summary>
            <param name="table">The name of the table to update</param>
            <param name="columns">The names of the columns.</param>
            <param name="values">The values for the columns in the same order as the names.</param>
            <param name="where">A where clause to limit the update</param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.Migration.Framework.Loggers.IAttachableLogger">
            <summary>
            ILogger interface. 
            Implicit in this interface is that the logger will delegate actual
            logging to the <see cref="T:Pure.Data.Migration.Framework.Loggers.ILogWriter"/>(s) that have been attached
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Framework.Loggers.IAttachableLogger.Attach(Pure.Data.Migration.Framework.Loggers.ILogWriter)">
            <summary>
            Attach an <see cref="T:Pure.Data.Migration.Framework.Loggers.ILogWriter"/>
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.Loggers.IAttachableLogger.Detach(Pure.Data.Migration.Framework.Loggers.ILogWriter)">
            <summary>
            Detach an <see cref="T:Pure.Data.Migration.Framework.Loggers.ILogWriter"/>
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Pure.Data.Migration.Framework.Loggers.ILogWriter">
            <summary>
            Handles writing a message to the log medium (i.e. file, console)
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Framework.Loggers.ILogWriter.Write(System.String,System.Object[])">
            <summary>
            Write this message
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Pure.Data.Migration.Framework.Loggers.ILogWriter.WriteLine(System.String,System.Object[])">
            <summary>
            Write this message, as a line
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="T:Pure.Data.Migration.Framework.Loggers.Logger">
            <summary>
            Text logger for the migration mediator
            </summary>
        </member>
        <member name="T:Pure.Data.Migration.Framework.Migration">
            <summary>
            A migration is a group of transformation applied to the database schema
            (or sometimes data) to port the database from one version to another.
            The <c>Up()</c> method must apply the modifications (eg.: create a table)
            and the <c>Down()</c> method must revert, or rollback the modifications
            (eg.: delete a table).
            <para>
            Each migration must be decorated with the <c>[Migration(0)]</c> attribute.
            Each migration number (0) must be unique, or else a 
            <c>DuplicatedVersionException</c> will be trown.
            </para>
            <para>
            All migrations are executed inside a transaction. If an exception is
            thrown, the transaction will be rolledback and transformations wont be
            applied.
            </para>
            <para>
            It is best to keep a limited number of transformation inside a migration
            so you can easely move from one version of to another with fine grain
            modifications.
            You should give meaningful name to the migration class and prepend the
            migration number to the filename so they keep ordered, eg.: 
            <c>002_CreateTableTest.cs</c>.
            </para>
            <para>
            Use the <c>Database</c> property to apply transformation and the
            <c>Logger</c> property to output informations in the console (or other).
            For more details on transformations see
            <see cref="T:Pure.Data.Migration.Framework.ITransformationProvider">ITransformationProvider</see>.
            </para>
            </summary>
            <example>
            The following migration creates a new Customer table.
            (File <c>003_AddCustomerTable.cs</c>)
            <code>
            [Migration(3)]
            public class AddCustomerTable : Migration
            {
            	public override void Up()
            	{
            		Database.AddTable("Customer",
            	                  new Column("Name", typeof(string), 50),
            	                  new Column("Address", typeof(string), 100)
            	                 );
            	}
            	public override void Down()
            	{
            		Database.RemoveTable("Customer");
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:Pure.Data.Migration.Framework.Migration.Up">
            <summary>
            Defines tranformations to port the database to the current version.
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Framework.Migration.AfterUp">
            <summary>
            This is run after the Up transaction has been committed
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Framework.Migration.Down">
            <summary>
            Defines transformations to revert things done in <c>Up</c>.
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Framework.Migration.AfterDown">
            <summary>
            This is run after the Down transaction has been committed
            </summary>
        </member>
        <member name="P:Pure.Data.Migration.Framework.Migration.Database">
            <summary>
            Represents the database.
            <see cref="T:Pure.Data.Migration.Framework.ITransformationProvider"></see>.
            </summary>
            <seealso cref="T:Pure.Data.Migration.Framework.ITransformationProvider">Migration.Framework.ITransformationProvider</seealso>
        </member>
        <member name="M:Pure.Data.Migration.Framework.Migration.InitializeOnce(System.String[])">
            <summary>
            This gets called once on the first migration object.
            </summary>
        </member>
        <member name="T:Pure.Data.Migration.Framework.MigrationAttribute">
            <summary>
            Describe a migration
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Framework.MigrationAttribute.#ctor(System.Int64)">
            <summary>
            Describe the migration
            </summary>
            <param name="version">The unique version of the migration.</param>	
        </member>
        <member name="P:Pure.Data.Migration.Framework.MigrationAttribute.Version">
            <summary>
            The version reflected by the migration
            </summary>
        </member>
        <member name="P:Pure.Data.Migration.Framework.MigrationAttribute.Ignore">
            <summary>
            Set to <c>true</c> to ignore this migration.
            </summary>
        </member>
        <member name="T:Pure.Data.Migration.Framework.MigrationException">
            <summary>
            Base class for migration errors.
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.Framework.SchemaBuilder.SchemaBuilder.AddTable(System.String)">
            <summary>
            Adds a Table to be created to the Schema
            </summary>
            <param name="name">Table name to be created</param>
            <returns>SchemaBuilder for chaining</returns>
        </member>
        <member name="M:Pure.Data.Migration.Framework.SchemaBuilder.SchemaBuilder.RenameTable(System.String)">
            <summary>
            Reference an existing table.
            </summary>
            <param name="newName">Table to reference</param>
            <returns>SchemaBuilder for chaining</returns>
        </member>
        <member name="M:Pure.Data.Migration.Framework.SchemaBuilder.SchemaBuilder.WithTable(System.String)">
            <summary>
            Reference an existing table.
            </summary>
            <param name="name">Table to reference</param>
            <returns>SchemaBuilder for chaining</returns>
        </member>
        <member name="M:Pure.Data.Migration.Framework.SchemaBuilder.SchemaBuilder.AddColumn(System.String)">
            <summary>
            Adds a Column to be created
            </summary>
            <param name="name">Column name to be added</param>
            <returns>IColumnOptions to restrict chaining</returns>
        </member>
        <member name="M:Pure.Data.Migration.Framework.StringUtils.ToHumanName(System.String)">
            <summary>
            Convert a classname to something more readable.
            ex.: CreateATable => Create a table
            </summary>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Migration.Framework.StringUtils.ReplaceOnce(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="template"></param>
            <param name="placeholder"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.Migration.IDbMigratorService">
            <summary>
            一个抽象的数据迁移服务。
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.IDbMigratorService.MigrateUp(Pure.Data.Migration.MigrateOption)">
            <summary>
            执行数据迁移。
            </summary>
        </member>
        <member name="M:Pure.Data.Migration.IDbMigratorService.MigrateDown(Pure.Data.Migration.MigrateOption)">
            <summary>
            执行回滚。
            </summary>
        </member>
        <member name="F:Pure.Data.Pooling.PooledMemoryStream._trackedMemoryStream">
            <summary>
              The tracked memory stream.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.PooledMemoryStream.#ctor(System.Int32,Pure.Data.OutputActionDelegate)">
            <summary>
              Builds a pooled memory stream.
            </summary>
            <param name="capacity">The capacity of the backing stream.</param>
        </member>
        <member name="P:Pure.Data.Pooling.PooledMemoryStream.MemoryStream">
            <summary>
              The memory stream.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.PooledMemoryStream.ToString">
            <summary>
              Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:Pure.Data.Pooling.IMemoryStreamPool.MaximumMemoryStreamCapacity">
            <summary>
              Maximum capacity a <see cref="T:System.IO.MemoryStream"/> might have in order to be able to return
              to pool. Defaults to <see cref="F:Pure.Data.Pooling.MemoryStreamPool.DefaultMaximumMemoryStreamCapacity"/>.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.IMemoryStreamPool.MinimumMemoryStreamCapacity">
            <summary>
              Minimum capacity a <see cref="T:System.IO.MemoryStream"/> should have when created and this is the
              minimum capacity of all streams stored in the pool. Defaults to <see cref="F:Pure.Data.Pooling.MemoryStreamPool.DefaultMinimumMemoryStreamCapacity"/>.
            </summary>
        </member>
        <member name="F:Pure.Data.Pooling.MemoryStreamPool.DefaultMaximumMemoryStreamCapacity">
            <summary>
              Default maximum memory stream capacity. Shared by all <see cref="T:Pure.Data.Pooling.IMemoryStreamPool"/>
              instances, defaults to 512KB.
            </summary>
        </member>
        <member name="F:Pure.Data.Pooling.MemoryStreamPool.DefaultMinimumMemoryStreamCapacity">
            <summary>
              Default minimum memory stream capacity. Shared by all <see cref="T:Pure.Data.Pooling.IMemoryStreamPool"/>
              instances, defaults to 4KB.
            </summary>
        </member>
        <member name="F:Pure.Data.Pooling.MemoryStreamPool._maximumItemCapacity">
            <summary>
              Backing field for <see cref="P:Pure.Data.Pooling.MemoryStreamPool.MaximumMemoryStreamCapacity"/>.
            </summary>
        </member>
        <member name="F:Pure.Data.Pooling.MemoryStreamPool._minimumItemCapacity">
            <summary>
              Backing field for <see cref="P:Pure.Data.Pooling.MemoryStreamPool.MinimumMemoryStreamCapacity"/>
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.MemoryStreamPool.#ctor(Pure.Data.OutputActionDelegate)">
            <summary>
              Builds the specialized pool.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.MemoryStreamPool.Instance">
            <summary>
              Thread-safe pool instance.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.MemoryStreamPool.MaximumMemoryStreamCapacity">
            <summary>
              Maximum capacity a <see cref="T:System.IO.MemoryStream"/> might have in order to be able to return
              to pool. Defaults to <see cref="F:Pure.Data.Pooling.MemoryStreamPool.DefaultMaximumMemoryStreamCapacity"/>.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.MemoryStreamPool.MinimumMemoryStreamCapacity">
            <summary>
              Minimum capacity a <see cref="T:System.IO.MemoryStream"/> should have when created and this is the
              minimum capacity of all streams stored in the pool. Defaults to <see cref="F:Pure.Data.Pooling.MemoryStreamPool.DefaultMinimumMemoryStreamCapacity"/>.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.IParameterizedObjectPool`2.Diagnostics">
            <summary>
              Gets or sets the Diagnostics class for the current Object Pool, whose goal is to record
              data about how the pool operates. By default, however, an object pool records anything,
              in order to be most efficient; in any case, you can enable it through the <see
              cref="P:Pure.Data.Pooling.ObjectPoolDiagnostics.Enabled"/> property.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.IParameterizedObjectPool`2.FactoryMethod">
            <summary>
              Gets the Factory method that will be used for creating new objects.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.IParameterizedObjectPool`2.KeysInPoolCount">
            <summary>
              Gets the count of the keys currently handled by the pool.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.IParameterizedObjectPool`2.MaximumPoolSize">
            <summary>
              Gets or sets the maximum number of objects that could be available at the same time in
              the pool.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.IParameterizedObjectPool`2.GetObject(`0)">
            <summary>
              Gets an object linked to given key.
            </summary>
            <param name="key">The key linked to the object.</param>
            <returns>The objects linked to given key.</returns>
        </member>
        <member name="F:Pure.Data.Pooling.ParameterizedObjectPool`2._diagnostics">
            <summary>
              Backing field for <see cref="P:Pure.Data.Pooling.ParameterizedObjectPool`2.Diagnostics"/>.
            </summary>
        </member>
        <member name="F:Pure.Data.Pooling.ParameterizedObjectPool`2._maximumPoolSize">
            <summary>
              Backing field for <see cref="P:Pure.Data.Pooling.ParameterizedObjectPool`2.MaximumPoolSize"/>.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.ParameterizedObjectPool`2.Diagnostics">
            <summary>
              Gets or sets the Diagnostics class for the current Object Pool, whose goal is to record
              data about how the pool operates. By default, however, an object pool records anything,
              in order to be most efficient; in any case, you can enable it through the <see
              cref="P:Pure.Data.Pooling.ObjectPoolDiagnostics.Enabled"/> property.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.ParameterizedObjectPool`2.FactoryMethod">
            <summary>
              Gets the Factory method that will be used for creating new objects.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.ParameterizedObjectPool`2.KeysInPoolCount">
            <summary>
              Gets the count of the keys currently handled by the pool.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.ParameterizedObjectPool`2.MaximumPoolSize">
            <summary>
              Gets or sets the maximum number of objects that could be available at the same time in
              the pool.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.ParameterizedObjectPool`2.#ctor">
            <summary>
              Initializes a new pool with default settings.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.ParameterizedObjectPool`2.#ctor(System.Int32)">
            <summary>
              Initializes a new pool with specified maximum pool size.
            </summary>
            <param name="maximumPoolSize">The maximum pool size limit.</param>
        </member>
        <member name="M:Pure.Data.Pooling.ParameterizedObjectPool`2.#ctor(System.Func{`0,`1})">
            <summary>
              Initializes a new pool with specified factory method.
            </summary>
            <param name="factoryMethod">The factory method that will be used to create new objects.</param>
        </member>
        <member name="M:Pure.Data.Pooling.ParameterizedObjectPool`2.#ctor(System.Int32,System.Func{`0,`1})">
            <summary>
              Initializes a new pool with specified factory method and maximum size.
            </summary>
            <param name="maximumPoolSize">The maximum pool size limit.</param>
            <param name="factoryMethod">The factory method that will be used to create new objects.</param>
        </member>
        <member name="M:Pure.Data.Pooling.ParameterizedObjectPool`2.Clear">
            <summary>
              Clears the parameterized pool and each inner pool stored inside it.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.ParameterizedObjectPool`2.GetObject(`0)">
            <summary>
              Gets an object linked to given key.
            </summary>
            <param name="key">The key linked to the object.</param>
            <returns>The objects linked to given key.</returns>
        </member>
        <member name="M:Pure.Data.Pooling.PooledStringBuilder.#ctor(System.Int32)">
            <summary>
              Builds a pooled string builder.
            </summary>
            <param name="capacity">The capacity of the string builder.</param>
        </member>
        <member name="P:Pure.Data.Pooling.PooledStringBuilder.StringBuilder">
            <summary>
              The string builder.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.PooledStringBuilder.ToString">
            <summary>
              Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Pure.Data.Pooling.PooledStringBuilder.ClearStringBuilder(Pure.Data.Pooling.PooledObject)">
            <summary>
              Clears the <see cref="P:Pure.Data.Pooling.PooledStringBuilder.StringBuilder"/> property, using specific methods depending on
              the framework for which ObjectPool has been compiled.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.IStringBuilderPool.MaximumStringBuilderCapacity">
            <summary>
              Maximum capacity a <see cref="T:System.Text.StringBuilder"/> might have in order to be able to return
              to pool. Defaults to <see cref="F:Pure.Data.Pooling.StringBuilderPool.DefaultMaximumStringBuilderCapacity"/>.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.IStringBuilderPool.MinimumStringBuilderCapacity">
            <summary>
              Minimum capacity a <see cref="T:System.Text.StringBuilder"/> should have when created and this is the
              minimum capacity of all builders stored in the pool. Defaults to <see cref="F:Pure.Data.Pooling.StringBuilderPool.DefaultMinimumStringBuilderCapacity"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.IStringBuilderPool.GetObject(System.String)">
            <summary>
              Returns a pooled string builder using given string as initial value.
            </summary>
            <param name="value">The string used to initialize the value of the instance.</param>
            <returns>A pooled string builder.</returns>
        </member>
        <member name="F:Pure.Data.Pooling.StringBuilderPool.DefaultMaximumStringBuilderCapacity">
            <summary>
              Default maximum string builder capacity. Shared by all <see cref="T:Pure.Data.Pooling.IStringBuilderPool"/>
              instances, defaults to 524288 characters.
            </summary>
        </member>
        <member name="F:Pure.Data.Pooling.StringBuilderPool.DefaultMinimumStringBuilderCapacity">
            <summary>
              Default minimum string builder capacity. Shared by all <see cref="T:Pure.Data.Pooling.IStringBuilderPool"/>
              instances, defaults to 4096 characters.
            </summary>
        </member>
        <member name="F:Pure.Data.Pooling.StringBuilderPool._maximumItemCapacity">
            <summary>
              Backing field for <see cref="P:Pure.Data.Pooling.StringBuilderPool.MaximumStringBuilderCapacity"/>.
            </summary>
        </member>
        <member name="F:Pure.Data.Pooling.StringBuilderPool._minimumItemCapacity">
            <summary>
              Backing field for <see cref="P:Pure.Data.Pooling.StringBuilderPool.MinimumStringBuilderCapacity"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.StringBuilderPool.#ctor">
            <summary>
              Builds the specialized pool.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.StringBuilderPool.Instance">
            <summary>
              Thread-safe pool instance.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.StringBuilderPool.MaximumStringBuilderCapacity">
            <summary>
              Maximum capacity a <see cref="T:System.Text.StringBuilder"/> might have in order to be able to return
              to pool. Defaults to <see cref="F:Pure.Data.Pooling.StringBuilderPool.DefaultMaximumStringBuilderCapacity"/>.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.StringBuilderPool.MinimumStringBuilderCapacity">
            <summary>
              Minimum capacity a <see cref="T:System.Text.StringBuilder"/> should have when created and this is the
              minimum capacity of all builders stored in the pool. Defaults to <see cref="F:Pure.Data.Pooling.StringBuilderPool.DefaultMinimumStringBuilderCapacity"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.StringBuilderPool.GetObject(System.String)">
            <summary>
              Returns a pooled string builder using given string as initial value.
            </summary>
            <param name="value">The string used to initialize the value of the instance.</param>
            <returns>A pooled string builder.</returns>
        </member>
        <member name="P:Pure.Data.Pooling.ITimedObjectPool`1.Timeout">
            <summary>
              When pooled objects have not been used for a time greater than <see cref="P:Pure.Data.Pooling.ITimedObjectPool`1.Timeout"/>,
              then they will be destroyed by a cleaning task.
            </summary>
        </member>
        <member name="F:Pure.Data.Pooling.TimedObjectPool`1._timeout">
            <summary>
              Backing field for <see cref="P:Pure.Data.Pooling.TimedObjectPool`1.Timeout"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.TimedObjectPool`1.#ctor(System.TimeSpan)">
            <summary>
              Initializes a new timed pool with default settings and specified timeout.
            </summary>
            <param name="timeout">The timeout of each pooled object.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="timeout"/> is less than or equal to <see cref="F:System.TimeSpan.Zero"/>.
            </exception>
        </member>
        <member name="M:Pure.Data.Pooling.TimedObjectPool`1.#ctor(System.Int32,System.TimeSpan)">
            <summary>
              Initializes a new timed pool with specified maximum pool size and timeout.
            </summary>
            <param name="maximumPoolSize">The maximum pool size limit.</param>
            <param name="timeout">The timeout of each pooled object.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maximumPoolSize"/> is less than or equal to zero. <paramref
              name="timeout"/> is less than or equal to <see cref="F:System.TimeSpan.Zero"/>.
            </exception>
        </member>
        <member name="M:Pure.Data.Pooling.TimedObjectPool`1.#ctor(System.Func{`0},System.TimeSpan)">
            <summary>
              Initializes a new timed pool with specified factory method and timeout.
            </summary>
            <param name="factoryMethod">The factory method that will be used to create new objects.</param>
            <param name="timeout">The timeout of each pooled object.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="timeout"/> is less than or equal to <see cref="F:System.TimeSpan.Zero"/>.
            </exception>
        </member>
        <member name="M:Pure.Data.Pooling.TimedObjectPool`1.#ctor(System.Int32,System.Func{`0},System.TimeSpan)">
            <summary>
              Initializes a new timed pool with specified factory method, maximum size and timeout.
            </summary>
            <param name="maximumPoolSize">The maximum pool size limit.</param>
            <param name="factoryMethod">The factory method that will be used to create new objects.</param>
            <param name="timeout">The timeout of each pooled object.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maximumPoolSize"/> is less than or equal to zero. <paramref
              name="timeout"/> is less than or equal to <see cref="F:System.TimeSpan.Zero"/>.
            </exception>
        </member>
        <member name="P:Pure.Data.Pooling.TimedObjectPool`1.Timeout">
            <summary>
              When pooled objects have not been used for a time greater than <see cref="P:Pure.Data.Pooling.TimedObjectPool`1.Timeout"/>,
              then they will be destroyed by a cleaning task.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.TimedObjectPool`1.CreatePooledObject">
            <summary>
              Creates a new pooled object, initializing its info.
            </summary>
            <returns>A new pooled object.</returns>
        </member>
        <member name="M:Pure.Data.Pooling.TimedObjectPool`1.CreatePooledObjectAsync(System.Threading.CancellationToken,System.Boolean)">
            <summary>
              Creates a new pooled object, initializing its info.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <param name="continueOnCapturedContext">
              Whether async calls should continue on a captured synchronization context.
            </param>
            <returns>A new pooled object.</returns>
        </member>
        <member name="P:Pure.Data.Pooling.EvictionSettings.Default">
            <summary>
              Default eviction settings.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.EvictionSettings.Delay">
            <summary>
              The delay specified when an eviction job is scheduled. Default value is <see cref="F:System.TimeSpan.Zero"/>.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.EvictionSettings.Enabled">
            <summary>
              Whether eviction is enabled or not. By default, eviction is not enabled.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.EvictionSettings.Period">
            <summary>
              How frequent should be the eviction job. Default value is one minute.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.IEvictionTimer.Cancel(System.Guid)">
            <summary>
              Cancels a scheduled evicton action using a ticket returned by <see
              cref="M:Pure.Data.Pooling.IEvictionTimer.Schedule(System.Action,System.TimeSpan,System.TimeSpan)"/>.
            </summary>
            <param name="actionTicket">
              An eviction action ticket, which has been returned by <see cref="M:Pure.Data.Pooling.IEvictionTimer.Schedule(System.Action,System.TimeSpan,System.TimeSpan)"/>.
            </param>
        </member>
        <member name="M:Pure.Data.Pooling.IEvictionTimer.Schedule(System.Action,System.TimeSpan,System.TimeSpan)">
            <summary>
              Schedules an eviction action.
            </summary>
            <param name="action">Eviction action.</param>
            <param name="delay">Start delay.</param>
            <param name="period">Schedule period.</param>
            <returns>
              A ticket which identifies the scheduled eviction action, it can be used to cancel the
              scheduled action via <see cref="M:Pure.Data.Pooling.IEvictionTimer.Cancel(System.Guid)"/> method.
            </returns>
        </member>
        <member name="M:Pure.Data.Pooling.EvictionTimer.Finalize">
            <summary>
              Finalizer for <see cref="T:Pure.Data.Pooling.EvictionTimer"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.EvictionTimer.Cancel(System.Guid)">
            <summary>
              Cancels a scheduled evicton action using a ticket returned by <see
              cref="M:Pure.Data.Pooling.EvictionTimer.Schedule(System.Action,System.TimeSpan,System.TimeSpan)"/>.
            </summary>
            <param name="actionTicket">
              An eviction action ticket, which has been returned by <see cref="M:Pure.Data.Pooling.EvictionTimer.Schedule(System.Action,System.TimeSpan,System.TimeSpan)"/>.
            </param>
        </member>
        <member name="M:Pure.Data.Pooling.EvictionTimer.Dispose">
            <summary>
              Disposes the eviction timer, making it unusable.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.EvictionTimer.Schedule(System.Action,System.TimeSpan,System.TimeSpan)">
            <summary>
              Schedules an eviction action.
            </summary>
            <param name="action">Eviction action.</param>
            <param name="delay">Start delay.</param>
            <param name="period">Schedule period.</param>
            <returns>
              A ticket which identifies the scheduled eviction action, it can be used to cancel the
              scheduled action via <see cref="M:Pure.Data.Pooling.EvictionTimer.Cancel(System.Guid)"/> method.
            </returns>
        </member>
        <member name="M:Pure.Data.Pooling.EvictionTimer.Dispose(System.Boolean)">
            <summary>
              Disposes all action timers.
            </summary>
            <param name="disposing">False if called by the finalizer, true otherwise.</param>
        </member>
        <member name="P:Pure.Data.Pooling.IObjectPool`1.AsyncFactoryMethod">
            <summary>
              Gets the async Factory method that will be used for creating new objects with
              async/await pattern.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.IObjectPool`1.Diagnostics">
            <summary>
              Gets or sets the Diagnostics class for the current Object Pool, whose goal is to record
              data about how the pool operates. By default, however, an object pool records anything,
              in order to be most efficient; in any case, you can enable it through the <see
              cref="P:Pure.Data.Pooling.ObjectPoolDiagnostics.Enabled"/> property.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.IObjectPool`1.FactoryMethod">
            <summary>
              Gets the Factory method that will be used for creating new objects.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.IObjectPool`1.MaximumPoolSize">
            <summary>
              Gets or sets the maximum number of objects that could be available at the same time in
              the pool.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.IObjectPool`1.ObjectsInPoolCount">
            <summary>
              Gets the count of the objects currently in the pool.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.IObjectPool`1.Clear">
            <summary>
              Clears the pool and destroys each object stored inside it.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.IObjectPool`1.GetObject">
            <summary>
              Gets a monitored object from the pool.
            </summary>
            <returns>A monitored object from the pool.</returns>
            <exception cref="T:System.InvalidOperationException">
              If a custom async factory method has been specified, this exception is thrown in order
              not to perform a sync-over-async operation, which might lead to deadlocks.
            </exception>
        </member>
        <member name="M:Pure.Data.Pooling.IObjectPool`1.GetObjectAsync(System.Threading.CancellationToken,System.Boolean)">
            <summary>
              Gets a monitored object from the pool.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <param name="continueOnCapturedContext">
              Whether async calls should continue on a captured synchronization context.
            </param>
            <returns>A monitored object from the pool.</returns>
        </member>
        <member name="F:Pure.Data.Pooling.ObjectPool.DefaultPoolMaximumSize">
            <summary>
              The default maximum size for the pool. It is set to 16.
            </summary>
        </member>
        <member name="T:Pure.Data.Pooling.ObjectPool`1">
            <summary>
              Generic object pool.
            </summary>
            <typeparam name="T">
              The type of the object that which will be managed by the pool. The pooled object have to be
              a sub-class of PooledObject.
            </typeparam>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPool`1.#ctor">
            <summary>
              Initializes a new pool with default settings.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPool`1.#ctor(System.Int32)">
            <summary>
              Initializes a new pool with specified maximum pool size.
            </summary>
            <param name="maximumPoolSize">The maximum pool size limit.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maximumPoolSize"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPool`1.#ctor(System.Func{`0})">
            <summary>
              Initializes a new pool with specified factory method.
            </summary>
            <param name="factoryMethod">The factory method that will be used to create new objects.</param>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPool`1.#ctor(System.Func{System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{`0}})">
            <summary>
              Initializes a new pool with specified factory method.
            </summary>
            <param name="asyncFactoryMethod">
              The async factory method that will be used to create new objects.
            </param>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPool`1.#ctor(System.Int32,System.Func{`0})">
            <summary>
              Initializes a new pool with specified factory method and maximum size.
            </summary>
            <param name="maximumPoolSize">The maximum pool size limit.</param>
            <param name="factoryMethod">The factory method that will be used to create new objects.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maximumPoolSize"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPool`1.#ctor(System.Int32,System.Func{System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{`0}})">
            <summary>
              Initializes a new pool with specified factory method and maximum size.
            </summary>
            <param name="maximumPoolSize">The maximum pool size limit.</param>
            <param name="asyncFactoryMethod">
              The async factory method that will be used to create new objects.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maximumPoolSize"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPool`1.#ctor(Pure.Data.Pooling.EvictionSettings)">
            <summary>
              Initializes a new pool with specified eviction settings.
            </summary>
            <param name="evictionSettings">Settings for the validation and eviction job.</param>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPool`1.#ctor(System.Int32,System.Func{`0},Pure.Data.Pooling.EvictionSettings,Pure.Data.Pooling.IEvictionTimer)">
            <summary>
              Initializes a new pool with specified factory method, maximum size, eviction timer and settings.
            </summary>
            <param name="maximumPoolSize">The maximum pool size limit.</param>
            <param name="factoryMethod">The factory method that will be used to create new objects.</param>
            <param name="evictionSettings">Settings for the validation and eviction job.</param>
            <param name="evictionTimer">
              The eviction timer used to schedule an async validation and eviction job.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maximumPoolSize"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPool`1.#ctor(System.Int32,System.Func{System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{`0}},Pure.Data.Pooling.EvictionSettings,Pure.Data.Pooling.IEvictionTimer)">
            <summary>
              Initializes a new pool with specified factory method, maximum size, eviction timer and settings.
            </summary>
            <param name="maximumPoolSize">The maximum pool size limit.</param>
            <param name="asyncFactoryMethod">
              The async factory method that will be used to create new objects.
            </param>
            <param name="evictionSettings">Settings for the validation and eviction job.</param>
            <param name="evictionTimer">
              The eviction timer used to schedule an async validation and eviction job.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maximumPoolSize"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPool`1.#ctor(System.Int32,System.Func{`0},System.Func{System.Threading.CancellationToken,System.Boolean,System.Threading.Tasks.Task{`0}},Pure.Data.Pooling.EvictionSettings,Pure.Data.Pooling.IEvictionTimer,System.Boolean)">
            <summary>
              Initializes a new pool with specified factory method, maximum size, eviction timer and settings.
            </summary>
            <param name="maximumPoolSize">The maximum pool size limit.</param>
            <param name="factoryMethod">The factory method that will be used to create new objects.</param>
            <param name="asyncFactoryMethod">
              The async factory method that will be used to create new objects.
            </param>
            <param name="evictionSettings">Settings for the validation and eviction job.</param>
            <param name="evictionTimer">
              The eviction timer used to schedule an async validation and eviction job.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="maximumPoolSize"/> is less than or equal to zero.
            </exception>
        </member>
        <member name="P:Pure.Data.Pooling.ObjectPool`1.AsyncFactoryMethod">
            <summary>
              Gets the async Factory method that will be used for creating new objects with
              async/await pattern.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.ObjectPool`1.Diagnostics">
            <summary>
              Gets the Diagnostics class for the current Object Pool, whose goal is to record data
              about how the pool operates. By default, however, an object pool records anything; you
              have to enable it through the <see cref="P:Pure.Data.Pooling.ObjectPoolDiagnostics.Enabled"/> property.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.ObjectPool`1.FactoryMethod">
            <summary>
              Gets the Factory method that will be used for creating new objects.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.ObjectPool`1.MaximumPoolSize">
            <summary>
              Gets or sets the maximum number of objects that could be available at the same time in
              the pool.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.ObjectPool`1.ObjectsInPoolCount">
            <summary>
              Gets the count of the objects currently in the pool.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.ObjectPool`1.PooledObjects">
            <summary>
              The concurrent buffer containing pooled objects.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPool`1.Finalize">
            <summary>
              ObjectPool destructor.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPool`1.Clear">
            <summary>
              Clears the pool and destroys each object stored inside it.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPool`1.GetObject">
            <summary>
              Gets a monitored object from the pool.
            </summary>
            <returns>A monitored object from the pool.</returns>
            <exception cref="T:System.InvalidOperationException">
              If a custom async factory method has been specified, this exception is thrown in order
              not to perform a sync-over-async operation, which might lead to deadlocks.
            </exception>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPool`1.GetObjectAsync(System.Threading.CancellationToken,System.Boolean)">
            <summary>
              Gets a monitored object from the pool.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <param name="continueOnCapturedContext">
              Whether async calls should continue on a captured synchronization context.
            </param>
            <returns>A monitored object from the pool.</returns>
        </member>
        <member name="F:Pure.Data.Pooling.ObjectPool`1._evictionTimer">
            <summary>
              Used to schedule an async validation and eviction job.
            </summary>
        </member>
        <member name="F:Pure.Data.Pooling.ObjectPool`1._evictionActionTicket">
            <summary>
              Stores the ticket returned by <see cref="M:Pure.Data.Pooling.IEvictionTimer.Schedule(System.Action,System.TimeSpan,System.TimeSpan)"/>, in order to be able to cancel the scheduled eviction action, if needed.
            </summary>
        </member>
        <member name="F:Pure.Data.Pooling.ObjectPool`1._lastPooledObjectId">
            <summary>
              Keeps track of last pooled object ID.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPool`1.CreatePooledObject">
            <summary>
              Creates a new pooled object, initializing its info.
            </summary>
            <returns>A new pooled object.</returns>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPool`1.CreatePooledObjectAsync(System.Threading.CancellationToken,System.Boolean)">
            <summary>
              Creates a new pooled object, initializing its info.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <param name="continueOnCapturedContext">
              Whether async calls should continue on a captured synchronization context.
            </param>
            <returns>A new pooled object.</returns>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPool`1.DestroyPooledObject(Pure.Data.Pooling.PooledObject)">
            <summary>
              Destroys given pooled object, disposing its resources.
            </summary>
            <param name="objectToDestroy">The pooled object that should be destroyed.</param>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPool`1.StartEvictor(Pure.Data.Pooling.EvictionSettings)">
            <summary>
              Starts the evictor process, if enabled.
            </summary>
            <param name="settings">Eviction settings.</param>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPoolDiagnostics.#ctor(System.Boolean)">
            <summary>
              Creates a new diagnostics object, ready to record Object Pool main events.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.ObjectPoolDiagnostics.Enabled">
            <summary>
              Gets or sets whether this object can record data about how the Pool operates.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.ObjectPoolDiagnostics.TotalLiveInstancesCount">
            <summary>
              Gets the total count of live instances, both in the pool and in use.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.ObjectPoolDiagnostics.ObjectResetFailedCount">
            <summary>
              Gets the count of object reset failures occured while the pool tried to re-add the
              object into the pool.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.ObjectPoolDiagnostics.ReturnedToPoolByResurrectionCount">
            <summary>
              Gets the total count of object that has been picked up by the GC, and returned to pool.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.ObjectPoolDiagnostics.PoolObjectHitCount">
            <summary>
              Gets the total count of successful accesses. The pool had a spare object to provide to
              the user without creating it on demand.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.ObjectPoolDiagnostics.PoolObjectMissCount">
            <summary>
              Gets the total count of unsuccessful accesses. The pool had to create an object in
              order to satisfy the user request.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.ObjectPoolDiagnostics.TotalInstancesCreated">
            <summary>
              Gets the total number of pooled objected created.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.ObjectPoolDiagnostics.TotalInstancesDestroyed">
            <summary>
              Gets the total number of objects destroyes, both in case of an pool overflow, and state corruption.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.ObjectPoolDiagnostics.PoolOverflowCount">
            <summary>
              Gets the number of objects been destroyed because the pool was full at the time of
              returning the object to the pool.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.ObjectPoolDiagnostics.ReturnedToPoolCount">
            <summary>
              Gets the total count of objects that been successfully returned to the pool.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPoolDiagnostics.IncrementObjectsCreatedCount">
            <summary>
              Increments the objects created count.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPoolDiagnostics.IncrementObjectsDestroyedCount">
            <summary>
              Increments the objects destroyed count.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPoolDiagnostics.IncrementPoolObjectHitCount">
            <summary>
              Increments the pool object hit count.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPoolDiagnostics.IncrementPoolObjectMissCount">
            <summary>
              Increments the pool object miss count.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPoolDiagnostics.IncrementPoolOverflowCount">
            <summary>
              Increments the pool overflow count.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPoolDiagnostics.IncrementResetStateFailedCount">
            <summary>
              Increments the reset state failed count.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPoolDiagnostics.IncrementObjectResurrectionCount">
            <summary>
              Increments the count of objects returned to pool by resurrection.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.ObjectPoolDiagnostics.IncrementReturnedToPoolCount">
            <summary>
              Increments the returned to pool count.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.PooledObject.PooledObjectInfo">
            <summary>
              Core information about this <see cref="T:Pure.Data.Pooling.PooledObject"/>.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObject.ReleaseResources">
            <summary>
              Releases the object resources. This method will be called by the pool manager when
              there is no need for this object anymore (decreasing pooled objects count, pool is
              being destroyed).
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObject.ResetState">
            <summary>
              Reset the object state. This method will be called by the pool manager just before the
              object is being returned to the pool.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObject.ValidateObject(Pure.Data.Pooling.PooledObjectValidationContext)">
            <summary>
              Validates pooled object state. An invalid object will not get into the pool and it will
              not be returned to consumers.
            </summary>
            <param name="validationContext">The validation context.</param>
            <returns>True if current pooled object is valid, false otherwise.</returns>
        </member>
        <member name="P:Pure.Data.Pooling.PooledObject.OnReleaseResource">
            <summary>
              Releases the object's resources.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.PooledObject.OnResetState">
            <summary>
              Reset the object state to allow this object to be re-used by other parts of the application.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.PooledObject.OnValidateObject">
            <summary>
              Validates pooled object state. An invalid object will not get into the pool and it will
              not be returned to consumers.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObject.Finalize">
            <summary>
              PooledObject destructor.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObject.Dispose">
            <summary>
              See <see cref="T:System.IDisposable"/> docs.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObject.op_Inequality(Pure.Data.Pooling.PooledObject,Pure.Data.Pooling.PooledObject)">
            <summary>
              Compares to pooled objects.
            </summary>
            <param name="left">Left object.</param>
            <param name="right">Right object.</param>
            <returns>True if given pooled objects are not equal, false otherwise.</returns>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObject.op_Equality(Pure.Data.Pooling.PooledObject,Pure.Data.Pooling.PooledObject)">
            <summary>
              Compares to pooled objects.
            </summary>
            <param name="left">Left object.</param>
            <param name="right">Right object.</param>
            <returns>True if given pooled objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObject.Equals(Pure.Data.Pooling.PooledObject)">
            <summary>
              Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
              true if the current object is equal to the <paramref name="other"/> parameter;
              otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObject.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Pure.Data.Pooling.PooledObject"/>.
            </summary>
            <returns>
              true if the specified <see cref="T:System.Object"/> is equal to the current <see
              cref="T:Pure.Data.Pooling.PooledObject"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Pure.Data.Pooling.PooledObject"/>.</param>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObject.GetHashCode">
            <summary>
              Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:Pure.Data.Pooling.PooledObject"/>.</returns>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObject.ToString">
            <summary>
              Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="F:Pure.Data.Pooling.PooledObjectBuffer`1.NoObjects">
            <summary>
              Used as default value for <see cref="F:Pure.Data.Pooling.PooledObjectBuffer`1._pooledObjects"/>.
            </summary>
        </member>
        <member name="F:Pure.Data.Pooling.PooledObjectBuffer`1._pooledObjects">
            <summary>
              The concurrent buffer containing pooled objects.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.PooledObjectBuffer`1.Capacity">
            <summary>
              The maximum capacity of this buffer.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.PooledObjectBuffer`1.Count">
            <summary>
              The number of objects stored in this buffer.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObjectBuffer`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObjectBuffer`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
              An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObjectBuffer`1.Resize(System.Int32)">
            <summary>
              Resizes the buffer so that it fits to given capacity. If new capacity is smaller than
              current capacity, then exceeding items are returned.
            </summary>
            <param name="newCapacity">The new capacity of this buffer.</param>
            <returns>All exceeding items.</returns>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObjectBuffer`1.TryDequeue(`0@)">
            <summary>
              Tries to dequeue an object from the buffer.
            </summary>
            <param name="pooledObject">Output pooled object.</param>
            <returns>True if <paramref name="pooledObject"/> has a value, false otherwise.</returns>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObjectBuffer`1.TryEnqueue(`0)">
            <summary>
              Tries to enqueue given object into the buffer.
            </summary>
            <param name="pooledObject">Input pooled object.</param>
            <returns>True if there was enough space to enqueue given object, false otherwise.</returns>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObjectBuffer`1.TryRemove(`0)">
            <summary>
              Tries to remove given object from the buffer.
            </summary>
            <param name="pooledObject">Pooled object to be removed.</param>
            <returns>True if <paramref name="pooledObject"/> has been removed, false otherwise.</returns>
        </member>
        <member name="F:Pure.Data.Pooling.PooledObjectState.Available">
            <summary>
              The object is inside the pool, waiting to be used.
            </summary>
        </member>
        <member name="F:Pure.Data.Pooling.PooledObjectState.Reserved">
            <summary>
              The object is outside the pool, waiting to return to the pool.
            </summary>
        </member>
        <member name="F:Pure.Data.Pooling.PooledObjectState.Disposed">
            <summary>
              The object has been disposed and cannot be used anymore.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.PooledObjectInfo.Id">
            <summary>
              An identifier which is unique inside the pool to which this object belongs. Moreover,
              this identifier increases monotonically as new objects are created.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.PooledObjectInfo.Payload">
            <summary>
              Payload which can be used to add custom information to a pooled object.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.PooledObjectInfo.State">
            <summary>
              Enumeration that is being managed by the pool to describe the object state - primary
              used to void cases where the resources are being releases twice.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.PooledObjectInfo.Handle">
            <summary>
              Internal action that is initialized by the pool while creating the object, this allows
              that object to re-add itself back to the pool.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObjectInfo.op_Inequality(Pure.Data.Pooling.PooledObjectInfo,Pure.Data.Pooling.PooledObjectInfo)">
            <summary>
              Compares to pooled objects info by <see cref="P:Pure.Data.Pooling.PooledObjectInfo.Id"/>.
            </summary>
            <param name="left">Left object.</param>
            <param name="right">Right object.</param>
            <returns>True if given pooled objects info are not equal, false otherwise.</returns>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObjectInfo.op_Equality(Pure.Data.Pooling.PooledObjectInfo,Pure.Data.Pooling.PooledObjectInfo)">
            <summary>
              Compares to pooled objects info by <see cref="P:Pure.Data.Pooling.PooledObjectInfo.Id"/>.
            </summary>
            <param name="left">Left object.</param>
            <param name="right">Right object.</param>
            <returns>True if given pooled objects info are equal, false otherwise.</returns>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObjectInfo.Equals(Pure.Data.Pooling.PooledObjectInfo)">
            <summary>
              Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
              true if the current object is equal to the <paramref name="other"/> parameter;
              otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObjectInfo.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Pure.Data.Pooling.PooledObjectInfo"/>.
            </summary>
            <returns>
              true if the specified <see cref="T:System.Object"/> is equal to the current <see
              cref="T:Pure.Data.Pooling.PooledObjectInfo"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Pure.Data.Pooling.PooledObjectInfo"/>.</param>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObjectInfo.GetHashCode">
            <summary>
              Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:Pure.Data.Pooling.PooledObjectInfo"/>.</returns>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObjectInfo.ToString">
            <summary>
              Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="F:Pure.Data.Pooling.PooledObjectDirection.Inbound">
            <summary>
              An object is returning to the pool.
            </summary>
        </member>
        <member name="F:Pure.Data.Pooling.PooledObjectDirection.Outbound">
            <summary>
              An object is getting out of the pool.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.PooledObjectValidationContext.Direction">
            <summary>
              Whether an object is going out of the pool or into the pool.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.PooledObjectValidationContext.PooledObject">
            <summary>
              The pooled object which has to be validated.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.PooledObjectValidationContext.PooledObjectInfo">
            <summary>
              Info about the pooled object which has to be validated.
            </summary>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObjectValidationContext.Inbound(Pure.Data.Pooling.PooledObject)">
            <summary>
              Used when an object is returning to the pool.
            </summary>
            <param name="pooledObject">The pooled object which has to be validated.</param>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObjectValidationContext.Outbound(Pure.Data.Pooling.PooledObject)">
            <summary>
              Used when an object is going out of the pool.
            </summary>
            <param name="pooledObject">The pooled object which has to be validated.</param>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObjectWrapper.Create``1(``0)">
            <summary>
              Wraps a given resource so that it can be put in the pool.
            </summary>
            <typeparam name="T">The type of the resource.</typeparam>
            <param name="resource">The resource to be wrapped.</param>
            <exception cref="T:System.ArgumentNullException">Given resource is null.</exception>
            <returns>A wrapper for given resource.</returns>
        </member>
        <member name="T:Pure.Data.Pooling.PooledObjectWrapper`1">
            <summary>
              PooledObject wrapper, for classes which cannot inherit from that class.
            </summary>
            <typeparam name="T">The type of the resource.</typeparam>
        </member>
        <member name="M:Pure.Data.Pooling.PooledObjectWrapper`1.#ctor(`0)">
            <summary>
              Wraps a given resource so that it can be put in the pool.
            </summary>
            <param name="resource">The resource to be wrapped.</param>
            <exception cref="T:System.ArgumentNullException">Given resource is null.</exception>
        </member>
        <member name="P:Pure.Data.Pooling.PooledObjectWrapper`1.InternalResource">
            <summary>
              The resource wrapped inside this class.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.PooledObjectWrapper`1.OnReleaseResources">
            <summary>
              Triggered by the pool manager when there is no need for this object anymore.
            </summary>
        </member>
        <member name="P:Pure.Data.Pooling.PooledObjectWrapper`1.OnResetState">
            <summary>
              Triggered by the pool manager just before the object is being returned to the pool.
            </summary>
        </member>
        <member name="P:Pure.Data.DatabasePoolPolicy.MaxPoolSize">
            <summary>
            最大连接池，默认16
            </summary>
        </member>
        <member name="P:Pure.Data.DatabasePoolPolicy.EnableDiagnostics">
            <summary>
            是否统计连接池信息
            </summary>
        </member>
        <member name="P:Pure.Data.DatabasePoolPolicy.EvictionSettings">
            <summary>
            定期移除池对象配置
            </summary>
        </member>
        <member name="P:Pure.Data.DatabasePoolPolicy.CreateFactory">
            <summary>
            创建工厂，如果指定了同步工厂，则可以使用同步和异步获取对象GetObject或者GetObjectAsync。
            </summary>
        </member>
        <member name="P:Pure.Data.DatabasePoolPolicy.AsyncCreateFactory">
            <summary>
            异步创建工厂，如果指定了异步工厂，则只能使用异步获取对象GetObjectAsync。
            </summary>
        </member>
        <member name="M:Pure.Data.DatabasePool.ShowStatisticsInfo">
            <summary>
            输出数据库连接池统计信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.PooledDatabase">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="P:Pure.Data.PooledDatabase.Connection">
            <summary>
            数据库连接对象
            </summary>
        </member>
        <member name="M:Pure.Data.PooledDatabase.Close">
            <summary>
            返还给数据库池，关闭数据库连接，当开启KeepConnectionAlive为true则不关闭
            </summary>
        </member>
        <member name="M:Pure.Data.PooledDatabase.SetConnectionAlive(System.Boolean)">
            <summary>
            设置连接持续，如果true需要手动释放
            </summary>
            <param name="enable"></param>
        </member>
        <member name="P:Pure.Data.PooledDatabase.Transaction">
            <summary>
            数据库事务对象
            </summary>
        </member>
        <member name="P:Pure.Data.PooledDatabase.LogHelper">
            <summary>
            日志输出助手
            </summary>
        </member>
        <member name="P:Pure.Data.PooledDatabase.Config">
            <summary>数据库配置</summary>
        </member>
        <member name="M:Pure.Data.PooledDatabase.InitDatabaseConfig(System.Action{Pure.Data.IDatabaseConfig})">
            <summary>
            初始化数据库配置
            </summary>
            <param name="InitConfig"></param>
        </member>
        <member name="M:Pure.Data.PooledDatabase.CreateAndInitConnection(System.Data.IDbConnection)">
            <summary>
            创建新的连接对象
            </summary>
        </member>
        <member name="M:Pure.Data.PooledDatabase.InitDbConnectionInfo(Pure.Data.DbConnectionMetaInfo,System.Data.IDbConnection)">
            <summary>
            初始化数据库连接信息
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Pure.Data.PooledDatabase.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Start a new transaction, can be nested, every call must be
            matched by a call to AbortTransaction or CompleteTransaction
            Use `using (var scope=db.Transaction) { scope.Complete(); }` to ensure correct semantics
            https://stackoverflow.com/questions/31711951/ef-transaction-and-async 不要用于多个异步的方法内，应该异步组合数据，同步提交
            TL;DR: You are better off doing everything you can in parallel and then commiting everything in a serial way.
            </summary>
            <param name="isolationLevel"></param>
        </member>
        <member name="M:Pure.Data.PooledDatabase.NewBatchCommand(Pure.Data.BatchOptions,System.Data.IDbTransaction)">
            <summary>
            创建批处理命令
            </summary>
            <param name="batchSize"></param>
            <param name="tran"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.PooledDatabase.UpdateWithOnlyParams``1(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            更新对象指定列的内容
            </summary>
            <param name="bindedObj"></param>
            <param name="_PrimaryKeyValues"></param>
            <param name="onlyProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.PooledDatabase.UpdateOnly``1(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.String[])">
            <summary>
            更新对象指定列的内容
            </summary>
            <param name="_PrimaryKeyValues"></param>
            <param name="bindedObj"></param>
            <param name="onlyProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.PooledDatabase.UpdateOnlyImpl``1(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.String[])">
            <summary>
            更新对象指定列的内容
            </summary>
            <param name="_PrimaryKeyValues"></param>
            <param name="bindedObj"></param>
            <param name="onlyProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.PooledDatabase.UpdateWithOnlyParamsAsync``1(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            更新对象指定列的内容
            </summary>
            <param name="bindedObj"></param>
            <param name="_PrimaryKeyValues"></param>
            <param name="onlyProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.PooledDatabase.UpdateOnlyAsync``1(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},System.String[])">
            <summary>
            更新对象变更的内容
            </summary>
            <param name="_PrimaryKeyValues"></param>
            <param name="bindedObj"></param>
            <param name="onlyProperties"></param>
            <returns></returns>
        </member>
        <member name="P:Pure.Data.SqlMap.CacheKey.Prefix">
            <summary>
            缓存前缀
            </summary>
        </member>
        <member name="T:Pure.Data.SqlMap.FifoCacheProvider">
            <summary>
            First In First Out
            </summary>
        </member>
        <member name="T:Pure.Data.SqlMap.LruCacheProvider">
            <summary>
            Least Recently Used
            </summary>
        </member>
        <member name="T:Pure.Data.SqlMap.MemoryCacheLevel">
            <summary>
            Summary description for MemoryCacheLevel.
            </summary>
        </member>
        <member name="F:Pure.Data.SqlMap.MemoryCacheLevel.Weak">
            <summary>
            Constant for weak caching
            This cache model is probably the best choice in most cases. It will increase
            performance for popular results, but it will absolutely release the memory to
            be used in allocating other objects, assuming that the results are not currently
            in use.
            References an object while still allowing it to be garbage collected.
            </summary>
        </member>
        <member name="F:Pure.Data.SqlMap.MemoryCacheLevel.Strong">
            <summary>
            Constant for strong caching.
            This cache model will guarantee that the results stay in memory until the cache 
            is explicitly flushed. This is ideal for results that are:
            <list>
            <item>very small</item>
            <item>absolutely static</item>
            <item>used very often</item>
            </list>
            The advantage is that performance will be very good for this particular query.
            The disadvantage is that if the memory used by these results is needed, then it
            will not be released to make room for other objects (possibly more important
            objects).
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMap.MemoryCacheLevel.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMap.MemoryCacheLevel.#ctor(System.String)">
            <summary>
            Creates a new instance of CacheLevel
            </summary>
            <param name="type">The type of the CacheLevel.</param>
        </member>
        <member name="P:Pure.Data.SqlMap.MemoryCacheLevel.ReferenceType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMap.MemoryCacheLevel.GetByRefenceType(System.String)">
            <summary>
            
            </summary>
            <param name="referenceType"></param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.SqlMap.MemoryCacheProvider.StrongReference">
            <summary>
            Class to implement a strong (permanent) reference.
            </summary>
        </member>
        <member name="P:Pure.Data.SqlMap.MemoryCacheProvider.StrongReference.Target">
            <summary>
            Gets the object (the target) referenced by this instance.
            </summary>
        </member>
        <member name="T:Pure.Data.SqlMap.FileWatcherLoader">
            <summary>
            文件监控加载器
            </summary>
        </member>
        <member name="T:Pure.Data.SqlMap.ISqlMapLoader">
            <summary>
            配置文件加载器
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMap.ISqlMapLoader.Load(Pure.Data.IDatabase)">
            <summary>
            加载配置文件
            </summary>
        </member>
        <member name="T:Pure.Data.SqlMap.LocalSqlMapLoader">
            <summary>
            本地文件配置加载器
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMap.LocalSqlMapLoader.WatchConfig(Pure.Data.IDatabase)">
            <summary>
            监控配置文件-热更新
            </summary>
            <param name="config"></param>
            <param name="config"></param>
        </member>
        <member name="T:Pure.Data.SqlMap.RequestContext">
            <summary>
            Sql 请求上下文
            </summary>
        </member>
        <member name="P:Pure.Data.SqlMap.RequestContext.OrderByText">
            <summary>
            用于分页的Orderby字符串
            </summary>
        </member>
        <member name="P:Pure.Data.SqlMap.RequestContext.RequestParameters">
            <summary>
            实际参数列表
            </summary>
        </member>
        <member name="T:Pure.Data.SqlMap.SqlMapManager">
            <summary>
            Sql map集合管理器
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapManager.Init(Pure.Data.IDatabase)">
            <summary>
            初始化
            </summary>
            <param name="config"></param>
            <param name="_ParameterPrefix"></param>
        </member>
        <member name="F:Pure.Data.SqlMap.SqlMapManager.statements">
            <summary>
            所有Statement
            </summary>
        </member>
        <member name="P:Pure.Data.SqlMap.SqlMapManager.HasInit">
            <summary>
            是否已经初始化
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapManager.Add(Pure.Data.SqlMap.SqlMapInfo,System.Boolean)">
            <summary>
            添加sqlmap
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapManager.BuildSqlMapResult(Pure.Data.IDatabase,System.String,System.String,System.Object)">
            <summary>
            构建Sql Map结果，延迟执行
            </summary>
            <param name="scope"></param>
            <param name="sqlID"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.SqlMap.SqlMapStatement">
            <summary>
            Sql map执行命令
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.FilterParameters(System.String,System.Object)">
            <summary>
            过滤用不上的参数，oracle会报错
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.GetStatementExecuteContext(System.Boolean)">
            <summary>
            获取实际执行的SQL和参数集合
            </summary>
            <param name="filterParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteReader(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回DataReader
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteScalar(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回Scalar
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.Execute(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回影响行数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecutePageList``1(System.Int32,System.Int32,System.Int32@,System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            转换为分页数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="total"></param>
            <param name="orderText"></param>
            <param name="parameters"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteList``1(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},System.Boolean)">
            <summary>
            执行并返回List
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteListWithRowDelegate``1(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回List
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteListByEmit``1(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回List,适合大数据量
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteModel``1(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回单个实体数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteModelByEmit``1(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回单个实体数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteDataTable(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteDataTableWithRowDelegate(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteDataSet(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回DataSet
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteDictionary``2(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回Dictionary
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteExpandoObject(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回dynamic
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteExpandoObjects(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回IEnumerable(dynamic)
            </summary>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteReaderAsync(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回DataReader
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteScalarAsync(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回Scalar
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteAsync(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回影响行数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecutePageListAsync``1(System.Int32,System.Int32,System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            转换为分页数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="total"></param>
            <param name="orderText"></param>
            <param name="parameters"></param>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteListAsync``1(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},System.Boolean)">
            <summary>
            执行并返回List
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteListWithRowDelegateAsync``1(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回List
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteListByEmitAsync``1(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回List,适合大数据量
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteModelAsync``1(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回单个实体数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteModelByEmitAsync``1(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回单个实体数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteDataTableAsync(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteDataTableWithRowDelegateAsync(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteDataSetAsync(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回DataSet
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteDictionaryAsync``2(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回Dictionary
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteExpandoObjectAsync(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回dynamic
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMap.SqlMapStatement.ExecuteExpandoObjectsAsync(System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            执行并返回IEnumerable(dynamic)
            </summary>
            <param name="transaction"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.SqlMap.StatementExecuteContext">
            <summary>
            实际执行的上下文参数
            </summary>
        </member>
        <member name="T:Pure.Data.SqlMap.Tags.TagType">
            <summary>
            标签类型
            </summary>
        </member>
        <member name="T:Pure.Data.SqlMap.Tags.SetTag">
            <summary>
            set 元素只会在至少有一个子元素的条件返回 SQL 子句的情况下才去插入“SET”子句。而且，若语句的结尾为“,”，set 元素也会将它们去除。
            </summary>
        </member>
        <member name="T:Pure.Data.SqlMap.Tags.WhereTag">
            <summary>
            where 元素只会在至少有一个子元素的条件返回 SQL 子句的情况下才去插入“WHERE”子句。而且，若语句的开头为“AND”或“OR”，where 元素也会将它们去除。
            </summary>
        </member>
        <member name="M:Pure.Data.SqlMap.XmlExt.GetValueInXmlAttributes(System.Xml.XmlNode,System.String,System.String,System.Boolean)">
            <summary>
            获取属性值
            </summary>
            <param name="collection"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="F:Pure.Data.SqlMap.XmlExt.STR_NBSP">
            <summary>
            空格
            </summary>
        </member>
        <member name="F:Pure.Data.SqlMap.XmlExt.STR_NEWLINE">
            <summary>
            换行
            </summary>
        </member>
        <member name="F:Pure.Data.SqlMap.XmlExt.STR_LT">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:Pure.Data.SqlMap.XmlExt.STR_LTE">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:Pure.Data.SqlMap.XmlExt.STR_GT">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:Pure.Data.SqlMap.XmlExt.STR_GTE">
            <summary>
            大于等于
            </summary>
        </member>
        <!-- 对于成员“F:Pure.Data.SqlMap.XmlExt.STR_AMP”忽略有格式错误的 XML 注释 -->
        <member name="F:Pure.Data.SqlMap.XmlExt.STR_APOS">
            <summary>
            单引号'
            </summary>
        </member>
        <member name="F:Pure.Data.SqlMap.XmlExt.STR_QUOT">
            <summary>
            双引号"
            </summary>
        </member>
        <member name="T:Pure.Data.DefaultValidatorExtensions">
            <summary>
            验证拓展类
            </summary>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.NotNull``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1})">
            <summary>
            验证不能为Null
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Null``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1})">
            <summary>
            验证是否为Null
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.NotEmpty``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1})">
            <summary>
            验证不能为Empty
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Empty``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1})">
            <summary>
            验证是否为Empty
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Length``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String},System.Int32,System.Int32,System.Boolean)">
            <summary>
            验证长度区间
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.LengthMaximum``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String},System.Int32,System.Boolean)">
            <summary>
            验证字符串最大长度
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="max"></param>
            <param name="canBeNull"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.LengthMinimum``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String},System.Int32,System.Boolean)">
            <summary>
            验证字符串最小长度
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="min"></param>
            <param name="canBeNull"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Length``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String},System.Func{``0,System.Int32},System.Func{``0,System.Int32},System.Boolean)">
            <summary>
            验证长度区间
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Length``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String},System.Int32,System.Boolean)">
            <summary>
            验证长度是否为指定长度
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="exactLength"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Length``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String},System.Func{``0,System.Int32},System.Boolean)">
            <summary>
            验证长度是否为指定长度
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="exactLength"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Matches``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String},System.String)">
            <summary>
            验证符合正则表达式规则
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Matches``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String},System.String,System.String)">
            <summary>
            验证符合正则表达式规则
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Matches``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String},System.Func{``0,System.String})">
            <summary>
            验证符合正则表达式规则
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Matches``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String},System.Text.RegularExpressions.Regex)">
            <summary>
            验证符合正则表达式规则
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="regex"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Matches``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String},System.Func{``0,System.Text.RegularExpressions.Regex})">
            <summary>
            验证符合正则表达式规则
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="regex"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Matches``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String},System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            验证符合正则表达式规则
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="expression"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Matches``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String},System.String,System.Text.RegularExpressions.RegexOptions,System.String)">
            <summary>
            验证符合正则表达式规则
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="expression"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Matches``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String},System.Func{``0,System.String},System.Text.RegularExpressions.RegexOptions)">
            <summary>
            验证符合正则表达式规则
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="expression"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.EmailAddress``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String})">
            <summary>
            验证是否为有效邮箱
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.NotEqual``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1},``1,System.Collections.IEqualityComparer)">
            <summary>
            验证是否不等于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="toCompare"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.NotEqual``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.IEqualityComparer)">
            <summary>
            验证是否不等于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="expression"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Equal``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1},``1,System.Collections.IEqualityComparer)">
            <summary>
            验证是否等于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="toCompare"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Equal``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.IEqualityComparer)">
            <summary>
            验证是否等于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="expression"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Must``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            根据Lambda表达验证
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Must``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            根据Lambda表达验证
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Must``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1},System.Func{``0,``1,Pure.Data.Validations.Validators.PropertyValidatorContext,System.Boolean})">
            <summary>
            根据Lambda表达验证
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.MustAsync``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1},System.Func{``1,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            根据Lambda表达验证
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.MustAsync``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1},System.Func{``0,``1,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            根据Lambda表达验证
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.MustAsync``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1},System.Func{``0,``1,Pure.Data.Validations.Validators.PropertyValidatorContext,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            根据Lambda表达验证
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.LessThan``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1},``1)">
            <summary>
            验证是否小于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="valueToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.LessThan``2(Pure.Data.Validations.Internal.RuleBuilder{``0,System.Nullable{``1}},``1)">
            <summary>
            验证是否小于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="valueToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.LessThanOrEqualTo``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1},``1)">
            <summary>
            验证是否小于或者等于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="valueToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.LessThanOrEqualTo``2(Pure.Data.Validations.Internal.RuleBuilder{``0,System.Nullable{``1}},``1)">
            <summary>
            验证是否小于或者等于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="valueToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.GreaterThan``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1},``1)">
            <summary>
            验证是否大于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="valueToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.GreaterThan``2(Pure.Data.Validations.Internal.RuleBuilder{``0,System.Nullable{``1}},``1)">
            <summary>
            验证是否大于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="valueToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.GreaterThanOrEqualTo``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1},``1)">
            <summary>
            验证是否大于或者等于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="valueToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.GreaterThanOrEqualTo``2(Pure.Data.Validations.Internal.RuleBuilder{``0,System.Nullable{``1}},``1)">
            <summary>
            验证是否大于或者等于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="valueToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.LessThan``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            验证是否小于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.LessThan``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})">
            <summary>
            验证是否小于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.LessThan``2(Pure.Data.Validations.Internal.RuleBuilder{``0,System.Nullable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            验证是否小于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.LessThan``2(Pure.Data.Validations.Internal.RuleBuilder{``0,System.Nullable{``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})">
            <summary>
            验证是否小于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.LessThanOrEqualTo``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            验证是否小于或者等于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.LessThanOrEqualTo``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})">
            <summary>
            验证是否小于或者等于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.LessThanOrEqualTo``2(Pure.Data.Validations.Internal.RuleBuilder{``0,System.Nullable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            验证是否小于或者等于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.LessThanOrEqualTo``2(Pure.Data.Validations.Internal.RuleBuilder{``0,System.Nullable{``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})">
            <summary>
            验证是否小于或者等于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.GreaterThan``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            验证是否大于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.GreaterThan``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})">
            <summary>
            验证是否大于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.GreaterThan``2(Pure.Data.Validations.Internal.RuleBuilder{``0,System.Nullable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            验证是否大于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.GreaterThan``2(Pure.Data.Validations.Internal.RuleBuilder{``0,System.Nullable{``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})">
            <summary>
            验证是否大于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.GreaterThanOrEqualTo``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            验证是否大于或者等于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="valueToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.GreaterThanOrEqualTo``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})">
            <summary>
            验证是否大于或者等于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="valueToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.GreaterThanOrEqualTo``2(Pure.Data.Validations.Internal.RuleBuilder{``0,System.Nullable{``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})">
            <summary>
            验证是否大于或者等于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="valueToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.GreaterThanOrEqualTo``2(Pure.Data.Validations.Internal.RuleBuilder{``0,System.Nullable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            验证是否大于或者等于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="valueToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Validate``1(Pure.Data.Validations.IValidator{``0},Pure.Data.IDatabase,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            验证对象数据，可指定验证某些属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="validator"></param>
            <param name="instance"></param>
            <param name="propertyExpressions"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Validate``1(Pure.Data.Validations.IValidator{``0},Pure.Data.IDatabase,``0,System.String[])">
            <summary>
            验证对象数据，可指定验证某些属性
            </summary>
            <param name="instance">The object to validate</param>
            <param name="properties">The names of the properties to validate.</param>
            <returns>A ValidationResult object containing any validation failures.</returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Validate``1(Pure.Data.Validations.IValidator{``0},Pure.Data.IDatabase,``0,Pure.Data.Validations.Internal.IValidatorSelector,System.String)">
            <summary>
            验证对象数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="validator"></param>
            <param name="instance"></param>
            <param name="selector"></param>
            <param name="ruleSet"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.ValidateAsync``1(Pure.Data.Validations.IValidator{``0},Pure.Data.IDatabase,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            验证对象数据，可指定验证某些属性
            </summary>
            <param name="validator">The current validator</param>
            <param name="instance">The object to validate</param>
            <param name="propertyExpressions">Expressions to specify the properties to validate</param>
            <returns>A ValidationResult object containing any validation failures</returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.ValidateAsync``1(Pure.Data.Validations.IValidator{``0},Pure.Data.IDatabase,``0,System.String[])">
            <summary>
            验证对象数据，可指定验证某些属性
            </summary>
            <param name="instance">The object to validate</param>
            <param name="properties">The names of the properties to validate.</param>
            <returns>A ValidationResult object containing any validation failures.</returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.ValidateAsync``1(Pure.Data.Validations.IValidator{``0},Pure.Data.IDatabase,``0,Pure.Data.Validations.Internal.IValidatorSelector,System.String)">
            <summary>
            验证对象数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="validator"></param>
            <param name="instance"></param>
            <param name="selector"></param>
            <param name="ruleSet"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.ValidateAndThrow``1(Pure.Data.Validations.IValidator{``0},Pure.Data.IDatabase,``0,System.String)">
            <summary>
            验证对象数据，不正确则抛出ValidationException异常
            </summary>
            <param name="validator">The validator this method is extending.</param>
            <param name="instance">The instance of the type we are validating.</param>
            <param name="ruleSet">Optional: a ruleset when need to validate against.</param>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.ValidateAndThrowAsync``1(Pure.Data.Validations.IValidator{``0},Pure.Data.IDatabase,``0,System.String)">
            <summary>
            验证对象数据，不正确则抛出ValidationException异常
            </summary>
            <param name="validator">The validator this method is extending.</param>
            <param name="instance">The instance of the type we are validating.</param>
            <param name="ruleSet">Optional: a ruleset when need to validate against.</param>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.InclusiveBetween``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1},``1,``1)">
            <summary>
            验证是否包含在指定区间
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.InclusiveBetween``2(Pure.Data.Validations.Internal.RuleBuilder{``0,System.Nullable{``1}},``1,``1)">
            <summary>
            验证是否包含在指定区间
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.ExclusiveBetween``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1},``1,``1)">
            <summary>
            验证是否不在指定区间
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.ExclusiveBetween``2(Pure.Data.Validations.Internal.RuleBuilder{``0,System.Nullable{``1}},``1,``1)">
            <summary>
            验证是否不在指定区间
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.CreditCard``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String})">
            <summary>
            验证是否是信用卡
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.IsInEnum``2(Pure.Data.Validations.Internal.RuleBuilder{``0,``1})">
            <summary>
            验证是否是指定枚举
            </summary>
            <typeparam name="T">Type of Enum being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.AsciiCoding``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String})">
            <summary>
            必须全部为非中文字符
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.UnicodeCoding``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String})">
            <summary>
            必须全部为中文字符
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Domain``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String})">
            <summary>
            校验域名格式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.IDCard``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String})">
            <summary>
            校验身份证格式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.IPv4``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String})">
            <summary>
            校验IPV4格式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.IPv6``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String})">
            <summary>
            校验IPV6格式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.IPMask``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String})">
            <summary>
            判断是否为IP子网掩码格式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Mobile``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String})">
            <summary>
            校验手机号码格式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Date``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String})">
            <summary>
            校验年-月-日格式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Time``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String})">
            <summary>
            是否为时间格式23:59:59
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Password``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String})">
            <summary>
            密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.StrongPassword``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String})">
            <summary>
            强密码(必须包含数字, 必须包含小写或大写字母,必须包含特殊符号, 至少8个字符，最多30个字符 )
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.UserName``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String})">
            <summary>
            必须以字母开头，包含字母、数字或下划线
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Telphone``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String})">
            <summary>
            验证是否为固定号码
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.WebSiteUrl``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String})">
            <summary>
            验证是否是网址
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.ZipCode``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String})">
            <summary>
            验证是否是邮政编码
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.QQNumber``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String})">
            <summary>
            验证是否是QQ号码
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.OrgCode``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String})">
            <summary>
            验证是否为组织机构代码
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.CreditCode``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String})">
            <summary>
            验证是否为统一社会编码
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Number``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String})">
            <summary>
            是否为数字
            </summary>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.Chinese``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String})">
            <summary>
            是否中文汉字
            </summary>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions.English``1(Pure.Data.Validations.Internal.RuleBuilder{``0,System.String})">
            <summary>
            是否英文字母
            </summary>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.DefaultValidatorExtensions2">
            <summary>
            验证拓展类
            </summary>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.NotNull(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            验证不能为Null
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.Null(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            验证是否为Null
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.NotEmpty(Pure.Data.Validations.Internal.RuleBuilder,System.Object)">
            <summary>
            验证不能为Empty
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.Empty(Pure.Data.Validations.Internal.RuleBuilder,System.Object)">
            <summary>
            验证是否为Empty
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.Length(Pure.Data.Validations.Internal.RuleBuilder,System.Int32,System.Int32,System.Boolean)">
            <summary>
            验证长度区间
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.LengthMaximum(Pure.Data.Validations.Internal.RuleBuilder,System.Int32,System.Boolean)">
            <summary>
            验证字符串最大长度
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="max"></param>
            <param name="canBeNull"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.LengthMinimum(Pure.Data.Validations.Internal.RuleBuilder,System.Int32,System.Boolean)">
            <summary>
            验证字符串最小长度
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="min"></param>
            <param name="canBeNull"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.Length(Pure.Data.Validations.Internal.RuleBuilder,System.Int32,System.Boolean)">
            <summary>
            验证长度是否为指定长度
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="exactLength"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.Matches(Pure.Data.Validations.Internal.RuleBuilder,System.String)">
            <summary>
            验证符合正则表达式规则
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.Matches(Pure.Data.Validations.Internal.RuleBuilder,System.String,System.String)">
            <summary>
            验证符合正则表达式规则
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.Matches(Pure.Data.Validations.Internal.RuleBuilder,System.Text.RegularExpressions.Regex)">
            <summary>
            验证符合正则表达式规则
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="regex"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.Matches(Pure.Data.Validations.Internal.RuleBuilder,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            验证符合正则表达式规则
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="expression"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.Matches(Pure.Data.Validations.Internal.RuleBuilder,System.String,System.Text.RegularExpressions.RegexOptions,System.String)">
            <summary>
            验证符合正则表达式规则
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="expression"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.EmailAddress(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            验证是否为有效邮箱
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.NotEqual(Pure.Data.Validations.Internal.RuleBuilder,System.Object,System.Collections.IEqualityComparer)">
            <summary>
            验证是否不等于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="toCompare"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.Equal(Pure.Data.Validations.Internal.RuleBuilder,System.Object,System.Collections.IEqualityComparer)">
            <summary>
            验证是否等于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="toCompare"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.LessThan(Pure.Data.Validations.Internal.RuleBuilder,System.IComparable)">
            <summary>
            验证是否小于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="valueToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.LessThanOrEqualTo(Pure.Data.Validations.Internal.RuleBuilder,System.IComparable)">
            <summary>
            验证是否小于或者等于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="valueToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.GreaterThan(Pure.Data.Validations.Internal.RuleBuilder,System.IComparable)">
            <summary>
            验证是否大于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="valueToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.GreaterThanOrEqualTo(Pure.Data.Validations.Internal.RuleBuilder,System.IComparable)">
            <summary>
            验证是否大于或者等于指定值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="valueToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.Validate(Pure.Data.Validations.IValidator,Pure.Data.IDatabase,System.Object,System.String[])">
            <summary>
            验证对象数据，可指定验证某些属性
            </summary>
            <param name="instance">The object to validate</param>
            <param name="properties">The names of the properties to validate.</param>
            <returns>A ValidationResult object containing any validation failures.</returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.Validate(Pure.Data.Validations.IValidator,Pure.Data.IDatabase,System.Object,Pure.Data.Validations.Internal.IValidatorSelector,System.String)">
            <summary>
            验证对象数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="validator"></param>
            <param name="instance"></param>
            <param name="selector"></param>
            <param name="ruleSet"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.ValidateAsync(Pure.Data.Validations.IValidator,Pure.Data.IDatabase,System.Object,System.String[])">
            <summary>
            验证对象数据，可指定验证某些属性
            </summary>
            <param name="instance">The object to validate</param>
            <param name="properties">The names of the properties to validate.</param>
            <returns>A ValidationResult object containing any validation failures.</returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.ValidateAsync(Pure.Data.Validations.IValidator,Pure.Data.IDatabase,System.Object,Pure.Data.Validations.Internal.IValidatorSelector,System.String)">
            <summary>
            验证对象数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="validator"></param>
            <param name="instance"></param>
            <param name="selector"></param>
            <param name="ruleSet"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.ValidateAndThrow(Pure.Data.Validations.IValidator,Pure.Data.IDatabase,System.Object,System.String)">
            <summary>
            验证对象数据，不正确则抛出ValidationException异常
            </summary>
            <param name="validator">The validator this method is extending.</param>
            <param name="instance">The instance of the type we are validating.</param>
            <param name="ruleSet">Optional: a ruleset when need to validate against.</param>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.ValidateAndThrowAsync(Pure.Data.Validations.IValidator,Pure.Data.IDatabase,System.Object,System.String)">
            <summary>
            验证对象数据，不正确则抛出ValidationException异常
            </summary>
            <param name="validator">The validator this method is extending.</param>
            <param name="instance">The instance of the type we are validating.</param>
            <param name="ruleSet">Optional: a ruleset when need to validate against.</param>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.InclusiveBetween(Pure.Data.Validations.Internal.RuleBuilder,System.IComparable,System.IComparable)">
            <summary>
            验证是否包含在指定区间
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.ExclusiveBetween(Pure.Data.Validations.Internal.RuleBuilder,System.IComparable,System.IComparable)">
            <summary>
            验证是否不在指定区间
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="ruleBuilder"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.CreditCard(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            验证是否是信用卡
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.IsInEnum(Pure.Data.Validations.Internal.RuleBuilder,System.Type)">
            <summary>
            验证是否是指定枚举
            </summary>
            <typeparam name="T">Type of Enum being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="ruleBuilder">The rule builder on which the validator should be defined</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.AsciiCoding(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            必须全部为非中文字符
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.UnicodeCoding(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            必须全部为中文字符
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.Domain(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            校验域名格式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.IDCard(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            校验身份证格式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.IPv4(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            校验IPV4格式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.IPv6(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            校验IPV6格式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.IPMask(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            判断是否为IP子网掩码格式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.Mobile(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            校验手机号码格式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.Date(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            校验年-月-日格式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.Time(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            是否为时间格式23:59:59
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.Password(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.StrongPassword(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            强密码(必须包含数字, 必须包含小写或大写字母,必须包含特殊符号, 至少8个字符，最多30个字符 )
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.UserName(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            必须以字母开头，包含字母、数字或下划线
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.Telphone(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            验证是否为固定号码
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.WebSiteUrl(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            验证是否是网址
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.ZipCode(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            验证是否是邮政编码
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.QQNumber(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            验证是否是QQ号码
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.OrgCode(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            验证是否为组织机构代码
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.CreditCode(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            验证是否为统一社会编码
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.Number(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            是否为数字
            </summary>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.Chinese(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            是否中文汉字
            </summary>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.DefaultValidatorExtensions2.English(Pure.Data.Validations.Internal.RuleBuilder)">
            <summary>
            是否英文字母
            </summary>
            <param name="ruleBuilder"></param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.Validations.CascadeMode">
            <summary>
            Specifies how rules should cascade when one fails.
            </summary>
        </member>
        <member name="F:Pure.Data.Validations.CascadeMode.Continue">
            <summary>
            When a rule fails, execution continues to the next rule.
            </summary>
        </member>
        <member name="F:Pure.Data.Validations.CascadeMode.StopOnFirstFailure">
            <summary>
            When a rule fails, validation is stopped and all other rules in the chain will not be executed.
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Severity">
            <summary>
            Specifies the severity of a rule. 
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.Comparer.TryCompare(System.IComparable,System.IComparable,System.Int32@)">
            <summary>
            Tries to compare the two objects.
            </summary>
            <param name="result">The resulting comparison value.</param>
            <returns>True if all went well, otherwise False.</returns>
        </member>
        <member name="M:Pure.Data.Validations.Internal.Comparer.Compare(System.IComparable,System.IComparable,System.Int32@)">
            <summary>
            Tries to do a proper comparison but may fail.
            First it tries the default comparison, if this fails, it will see 
            if the values are fractions. If they are, then it does a double 
            comparison, otherwise it does a long comparison.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.Comparer.GetComparisonResult(System.IComparable,System.IComparable)">
            <summary>
            Tries to compare the two objects, but will throw an exception if it fails.
            </summary>
            <returns>True on success, otherwise False.</returns>
        </member>
        <member name="M:Pure.Data.Validations.Internal.Comparer.GetEqualsResult(System.IComparable,System.IComparable)">
            <summary>
            Tries to compare the two objects, but will throw an exception if it fails.
            </summary>
            <returns>True on success, otherwise False.</returns>
        </member>
        <member name="T:Pure.Data.Validations.Internal.DefaultValidatorSelector">
            <summary>
            Default validator selector that will execute all rules that do not belong to a RuleSet.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.DefaultValidatorSelector.CanExecute(Pure.Data.Validations.IValidationRule,System.String,Pure.Data.Validations.ValidationContext)">
            <summary>
            Determines whether or not a rule should execute.
            </summary>
            <param name="rule">The rule</param>
            <param name="propertyPath">Property path (eg Customer.Address.Line1)</param>
            <param name="context">Contextual information</param>
            <returns>Whether or not the validator can execute.</returns>
        </member>
        <member name="T:Pure.Data.Validations.Internal.Extensions">
            <summary>
            Useful extensions
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.Extensions.GetMember(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Gets a MemberInfo from a member expression.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.Extensions.GetMember``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets a MemberInfo from a member expression.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.Extensions.SplitPascalCase(System.String)">
            <summary>
            Splits pascal case, so "FooBar" would become "Foo Bar"
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.Extensions.GetConstantExpresionFromConstant``2(``1)">
            <summary>
            Helper method to construct a constant expression from a constant.
            </summary>
            <typeparam name="T">Type of object being validated</typeparam>
            <typeparam name="TProperty">Type of property being validated</typeparam>
            <param name="valueToCompare">The value being compared</param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.Validations.Internal.IValidatorSelector">
            <summary>
            Determines whether or not a rule should execute.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.IValidatorSelector.CanExecute(Pure.Data.Validations.IValidationRule,System.String,Pure.Data.Validations.ValidationContext)">
            <summary>
            Determines whether or not a rule should execute.
            </summary>
            <param name="rule">The rule</param>
            <param name="propertyPath">Property path (eg Customer.Address.Line1)</param>
            <param name="context">Contextual information</param>
            <returns>Whether or not the validator can execute.</returns>
        </member>
        <member name="T:Pure.Data.Validations.Internal.MemberNameValidatorSelector">
            <summary>
            Selects validators that are associated with a particular property.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.MemberNameValidatorSelector.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new instance of MemberNameValidatorSelector.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.MemberNameValidatorSelector.CanExecute(Pure.Data.Validations.IValidationRule,System.String,Pure.Data.Validations.ValidationContext)">
            <summary>
            Determines whether or not a rule should execute.
            </summary>
            <param name="rule">The rule</param>
            <param name="propertyPath">Property path (eg Customer.Address.Line1)</param>
            <param name="context">Contextual information</param>
            <returns>Whether or not the validator can execute.</returns>
        </member>
        <member name="M:Pure.Data.Validations.Internal.MemberNameValidatorSelector.FromExpressions``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
             Creates a MemberNameValidatorSelector from a collection of expressions.
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Internal.MessageFormatter">
            <summary>
            Assists in the construction of validation messages.
            </summary>
        </member>
        <member name="F:Pure.Data.Validations.Internal.MessageFormatter.PropertyName">
            <summary>
            Default Property Name placeholder.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.MessageFormatter.AppendArgument(System.String,System.Object)">
            <summary>
            Adds a value for a validation message placeholder.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Validations.Internal.MessageFormatter.AppendPropertyName(System.String)">
            <summary>
            Appends a property name to the message.
            </summary>
            <param name="name">The name of the property</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Validations.Internal.MessageFormatter.AppendAdditionalArguments(System.Object[])">
            <summary>
            Adds additional arguments to the message for use with standard string placeholders.
            </summary>
            <param name="additionalArgs">Additional arguments</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Validations.Internal.MessageFormatter.BuildMessage(System.String)">
            <summary>
            Constructs the final message from the specified template. 
            </summary>
            <param name="messageTemplate">Message template</param>
            <returns>The message with placeholders replaced with their appropriate values</returns>
        </member>
        <member name="T:Pure.Data.Validations.Internal.PropertyChain">
            <summary>
            Represents a chain of properties
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.PropertyChain.#ctor">
            <summary>
            Creates a new PropertyChain.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.PropertyChain.#ctor(Pure.Data.Validations.Internal.PropertyChain)">
            <summary>
            Creates a new PropertyChain based on another.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.PropertyChain.Add(System.Reflection.MemberInfo)">
            <summary>
            Adds a MemberInfo instance to the chain
            </summary>
            <param name="member">Member to add</param>
        </member>
        <member name="M:Pure.Data.Validations.Internal.PropertyChain.Add(System.String)">
            <summary>
            Adds a property name to the chain
            </summary>
            <param name="propertyName">Name of the property to add</param>
        </member>
        <member name="M:Pure.Data.Validations.Internal.PropertyChain.AddIndexer(System.Object)">
            <summary>
            Adds an indexer to the property chain. For example, if the following chain has been constructed: 
            Parent.Child
            then calling AddIndexer(0) would convert this to:
            Parent.Child[0]
            </summary>
            <param name="indexer"></param>
        </member>
        <member name="M:Pure.Data.Validations.Internal.PropertyChain.ToString">
            <summary>
            Creates a string representation of a property chain.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.PropertyChain.IsChildChainOf(Pure.Data.Validations.Internal.PropertyChain)">
            <summary>
            Checks if the current chain is the child of another chain.
            For example, if chain1 were for "Parent.Child" and chain2 were for "Parent.Child.GrandChild" then
            chain2.IsChildChainOf(chain1) would be true.
            </summary>
            <param name="parentChain">The parent chain to compare</param>
            <returns>True if the current chain is the child of the other chain, otherwise false</returns>
        </member>
        <member name="M:Pure.Data.Validations.Internal.PropertyChain.BuildPropertyName(System.String)">
            <summary>
            Builds a property path.
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Internal.PropertyRule">
            <summary>
            Defines a rule associated with a property.
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Internal.PropertyRule.Member">
            <summary>
            Property associated with this rule.
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Internal.PropertyRule.PropertyFunc">
            <summary>
            Function that can be invoked to retrieve the value of the property.
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Internal.PropertyRule.LoadDisplayName">
            <summary>
            String source that can be used to retrieve the display name (if null, falls back to the property name)
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Internal.PropertyRule.RuleSet">
            <summary>
            Rule set that this rule belongs to (if specified)
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Internal.PropertyRule.OnFailure">
            <summary>
            Function that will be invoked if any of the validators associated with this rule fail.
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Internal.PropertyRule.CurrentValidator">
            <summary>
            The current validator being configured by this rule.
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Internal.PropertyRule.TypeToValidate">
            <summary>
            Type of the property being validated
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Internal.PropertyRule.CascadeMode">
            <summary>
            Cascade mode for this rule.
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Internal.PropertyRule.Validators">
            <summary>
            Validators associated with this rule.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.PropertyRule.#ctor(System.Reflection.MemberInfo,System.Func{System.Object,System.Object},System.Linq.Expressions.LambdaExpression,System.Func{Pure.Data.Validations.CascadeMode},System.Type,System.Type,System.Func{Pure.Data.Validations.Internal.PropertyRule,System.String})">
            <summary>
            Creates a new property rule.
            </summary>
            <param name="member">Property</param>
            <param name="propertyFunc">Function to get the property value</param>
            <param name="expression">Lambda expression used to create the rule</param>
            <param name="cascadeModeThunk">Function to get the cascade mode.</param>
            <param name="typeToValidate">Type to validate</param>
            <param name="containerType">Container type that owns the property</param>
        </member>
        <member name="M:Pure.Data.Validations.Internal.PropertyRule.Create``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{Pure.Data.Validations.Internal.PropertyRule,System.String})">
            <summary>
            Creates a new property rule from a lambda expression.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.PropertyRule.Create``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{Pure.Data.Validations.CascadeMode},System.Func{Pure.Data.Validations.Internal.PropertyRule,System.String})">
            <summary>
            Creates a new property rule from a lambda expression.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.PropertyRule.AddValidator(Pure.Data.Validations.Validators.IPropertyValidator)">
            <summary>
            Adds a validator to the rule.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.PropertyRule.ReplaceValidator(Pure.Data.Validations.Validators.IPropertyValidator,Pure.Data.Validations.Validators.IPropertyValidator)">
            <summary>
            Replaces a validator in this rule. Used to wrap validators.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.PropertyRule.RemoveValidator(Pure.Data.Validations.Validators.IPropertyValidator)">
            <summary>
            Remove a validator in this rule.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.PropertyRule.ClearValidators">
            <summary>
            Clear all validators from this rule.
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Internal.PropertyRule.PropertyName">
            <summary>
            Returns the property name for the property being validated.
            Returns null if it is not a property being validated (eg a method call)
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Internal.PropertyRule.MessageBuilder">
            <summary>
            Allows custom creation of an error message
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Internal.PropertyRule.DependentRules">
            <summary>
            Dependent rules
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.PropertyRule.GetDisplayName">
            <summary>
            Display name for the property. 
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.PropertyRule.Validate(Pure.Data.Validations.ValidationContext)">
            <summary>
            Performs validation using a validation context and returns a collection of Validation Failures.
            </summary>
            <param name="context">Validation Context</param>
            <returns>A collection of validation failures</returns>
        </member>
        <member name="M:Pure.Data.Validations.Internal.PropertyRule.ValidateAsync(Pure.Data.Validations.ValidationContext,System.Threading.CancellationToken)">
            <summary>
            Performs asynchronous validation using a validation context and returns a collection of Validation Failures.
            </summary>
            <param name="context">Validation Context</param>
            <returns>A collection of validation failures</returns>
        </member>
        <member name="M:Pure.Data.Validations.Internal.PropertyRule.InvokePropertyValidator(Pure.Data.Validations.ValidationContext,Pure.Data.Validations.Validators.IPropertyValidator,System.String)">
            <summary>
            Invokes a property validator using the specified validation context.
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Internal.RuleBuilder`2">
            <summary>
            验证规则构造器
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="P:Pure.Data.Validations.Internal.RuleBuilder`2.Rule">
            <summary>
            The rule being created by this RuleBuilder.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.RuleBuilder`2.#ctor(Pure.Data.Validations.Internal.PropertyRule)">
            <summary>
            Creates a new instance of the <see cref="T:Pure.Data.Validations.Internal.RuleBuilder`2">RuleBuilder</see> class.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.RuleBuilder`2.SetValidator(Pure.Data.Validations.Validators.IPropertyValidator)">
            <summary>
            Sets the validator associated with the rule.
            </summary>
            <param name="validator">The validator to set</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Validations.Internal.RuleBuilder`2.SetValidator(Pure.Data.Validations.IValidator{`1})">
            <summary>
            Sets the validator associated with the rule. Use with complex properties where an IValidator instance is already declared for the property type.
            </summary>
            <param name="validator">The validator to set</param>
        </member>
        <member name="M:Pure.Data.Validations.Internal.RuleBuilder`2.SetValidator``1(System.Func{`0,``0})">
            <summary>
            Sets the validator associated with the rule. Use with complex properties where an IValidator instance is already declared for the property type.
            </summary>
            <param name="validatorProvider">The validator provider to set</param>
        </member>
        <member name="P:Pure.Data.Validations.Internal.RuleBuilder.Rule">
            <summary>
            The rule being created by this RuleBuilder.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.RuleBuilder.#ctor(Pure.Data.Validations.Internal.PropertyRule)">
            <summary>
            Creates a new instance of the <see cref="T:Pure.Data.Validations.Internal.RuleBuilder`2">RuleBuilder</see> class.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.RuleBuilder.SetValidator(Pure.Data.Validations.Validators.IPropertyValidator)">
            <summary>
            Sets the validator associated with the rule.
            </summary>
            <param name="validator">The validator to set</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Validations.Internal.RuleBuilder.SetValidator``1(Pure.Data.Validations.IValidator{``0})">
            <summary>
            Sets the validator associated with the rule. Use with complex properties where an IValidator instance is already declared for the property type.
            </summary>
            <param name="validator">The validator to set</param>
        </member>
        <member name="T:Pure.Data.Validations.Internal.RulesetValidatorSelector">
            <summary>
            Selects validators that belong to the specified rulesets.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.RulesetValidatorSelector.#ctor(System.String[])">
            <summary>
            Creates a new instance of the RulesetValidatorSelector.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Internal.RulesetValidatorSelector.CanExecute(Pure.Data.Validations.IValidationRule,System.String,Pure.Data.Validations.ValidationContext)">
            <summary>
            Determines whether or not a rule should execute.
            </summary>
            <param name="rule">The rule</param>
            <param name="propertyPath">Property path (eg Customer.Address.Line1)</param>
            <param name="context">Contextual information</param>
            <returns>Whether or not the validator can execute.</returns>
        </member>
        <member name="T:Pure.Data.Validations.IValidationRule">
            <summary>
            Defines a rule associated with a property which can have multiple validators.
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.IValidationRule.Validators">
            <summary>
            The validators that are grouped under this rule.
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.IValidationRule.RuleSet">
            <summary>
            Name of the rule-set to which this rule belongs.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.IValidationRule.Validate(Pure.Data.Validations.ValidationContext)">
            <summary>
            Performs validation using a validation context and returns a collection of Validation Failures.
            </summary>
            <param name="context">Validation Context</param>
            <returns>A collection of validation failures</returns>
        </member>
        <member name="M:Pure.Data.Validations.IValidationRule.ValidateAsync(Pure.Data.Validations.ValidationContext,System.Threading.CancellationToken)">
            <summary>
            Performs validation using a validation context and returns a collection of Validation Failures asynchronoulsy.
            </summary>
            <param name="context">Validation Context</param>
            <param name="cancellation">Cancellation token</param>
            <returns>A collection of validation failures</returns>
        </member>
        <member name="T:Pure.Data.Validations.IValidator`1">
            <summary>
            Defines a validator for a particualr type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Pure.Data.Validations.IValidator`1.Validate(`0)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance to validate</param>
            <returns>A ValidationResult object containing any validation failures.</returns>
        </member>
        <member name="M:Pure.Data.Validations.IValidator`1.ValidateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Validate the specified instance asynchronously
            </summary>
            <param name="instance">The instance to validate</param>
            <returns>A ValidationResult object containing any validation failures.</returns>
        </member>
        <member name="P:Pure.Data.Validations.IValidator`1.CascadeMode">
            <summary>
            Sets the cascade mode for all rules within this validator.
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.IValidator">
            <summary>
            Defines a validator for a particular type.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.IValidator.Validate(System.Object)">
            <summary>
            Validates the specified instance
            </summary>
            <param name="instance"></param>
            <returns>A ValidationResult containing any validation failures</returns>
        </member>
        <member name="M:Pure.Data.Validations.IValidator.ValidateAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Validates the specified instance asynchronously
            </summary>
            <param name="instance"></param>
            <param name="cancellation">Cancellation token</param>
            <returns>A ValidationResult containing any validation failures</returns>
        </member>
        <member name="M:Pure.Data.Validations.IValidator.Validate(Pure.Data.Validations.ValidationContext)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="context">A ValidationContext</param>
            <returns>A ValidationResult object containy any validation failures.</returns>
        </member>
        <member name="M:Pure.Data.Validations.IValidator.ValidateAsync(Pure.Data.Validations.ValidationContext,System.Threading.CancellationToken)">
            <summary>
            Validates the specified instance asynchronously.
            </summary>
            <param name="context">A ValidationContext</param>
            <param name="cancellation">Cancellation token</param>
            <returns>A ValidationResult object containy any validation failures.</returns>		
        </member>
        <member name="M:Pure.Data.Validations.IValidator.CanValidateInstancesOfType(System.Type)">
            <summary>
            Checks to see whether the validator can validate objects of the specified type
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.StringSecurityHelper">
            <summary>字符串助手类</summary>
        </member>
        <member name="M:Pure.Data.Validations.StringSecurityHelper.CheckForXss(System.String)">
            <summary>
            Checks a string for XSS.
            Returns the possibility factor of the string containing a XSS attack.
            If it's 71+, then its a potential attack
            If it's 201+, then it's a XSS attack.
            Most real XSS attacks score from 700 and up
            </summary>
            <param name="input">The input.</param>
            <returns>The posibility factor</returns>
        </member>
        <member name="M:Pure.Data.Validations.StringSecurityHelper.CheckForSqlInjection(System.String)">
            <summary>
            Checks for SQL injection.
            Returns the possibility factor of the string containing a SQL injection attack.
            If it's 71+, then its a potential attack
            If it's 201+, then it's a SQL injection attack.
            Most real SQL injection attacks score from 300 and up
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Validations.StringSecurityHelper.NormalizeData(System.String)">
            <summary>
            This is only to be used when checking for attacks. It decodes html, removes multispaces, tabs and newlines,
            converts hex to ascii and converts unicode to ansi.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Validations.StringSecurityHelper.ConvertUnicode(System.String)">
            <summary>
            Converts long and short format unicode to ASCII
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Validations.StringSecurityHelper.RemoveMultipleSpaces(System.String)">
            <summary>
            Removes several spaces in a row and replaces them with a single space
            </summary>
            <param name="input">The input.</param>
            <returns>Returns the string with removed spaces</returns>
        </member>
        <member name="M:Pure.Data.Validations.StringSecurityHelper.RemoveTabsAndNewLines(System.String)">
            <summary>
            Removes tabs and newlines from the input
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Validations.StringSecurityHelper.ConvertHexToAscii(System.String)">
            <summary>
            Converts the hex input to a string in ASCII
            </summary>
            <param name="hexValue">The hex string.</param>
            <returns>Returns a ASCII string</returns>
        </member>
        <member name="T:Pure.Data.Validations.Resources.IResourceAccessorBuilder">
            <summary>
            Builds a delegate for retrieving a localised resource from a resource type and property name.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Resources.IResourceAccessorBuilder.GetResourceAccessor(System.Type,System.String)">
            <summary>
            Gets a function that can be used to retrieve a message from a resource type and resource name.
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Resources.StaticResourceAccessorBuilder">
            <summary>
            Builds a delegate for retrieving a localised resource from a resource type and property name.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Resources.StaticResourceAccessorBuilder.GetResourceAccessor(System.Type,System.String)">
            <summary>
            Builds a function used to retrieve the resource.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Resources.StaticResourceAccessorBuilder.GetResourceProperty(System.Type@,System.String@)">
            <summary>
            Gets the PropertyInfo for a resource.
            ResourceType and ResourceName are ref parameters to allow derived types
            to replace the type/name of the resource before the delegate is constructed.
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Resources.FallbackAwareResourceAccessorBuilder">
            <summary>
            Implemenetation of IResourceAccessorBuilder that can fall back to the default resource provider.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Resources.FallbackAwareResourceAccessorBuilder.GetResourceProperty(System.Type@,System.String@)">
            <summary>
            Gets the PropertyInfo for a resource.
            ResourceType and ResourceName are ref parameters to allow derived types
            to replace the type/name of the resource before the delegate is constructed.
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Resources.IStringSource">
            <summary>
            Provides error message templates
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Resources.IStringSource.GetString">
            <summary>
            Construct the error message template
            </summary>
            <returns>Error message template</returns>
        </member>
        <member name="P:Pure.Data.Validations.Resources.IStringSource.ResourceName">
            <summary>
            The name of the resource if localized.
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Resources.IStringSource.ResourceType">
            <summary>
            The type of the resource provider if localized.
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Resources.LocalizedStringSource">
            <summary>
            Represents a localized string.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Resources.LocalizedStringSource.#ctor(System.Type,System.String,Pure.Data.Validations.Resources.IResourceAccessorBuilder)">
            <summary>
            Creates a new instance of the LocalizedErrorMessageSource class using the specified resource name and resource type.
            </summary>
            <param name="resourceType">The resource type</param>
            <param name="resourceName">The resource name</param>
            <param name="resourceAccessorBuilder">Strategy used to construct the resource accessor</param>
        </member>
        <member name="M:Pure.Data.Validations.Resources.LocalizedStringSource.CreateFromExpression(System.Linq.Expressions.Expression{System.Func{System.String}},Pure.Data.Validations.Resources.IResourceAccessorBuilder)">
            <summary>
            Creates an IErrorMessageSource from an expression: () => MyResources.SomeResourceName
            </summary>
            <param name="expression">The expression </param>
            <param name="resourceProviderSelectionStrategy">Strategy used to construct the resource accessor</param>
            <returns>Error message source</returns>
        </member>
        <member name="M:Pure.Data.Validations.Resources.LocalizedStringSource.GetString">
            <summary>
            Construct the error message template
            </summary>
            <returns>Error message template</returns>
        </member>
        <member name="P:Pure.Data.Validations.Resources.LocalizedStringSource.ResourceName">
            <summary>
            The name of the resource if localized.
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Resources.LocalizedStringSource.ResourceType">
            <summary>
            The type of the resource provider if localized.
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Resources.StaticStringSource">
            <summary>
            Represents a static string.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Resources.StaticStringSource.#ctor(System.String)">
            <summary>
            Creates a new StringErrorMessageSource using the specified error message as the error template.
            </summary>
            <param name="message">The error message template.</param>
        </member>
        <member name="M:Pure.Data.Validations.Resources.StaticStringSource.GetString">
            <summary>
            Construct the error message template
            </summary>
            <returns>Error message template</returns>
        </member>
        <member name="P:Pure.Data.Validations.Resources.StaticStringSource.ResourceName">
            <summary>
            The name of the resource if localized.
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Resources.StaticStringSource.ResourceType">
            <summary>
            The type of the resource provider if localized.
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Results.ValidationFailure">
            <summary>
            验证不通过信息
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Results.ValidationFailure.#ctor(System.String,System.String)">
            <summary>
            Creates a new validation failure.
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Results.ValidationFailure.#ctor(System.String,System.String,System.Object)">
            <summary>
            Creates a new ValidationFailure.
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Results.ValidationFailure.PropertyName">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Results.ValidationFailure.ErrorMessage">
            <summary>
            The error message
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Results.ValidationFailure.AttemptedValue">
            <summary>
            The property value that caused the failure.
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Results.ValidationFailure.CustomState">
            <summary>
            Custom state associated with the failure.
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Results.ValidationFailure.Severity">
            <summary>
            Custom severity level associated with the failure.
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Results.ValidationFailure.ErrorCode">
            <summary>
            Gets or sets the error code.
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Results.ValidationFailure.FormattedMessageArguments">
            <summary>
            Gets or sets the formatted message arguments.
            These are values for custom formatted message in validator resource files
            Same formatted message can be reused in UI and with same number of format placeholders
            Like "Value {0} that you entered should be {1}"
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Results.ValidationFailure.FormattedMessagePlaceholderValues">
            <summary>
            Gets or sets the formatted message placeholder values.
            Similar placeholders are defined in fluent validation library (check documentation)
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Results.ValidationFailure.ResourceName">
            <summary>
            The resource name used for building the message
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Results.ValidationFailure.ToString">
            <summary>
            Creates a textual representation of the failure.
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Results.ValidationResult">
            <summary>
            验证结果
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Results.ValidationResult.IsValid">
            <summary>
            是否验证通过
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Results.ValidationResult.Errors">
            <summary>
            验证错误信息
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Validators.CreditCardValidator">
            <summary>
            Ensures that the property value is a valid credit card number.
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Validators.AsciiCodingValidator">
            <summary>
            字段必须全部为非中文字符
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Validators.CreditCodeValidator.CreditCodeUtility.Validate(System.String)">
            <summary>
            校验社会统一信用代码
            </summary>
            <param name="orgcode"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Validations.Validators.CreditCodeValidator.CreditCodeUtility.GetOrgCode(System.String)">
            <summary>
            获取社会统一信用代码
            </summary>
            <param name="CreditCode"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Validations.Validators.CreditCodeValidator.CreditCodeUtility.Validate">
            <summary>
            校验社会统一信用代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Validations.Validators.CreditCodeValidator.CreditCodeUtility.GetOrgCode">
            <summary>
            获取社会统一信用代码
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.Validations.Validators.DateValidator">
            <summary>
            年-月-日
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Validators.DomainValidator">
            <summary>
            域名验证
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Validators.EnglishValidator">
            <summary>
            不符合网址的格式
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Validators.IDCardValidator.ValidateIDNUM(System.String)">
            <summary>
            验证大陆身份证
            </summary>
            <param name="idnum"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Validations.Validators.IDCardValidator.ChangeIdnum15To18(System.String)">
            <summary>
            15身份证转为18位身份证
            </summary>
            <param name="idnum15"></param>
            <returns></returns>
        </member>
        <member name="M:Pure.Data.Validations.Validators.IDCardValidator.ChangeIdnum18To15(System.String)">
            <summary>
            18身份证转为15位身份证
            </summary>
            <param name="idnum18"></param>
            <returns></returns>
        </member>
        <member name="T:Pure.Data.Validations.Validators.IPMaskValidator">
            <summary>
            IP 子网掩码格式
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Validators.IPV4Validator">
            <summary>
            IP 4格式
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Validators.IPV6Validator">
            <summary>
            IP 6格式
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Validators.MobileValidator">
            <summary>
            字段不符合手机的格式
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Validators.NumberValidator">
            <summary>
            不符合网址的格式
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Validators.PasswordValidator">
            <summary>
            密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Validators.QQNumberValidator">
            <summary>
            QQ号码格式
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Validators.StrongPasswordValidator">
            <summary>
            强密码(必须包含数字, 必须包含小写或大写字母,必须包含特殊符号, 至少8个字符，最多30个字符 )
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Validators.TelphoneValidator">
            <summary>
            字段不符合固定号码的格式
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Validators.TimeValidator">
            <summary>
            时间格式
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Validators.UnicodeCodingValidator">
            <summary>
            字段必须全部为中文字符
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Validators.UserNameValidator">
            <summary>
            必须以字母开头，包含字母、数字或下划线
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Validators.WebSiteUrlValidator">
            <summary>
            不符合网址的格式
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Validators.ZipCodeValidator">
            <summary>
            字段不符合邮政编码的格式
            </summary>
        </member>
        <member name="T:Pure.Data.Validations.Validators.IPropertyValidator">
            <summary>
            A custom property validator.
            This interface should not be implemented directly in your code as it is subject to change.
            Please inherit from <see cref="T:Pure.Data.Validations.Validators.PropertyValidator">PropertyValidator</see> instead.
            </summary>
        </member>
        <member name="P:Pure.Data.Validations.Validators.IPropertyValidator.CustomMessageFormatArguments">
            <summary>
            Custom message arguments. 
            Arg 1: Instance being validated
            Arg 2: Property value
            </summary>
        </member>
        <member name="M:Pure.Data.Validations.Validators.PropertyValidator.CreateValidationError(Pure.Data.Validations.Validators.PropertyValidatorContext)">
            <summary>
            Creates an error validation result for this validator.
            </summary>
            <param name="context">The validator context</param>
            <returns>Returns an error validation result.</returns>
        </member>
        <member name="T:Pure.Data.Validations.Validators.ScalePrecisionValidator">
            <summary>
            Allows a decimal to be validated for scale and precision.  
            Scale would be the number of digits to the right of the decimal point.  
            Precision would be the number of digits.  
            
            It can be configured to use the effective scale and precision 
            (i.e. ignore trailing zeros) if required.
            
            123.4500 has an scale of 4 and a precision of 7, but an effective scale
            and precision of 2 and 5 respectively.
            </summary>
        </member>
        <member name="T:FluentExpressionSQL.ExpressionSqlBuilder">
            <summary>
            Expression 构建SQL 容器
            </summary>
        </member>
        <member name="F:FluentExpressionSQL.ExpressionSqlBuilder.S_listEnglishWords">
            <summary>
            临时表名
            </summary>
        </member>
        <member name="M:FluentExpressionSQL.ExpressionSqlBuilder.NewBuilder``1">
            <summary>
            创建新的FluentExpressionSQL构造器
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:FluentExpressionSQL.ConstantFluentExpressionSQL">
            <summary>
            常量表达式
            </summary>
        </member>
        <member name="M:FluentExpressionSQL.MethodCallFluentExpressionSQL.GetMethodResult(System.Linq.Expressions.MethodCallExpression,FluentExpressionSQL.SqlPack,System.Boolean)">
            <summary>
            获取方法结果
            </summary>
            <param name="expression"></param>
            <param name="sqlPack"></param>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.MethodCallFluentExpressionSQL.Ceiling(System.Linq.Expressions.MethodCallExpression,FluentExpressionSQL.SqlPack)">
            <summary>
            向上取整截取
            </summary>
            <param name="expression"></param>
            <param name="sqlPack"></param>
        </member>
        <member name="M:FluentExpressionSQL.MethodCallFluentExpressionSQL.Floor(System.Linq.Expressions.MethodCallExpression,FluentExpressionSQL.SqlPack)">
            <summary>
            向下取整截取
            </summary>
            <param name="expression"></param>
            <param name="sqlPack"></param>
        </member>
        <member name="T:FluentExpressionSQL.DateTimeDiff">
            <summary>
            计算日期的间隔
            </summary>
        </member>
        <member name="M:FluentExpressionSQL.DateTimeDiff.ToResult(System.String,System.String)">
            <summary>
            计算日期间隔
            </summary>
            <param name="d1">要参与计算的其中一个日期字符串</param>
            <param name="d2">要参与计算的另一个日期字符串</param>
            <returns>一个表示日期间隔的TimeSpan类型</returns>
        </member>
        <member name="M:FluentExpressionSQL.DateTimeDiff.ToResult(System.DateTime,System.DateTime)">
            <summary>
            计算日期间隔
            </summary>
            <param name="d1">要参与计算的其中一个日期</param>
            <param name="d2">要参与计算的另一个日期</param>
            <returns>一个表示日期间隔的TimeSpan类型</returns>
        </member>
        <member name="M:FluentExpressionSQL.DateTimeDiff.ToResult(System.String,System.String,FluentExpressionSQL.diffResultFormat)">
            <summary>
            计算日期间隔
            </summary>
            <param name="d1">要参与计算的其中一个日期字符串</param>
            <param name="d2">要参与计算的另一个日期字符串</param>
            <param name="drf">决定返回值形式的枚举</param>
            <returns>一个代表年月日的int数组，具体数组长度与枚举参数drf有关</returns>
        </member>
        <member name="M:FluentExpressionSQL.DateTimeDiff.ToResult(System.DateTime,System.DateTime,FluentExpressionSQL.diffResultFormat)">
            <summary>
            计算日期间隔
            </summary>
            <param name="d1">要参与计算的其中一个日期</param>
            <param name="d2">要参与计算的另一个日期</param>
            <param name="drf">决定返回值形式的枚举</param>
            <returns>一个代表年月日的int数组，具体数组长度与枚举参数drf有关</returns>
        </member>
        <member name="T:FluentExpressionSQL.diffResultFormat">
            <summary>
            关于返回值形式的枚举
            </summary>
        </member>
        <member name="F:FluentExpressionSQL.diffResultFormat.yymm">
            <summary>
            年数和月数
            </summary>
        </member>
        <member name="F:FluentExpressionSQL.diffResultFormat.yy">
            <summary>
            年数
            </summary>
        </member>
        <member name="F:FluentExpressionSQL.diffResultFormat.mm">
            <summary>
            月数
            </summary>
        </member>
        <member name="F:FluentExpressionSQL.diffResultFormat.dd">
            <summary>
            天数
            </summary>
        </member>
        <member name="M:FluentExpressionSQL.ExpressionExtensions.GetFullPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            returns the property name including the object path
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.ExpressionExtensions.GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            gets the PropertyInfo object from an expression pointing to the associated property
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.ExpressionExtensions.TryFindMemberExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.MemberExpression@)">
            <summary>
            tries to find the member expression regardless of conversions
            </summary>
            <param name="exp"></param>
            <param name="memberExp"></param>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.ExpressionExtensions.IsConversion(System.Linq.Expressions.Expression)">
            <summary>
            Checks if the current expression is a convert expression
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.ExpressionExtensions.IsListType(System.Type)">
            <summary>
            是否列表类型
            </summary>
            <param name="typeOfValue"></param>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.ExpressionExtensions.GetValueOrColumnName(System.Linq.Expressions.Expression,FluentExpressionSQL.SqlPack,System.Boolean)">
            <summary>
            返回值或者列名
            </summary>
            <param name="expression"></param>
            <param name="sqlPack"></param>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.ExpressionExtensions.IsEndToken(System.Linq.Expressions.Expression)">
            <summary>
            是否是结束的表达式
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.ExpressionExtensions.IsBooleanComparison(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the expression is the parameter inside MemberExpression which should be compared with TrueExpression.
            </summary>
            <returns>Returns true if the specified expression is the parameter inside MemberExpression which should be compared with TrueExpression;
            otherwise, false.</returns>
        </member>
        <member name="M:FluentExpressionSQL.ExpressionExtensions.IsParameterAccess(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the expression is the parameter.
            </summary>
            <returns>Returns true if the specified expression is parameter;
            otherwise, false.</returns>
        </member>
        <member name="M:FluentExpressionSQL.ExpressionExtensions.IsParameterOrConvertAccess(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the expression is a Parameter or Convert Expression.
            </summary>
            <returns>Returns true if the specified expression is parameter or convert;
            otherwise, false.</returns>
        </member>
        <member name="M:FluentExpressionSQL.ReflectExt.ParseEnum``1(System.Object)">
            <summary>
            根据枚举值解析枚举项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:FluentExpressionSQL.FluentExpressionSqlBuilder">
            <summary>
            Expression 构建SQL 容器
            </summary>
        </member>
        <member name="F:FluentExpressionSQL.FluentExpressionSqlBuilder.S_listEnglishWords">
            <summary>
            临时表名
            </summary>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSqlBuilder.NewBuilder``1">
            <summary>
            创建新的FluentExpressionSQL构造器
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="F:FluentExpressionSQL.FluentExpressionSQLCore`1.FluentExpressionSqlActionList">
            <summary>
            动态Sql link执行链
            </summary>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ToSqlString">
            <summary>
            输出结果SQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.FormatFilter(FluentExpressionSQL.SqlPack,System.String,System.Object[])">
            <summary>
            拼接SQL过滤条件
            </summary>
            <param name="sqlFilter"></param>
            <param name="filterParams"></param>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.GetTableName(System.Type)">
            <summary>
            根据类型和表映射获取表名
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.NewBuilder">
            <summary>
            创建新的构造器
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.Where(System.String,System.Object[])">
            <summary>
            Where(" a.Name ={0} and a.ID >0 ", "张茂")
            </summary>
            <param name="sqlFilter"></param>
            <param name="filterParams"></param>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.And(System.String,System.Object[])">
            <summary>
            And(" a.Name ={0}", "李四")
            </summary>
            <param name="sqlFilter"></param>
            <param name="filterParams"></param>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.Or(System.String,System.Object[])">
            <summary>
             Or(" a.Name ={0} and a.ID >{1} ", "张茂", 5)
            </summary>
            <param name="sqlFilter"></param>
            <param name="filterParams"></param>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.GroupByByString(System.String)">
            <summary>
            GroupBy("a.Id ")
            </summary>
            <param name="strGroupBy"></param>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.OrderByString(System.String)">
            <summary>
            OrderByString("a.DTCreate desc ")
            </summary>
            <param name="strOrder"></param>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.AddUsedData">
            <summary>
            临时保存使用的临时表名和数据
            </summary>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.SetTableAlias``1(System.String)">
            <summary>
            设置新别名
            </summary>
            <typeparam name="T2"></typeparam>
            <param name="newAlias"></param>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.Append(FluentExpressionSQL.FluentExpressionSQLCore{`0})">
            <summary>
            动态链接FluentExpressionSQLCore对象
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteReader">
            <summary>
            执行并返回DataReader
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteScalar">
            <summary>
            执行并返回Scalar
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.Execute">
            <summary>
            执行并返回影响行数
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteList">
            <summary>
            执行并返回List
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteListWithRowDelegate">
            <summary>
            执行并返回List
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteListByEmit">
            <summary>
            执行并返回List,适合大数据量
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteModel">
            <summary>
            执行并返回单个实体数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteModelByEmit">
            <summary>
            执行并返回单个实体数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteDataTable">
            <summary>
            执行并返回DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteDataTableWithRowDelegate">
            <summary>
            执行并返回DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteDataSet">
            <summary>
            执行并返回DataSet
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteDictionary``2">
            <summary>
            执行并返回Dictionary
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteExpandoObject">
            <summary>
            执行并返回dynamic
            </summary>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteExpandoObjects">
            <summary>
            执行并返回IEnumerable(dynamic)
            </summary>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteReaderAsync">
            <summary>
            执行并返回DataReader
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteScalarAsync">
            <summary>
            执行并返回Scalar
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteAsync">
            <summary>
            执行并返回影响行数
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteListAsync">
            <summary>
            执行并返回List
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteListWithRowDelegateAsync">
            <summary>
            执行并返回List
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteListByEmitAsync">
            <summary>
            执行并返回List,适合大数据量
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteModelAsync">
            <summary>
            执行并返回单个实体数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteModelByEmitAsync">
            <summary>
            执行并返回单个实体数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteDataTableAsync">
            <summary>
            执行并返回DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteDataTableWithRowDelegateAsync">
            <summary>
            执行并返回DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteDataSetAsync">
            <summary>
            执行并返回DataSet
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteDictionaryAsync``2">
            <summary>
            执行并返回Dictionary
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteExpandoObjectAsync">
            <summary>
            执行并返回dynamic
            </summary>
        </member>
        <member name="M:FluentExpressionSQL.FluentExpressionSQLCore`1.ExecuteExpandoObjectsAsync">
            <summary>
            执行并返回IEnumerable(dynamic)
            </summary>
        </member>
        <member name="T:FluentExpressionSQL.Mapper.IColumnMap">
            <summary>
            Maps an entity property to its corresponding column in the database.
            </summary>
        </member>
        <member name="T:FluentExpressionSQL.Mapper.ColumnMap">
            <summary>
            Maps an entity property to its corresponding column in the database.
            </summary>
        </member>
        <member name="P:FluentExpressionSQL.Mapper.ColumnMap.Name">
            <summary>
            Gets the name of the property by using the specified propertyInfo.
            </summary>
        </member>
        <member name="P:FluentExpressionSQL.Mapper.ColumnMap.ColumnName">
            <summary>
            Gets the column name for the current property.
            </summary>
        </member>
        <member name="P:FluentExpressionSQL.Mapper.ColumnMap.KeyType">
            <summary>
            Gets the key type for the current property.
            </summary>
        </member>
        <member name="P:FluentExpressionSQL.Mapper.ColumnMap.Ignored">
            <summary>
            Gets the ignore status of the current property. If ignored, the current property will not be included in queries.
            </summary>
        </member>
        <member name="P:FluentExpressionSQL.Mapper.ColumnMap.IsReadOnly">
            <summary>
            Gets the read-only status of the current property. If read-only, the current property will not be included in INSERT and UPDATE queries.
            </summary>
        </member>
        <member name="P:FluentExpressionSQL.Mapper.ColumnMap.PropertyInfo">
            <summary>
            Gets the property info for the current property.
            </summary>
        </member>
        <member name="M:FluentExpressionSQL.Mapper.ColumnMap.Column(System.String)">
            <summary>
            Fluently sets the column name for the property.
            </summary>
            <param name="columnName">The column name as it exists in the database.</param>
        </member>
        <member name="M:FluentExpressionSQL.Mapper.ColumnMap.Key(FluentExpressionSQL.Mapper.KeyType)">
            <summary>
            Fluently sets the key type of the property.
            </summary>
            <param name="columnName">The column name as it exists in the database.</param>
        </member>
        <member name="M:FluentExpressionSQL.Mapper.ColumnMap.Ignore">
            <summary>
            Fluently sets the ignore status of the property.
            </summary>
        </member>
        <member name="M:FluentExpressionSQL.Mapper.ColumnMap.ReadOnly">
            <summary>
            Fluently sets the read-only status of the property.
            </summary>
        </member>
        <member name="T:FluentExpressionSQL.Mapper.KeyType">
            <summary>
            Used by ClassMapper to determine which entity property represents the key.
            </summary>
        </member>
        <member name="F:FluentExpressionSQL.Mapper.KeyType.NotAKey">
            <summary>
            The property is not a key and is not automatically managed.
            </summary>
        </member>
        <member name="F:FluentExpressionSQL.Mapper.KeyType.Identity">
            <summary>
            The property is an integery-based identity generated from the database.
            </summary>
        </member>
        <member name="F:FluentExpressionSQL.Mapper.KeyType.TriggerIdentity">
            <summary>
            The property is an identity generated by the database trigger.
            </summary>
        </member>
        <!-- 对于成员“F:FluentExpressionSQL.Mapper.KeyType.Guid”忽略有格式错误的 XML 注释 -->
        <member name="F:FluentExpressionSQL.Mapper.KeyType.Assigned">
            <summary>
            The property is a key that is not automatically managed.
            </summary>
        </member>
        <member name="P:FluentExpressionSQL.Mapper.TableMap.SchemaName">
            <summary>
            Gets or sets the schema to use when referring to the corresponding table name in the database.
            </summary>
        </member>
        <member name="P:FluentExpressionSQL.Mapper.TableMap.TableName">
            <summary>
            Gets or sets the table to use in the database.
            </summary>
        </member>
        <member name="P:FluentExpressionSQL.Mapper.TableMap.Properties">
            <summary>
            A collection of properties that will map to columns in the database table.
            </summary>
        </member>
        <member name="T:FluentExpressionSQL.Mapper.TableMap`1">
            <summary>
            Maps an entity to a table through a collection of property maps.
            </summary>
        </member>
        <member name="P:FluentExpressionSQL.Mapper.TableMap`1.SchemaName">
            <summary>
            Gets or sets the schema to use when referring to the corresponding table name in the database.
            </summary>
        </member>
        <member name="P:FluentExpressionSQL.Mapper.TableMap`1.TableName">
            <summary>
            Gets or sets the table to use in the database.
            </summary>
        </member>
        <member name="P:FluentExpressionSQL.Mapper.TableMap`1.Properties">
            <summary>
            A collection of properties that will map to columns in the database table.
            </summary>
        </member>
        <member name="T:FluentExpressionSQL.Mapper.TableMapperContainer">
            <summary>
            数据表和对象类型映射容器
            </summary>
        </member>
        <member name="P:FluentExpressionSQL.SqlPack.SelectStatement">
            <summary>
            Select列语句
            </summary>
        </member>
        <member name="P:FluentExpressionSQL.SqlPack.PageStatement">
            <summary>
            SQL分页语句
            </summary>
        </member>
        <member name="P:FluentExpressionSQL.SqlPack.RangeStatement">
            <summary>
            SQL范围语句
            </summary>
        </member>
        <member name="P:FluentExpressionSQL.SqlPack.CaseWhenStatement">
            <summary>
            Case When语句
            </summary>
        </member>
        <member name="F:FluentExpressionSQL.SqlPack.ExpressionBreckets">
            <summary>
            括号表达式
            </summary>
        </member>
        <member name="P:FluentExpressionSQL.SqlPack.EnableNewSubQuery">
            <summary>
            是否存在Where条件,且是否启用新的子查询
            </summary>
        </member>
        <member name="P:FluentExpressionSQL.SqlPack.HasBeginBrecket">
            <summary>
            是否开始括号Where解析
            </summary>
        </member>
        <member name="P:FluentExpressionSQL.SqlPack.Length">
            <summary>
            where的索引数
            </summary>
        </member>
        <member name="P:FluentExpressionSQL.SqlPack.ColumnAsAliasString">
            <summary>
            列别名 AS 字符串
            </summary>
        </member>
        <member name="M:FluentExpressionSQL.SqlPack.AddDbParameter(System.Object)">
            <summary>
            添加参数
            </summary>
            <param name="parameterValue"></param>
        </member>
        <member name="M:FluentExpressionSQL.SqlPack.AddDbParameter(System.String,System.Object)">
            <summary>
            自定义参数名
            </summary>
            <param name="name"></param>
            <param name="parameterValue"></param>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.SqlPack.AddDbParameterWithoutPickSql(System.Object)">
            <summary>
            添加参数但是不拼接SQL
            </summary>
            <param name="parameterValue"></param>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.SqlPack.SetTableAlias(System.String)">
            <summary>
            设置别名
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.SqlPack.GetTableAlias(System.String)">
            <summary>
            获取表别名
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.SqlPack.GetTableName(System.Type)">
            <summary>
            根据类型和表映射获取表名
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:FluentExpressionSQL.Sql.MySqlDialectProvider.DbFunction_DATEDIFF(System.String,System.Object,System.Object)">
            <summary>
            返回两个日期差值
            </summary>
            <param name="interval"></param>
            <param name="startdate"></param>
            <param name="enddate"></param>
        </member>
        <member name="M:FluentExpressionSQL.Sql.OracleDialectProvider.DbFunction_DATEDIFF(System.String,System.Object,System.Object)">
            <summary>
            返回两个日期差值
            </summary>
            <param name="interval"></param>
            <param name="startdate"></param>
            <param name="enddate"></param>
        </member>
        <member name="M:FluentExpressionSQL.Sql.PostgreSqlDialectProvider.DbFunction_DATEDIFF(System.String,System.Object,System.Object)">
            <summary>
            返回两个日期差值
            </summary>
            <param name="interval"></param>
            <param name="startdate"></param>
            <param name="enddate"></param>
        </member>
        <member name="M:FluentExpressionSQL.Sql.SqlCeDialectProvider.DbFunction_DATEDIFF(System.String,System.Object,System.Object)">
            <summary>
            返回两个日期差值
            </summary>
            <param name="interval"></param>
            <param name="startdate"></param>
            <param name="enddate"></param>
        </member>
        <member name="M:FluentExpressionSQL.Sql.SQLiteDialectProvider.DbFunction_DATEDIFF(System.String,System.Object,System.Object)">
            <summary>
            返回两个日期差值
            </summary>
            <param name="interval"></param>
            <param name="startdate"></param>
            <param name="enddate"></param>
        </member>
        <member name="M:FluentExpressionSQL.Sql.SqlServerDialectProvider.DbFunction_DATEDIFF(System.String,System.Object,System.Object)">
            <summary>
            返回两个日期差值
            </summary>
            <param name="interval"></param>
            <param name="startdate"></param>
            <param name="enddate"></param>
        </member>
        <member name="T:FluentExpressionSQL.GroupByExpression`1">
            <summary>
            分组容器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:FluentExpressionSQL.OrderExpression`1">
            <summary>
            排序容器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
    </members>
</doc>
